{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/.nojekyll","path":".nojekyll","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"source/media/profile_photo.jpg","path":"media/profile_photo.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.nojekyll","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479786868000},{"_id":"source/.DS_Store","hash":"564cce19774ff3979538c0192aa12753ab26f1f1","modified":1476687346000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1459154380000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1459154380000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1459154380000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1459154380000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1459154380000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1459154380000},{"_id":"themes/next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1459154380000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1459154380000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1459154380000},{"_id":"source/_posts/Deploy-https-website-on-nginx-server.md","hash":"cd8790a1c82ac874376abe6a1d2ea74199c8973f","modified":1480914365000},{"_id":"themes/next/_config.yml","hash":"c1b8ef29212064e297fdccd4858ad4ac27ded724","modified":1459410532000},{"_id":"themes/next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1459154380000},{"_id":"themes/next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1459154380000},{"_id":"source/_posts/MySqldb-安装.md","hash":"c8f045db5446287256106ef6d001560653354e44","modified":1461144527000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1476672374000},{"_id":"source/_posts/Hexo-GitHub-搭建博客备忘.md","hash":"a034ae55762253193b152e6ffae1d48478f757bc","modified":1459398073000},{"_id":"source/_posts/Install-Nginx-uwsgi-on-CentOS7.md","hash":"4d06b55225c2bb3635eacd2accd4e81fbbd5cb27","modified":1462522318000},{"_id":"source/_posts/Python-property-decorator.md","hash":"55bb0e4fb5c6d37ebe5bbd74faf1296bb3007756","modified":1460886387000},{"_id":"source/_posts/Nginx-服务器处理一次请求的流程.md","hash":"fb36e7e33e82474abdda19b2d238412ef8daf8ea","modified":1460886317000},{"_id":"source/_posts/Travel-Image.md","hash":"76e32a1afc324724bbfa11fe821c01c251f80490","modified":1459411688000},{"_id":"source/_posts/classmethod-staticmethod-in-python.md","hash":"6b2dc344a3fbedccbb2fb430fed6132a53c4481c","modified":1461573395000},{"_id":"source/_posts/Supervisord-使用总结.md","hash":"8abce18b7ba3e2c48185617cc400e45ca3403295","modified":1463979348000},{"_id":"source/_posts/Vim-使用总结.md","hash":"adfa6c3ff6bfb1ed6729358308638636ea4b9229","modified":1476695606000},{"_id":"source/_posts/Scrapy-框架简介.md","hash":"995232fd4d03155c9300079a6d014e6a93e53c4b","modified":1460886491000},{"_id":"source/_posts/flask-session-的坑.md","hash":"a36727b2e284fc0491b8de1afc79cbcd88de532d","modified":1480678397000},{"_id":"source/_posts/pip-install-psycopg2-error-fix.md","hash":"470015c827fa41ee41c61b985cc05d0246bb9273","modified":1479739451000},{"_id":"source/_posts/flask-restul-使用体会.md","hash":"14b3d1688c3a59aa154fa5bb3a04708a7d5f8892","modified":1479968527000},{"_id":"source/_posts/增加-python-包搜索路径.md","hash":"397e9c5d045cae877015b2d7d008a25f954f3da8","modified":1474264362000},{"_id":"source/_posts/what-is-WSGI.md","hash":"1c55a9535fca1b653bf3f0b9b6b992b11662c04d","modified":1460886511000},{"_id":"source/_posts/将python-脚本制作成命令.md","hash":"2ca90600af5a9762185af6895fca0595d91182ec","modified":1474075543000},{"_id":"source/_posts/数据库连接占满504-error.md","hash":"f846cfd38d8cdd12b73394a6bcdd23a4c3de13cc","modified":1477362062000},{"_id":"source/_posts/致优一周年，香山团建.md","hash":"ca75cbdf90f83f4cb02888ad162fe8740d89f5d9","modified":1459524324000},{"_id":"source/_posts/开发工具.md","hash":"1dd13a0337ecc832a8398979a005f576b4c9343a","modified":1477626638000},{"_id":"source/about/index.md","hash":"8f40b6631c760a85675c9eeb9c835295f0495542","modified":1459174164000},{"_id":"source/_posts/跨域问题解决方法.md","hash":"df14f357d3c640b1cd4fe3214a0e07bc2233680b","modified":1461144517000},{"_id":"source/categories/index.md","hash":"76f4f357f82137419dfee982957796e878ef0d9d","modified":1459164210000},{"_id":"source/media/.DS_Store","hash":"392122691ab937ece43206c3bd4a67d89dc52daa","modified":1461576164000},{"_id":"source/tags/index.md","hash":"48fd1f1fda66efe5906d492fc2e3396585048817","modified":1459164214000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1459154380000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1459154233000},{"_id":"themes/next/.git/config","hash":"fbc6b5fd3f8e5a1b779ad63c5ea505a765a07a51","modified":1459154380000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1459154380000},{"_id":"themes/next/.git/packed-refs","hash":"803de91c997fa2ebce5790b082a140e770a68b4a","modified":1459154380000},{"_id":"themes/next/.git/index","hash":"c7377c91d6e6996e95de8679c357ef777c1391b2","modified":1459398628000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d6047c2afeabe9a329d92eb2a03490ff181616c2","modified":1459154380000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1459154380000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1459154380000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1459154380000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1459154380000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1459154380000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1459154380000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1459154380000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1459154380000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1459154380000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1459154380000},{"_id":"themes/next/layout/_layout.swig","hash":"993df74467835eeb223d92206f36ecd6cfe5119e","modified":1459154380000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1459154380000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1459154380000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1459154380000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1459154380000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1459154380000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1459154380000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1459154380000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1459154380000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1459154380000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1459154380000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1459154233000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1459154233000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1459154233000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1459154233000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1459154233000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1459154233000},{"_id":"themes/next/.git/logs/HEAD","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/layout/_macro/post.swig","hash":"379737761f44fb71de997a73192f35b8e568ac58","modified":1459154380000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1459154380000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1459154380000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1459154380000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e8e9c986ce1a0b370afd36703d49f1818492cb64","modified":1459154380000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0ff291b272808fd471747f66b621822ed1dc8abd","modified":1459154380000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1459154380000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1459154380000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1459154380000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1459154380000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a7084dcef03fa0d0c97962ec9828b77c9a73592f","modified":1459154380000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1459154380000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1459154380000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1459154380000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1459154380000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1459154380000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1459154380000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1459154380000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1459154380000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1459154380000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459154380000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459154380000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1459154380000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1459154380000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1459154380000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1459154380000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/.git/refs/heads/master","hash":"72c2882b376e8bf62558e30133866c7828860633","modified":1459154380000},{"_id":"themes/next/.git/objects/68/917bfc263a7ce60252751274d315daaafc9c29","hash":"92ef18565fb7b64ac9bc3612946470653c80105c","modified":1459398628000},{"_id":"themes/next/.git/objects/f7/1533d863c78a5b9f43dff3b775814d8f8f2412","hash":"31165b333627602f81bc5a4c8d2b9255ca75afbc","modified":1459398628000},{"_id":"themes/next/.git/objects/f9/b71b52ebd381af5a87f5937a82a4d947e5adb6","hash":"41b36896f4f472dd1099317e69a236d74ed3bfb1","modified":1459398628000},{"_id":"themes/next/.git/objects/ae/c49958a1b651716f708a21f3f10352553e3da8","hash":"80cdd08b8875919dcc92b1c722dc36a378932d24","modified":1459156475000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1459154380000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1459154380000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1459154380000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1459154380000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1459154380000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c83ef088e3dfee5f1eeb0640e271859426ec044c","modified":1459165613000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"b9f9211d7dcc32e0232c404eab39de75c8106b4f","modified":1459166317000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1459154380000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ce88ec0557b6d765ae38dd5984b178c7fc4d376e","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1459154380000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bcf8238cf842bbfc8f3ea733889bc4dacf59d3c4","modified":1459154380000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"23df0070bef4952cc0e669f20fc78a8abba9676e","modified":1459154380000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1459154380000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1459154380000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1459154380000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1459154380000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1459154380000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1459154380000},{"_id":"themes/next/source/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1459154380000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1459154380000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"2e829b0a7b6cbc4318672f3eeb7b26249038132d","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5522ddf7df5c150d97804584840976daa0e12d63","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1459154380000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.idx","hash":"86cfb55c71aeec9c6caf28c25df915e940da2639","modified":1459154380000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1459154380000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1459154380000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1459154380000},{"_id":"source/media/profile_photo.jpg","hash":"41ef255cef289c9311e70c1bd40d0ef0c1cb1256","modified":1461575949000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4c0be672d977ef793c72cf838f1d920f2749dda0","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"12f703e5fea9d8a7ba65c8cea93a5cf5c2b78457","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1459154380000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.pack","hash":"4f3c8d939a608914a64e822e3df8e2cc2b00acac","modified":1459154380000},{"_id":"public/about/index.html","hash":"6f0bc9b8e679c35bcae4a1ec112df49f0b2e7d1e","modified":1480914393013},{"_id":"public/categories/index.html","hash":"c914bb0c4a89bbc5823c210adf8bdaaec5d9ee1d","modified":1480914393035},{"_id":"public/archives/index.html","hash":"965bd92ffd31dc44dc62a14343258db0ba445934","modified":1480914393174},{"_id":"public/archives/page/2/index.html","hash":"c37504f6223e9938442b54cb9093c2587a43bbda","modified":1480914393175},{"_id":"public/archives/page/4/index.html","hash":"88e8496afcca1ee2a5e16c582f0d73a537f1428b","modified":1480914393175},{"_id":"public/archives/page/3/index.html","hash":"49b6eaf3cb544037df45dd7329949ba9c61cae11","modified":1480914393175},{"_id":"public/archives/2016/index.html","hash":"c495f0be9342a07452f663c63cc31dbccc3ce58d","modified":1480914393175},{"_id":"public/archives/2016/page/3/index.html","hash":"6d7f92a9b6a3e14e25433871b69b9ef999188774","modified":1480914393175},{"_id":"public/archives/2016/page/2/index.html","hash":"92482cbd0ac5a333e20d26f11fb85094301427e2","modified":1480914393175},{"_id":"public/tags/index.html","hash":"ffc243957552395e26d8fa023ddc362c3da9f5bd","modified":1480914393175},{"_id":"public/archives/2016/04/index.html","hash":"80f126985a3b21f98fe49531e329f486d104ba58","modified":1480914393175},{"_id":"public/archives/2016/03/index.html","hash":"49a2e2184b41448f7c6d5ad56cfb7418cd497f30","modified":1480914393175},{"_id":"public/archives/2016/05/index.html","hash":"66388fef84d190bb27388924d52af5bf2b8607b1","modified":1480914393175},{"_id":"public/archives/2016/04/page/2/index.html","hash":"4257913b5096f309980da69729618d207e9ff10a","modified":1480914393176},{"_id":"public/archives/2016/08/index.html","hash":"2707b7a6a0155084874087fe2e3d32ee9713915a","modified":1480914393176},{"_id":"public/archives/2016/10/index.html","hash":"41469eff427638ce8d012c51d7e35908e4c586e5","modified":1480914393176},{"_id":"public/archives/2016/11/index.html","hash":"f1023a3ef1eec0e449176da2741d7b3ef212052b","modified":1480914393176},{"_id":"public/categories/技术相关/index.html","hash":"14fa85ace99953e0cd924675c153872eb841824d","modified":1480914393176},{"_id":"public/archives/2016/12/index.html","hash":"a336ccad1e999f1faef6e34d3c0fd467cda83ede","modified":1480914393176},{"_id":"public/categories/技术相关/page/2/index.html","hash":"9838e9a276409eea226232754b81674884e1c1e9","modified":1480914393176},{"_id":"public/categories/技术相关/page/3/index.html","hash":"dcc1f7f98a40d6c6a5a5dd727afad91fe240e719","modified":1480914393176},{"_id":"public/categories/技术相关/page/4/index.html","hash":"3af2854a4f319a398c6bf745a0bd54816f48f581","modified":1480914393176},{"_id":"public/categories/旅行/index.html","hash":"547bf92034af4598313202af4967948bb71eeb0a","modified":1480914393176},{"_id":"public/archives/2016/page/4/index.html","hash":"bef864221fca7552a8e877db20ceb6704ea2f460","modified":1480914393176},{"_id":"public/tags/MySqldb/index.html","hash":"a57a30e092cd73a38aa01944c4a2e9e26e211e54","modified":1480914393176},{"_id":"public/tags/小问题/index.html","hash":"ce4f800635eb7eff2dc95f14246cadab3ed4a4d3","modified":1480914393176},{"_id":"public/tags/nginx/index.html","hash":"bbec657f91700884bb01ef5ff81fcb844cffdc3e","modified":1480914393176},{"_id":"public/tags/Nginx/index.html","hash":"f3e482b7d49053ae97de7c62fad28dbd795f7bba","modified":1480914393176},{"_id":"public/tags/github/index.html","hash":"c41c937bf08886ce49a21a537956e1bc66a15a6a","modified":1480914393176},{"_id":"public/tags/uwsgi/index.html","hash":"bf203f4e4c98f4bc9312e46f1f653f0a1563d6b4","modified":1480914393176},{"_id":"public/tags/Hexo/index.html","hash":"fa0576ad519b721f824bb452707de95d3401e49c","modified":1480914393176},{"_id":"public/tags/python/index.html","hash":"d3690327be9c99239e1d78d2ecf68dc232dc8039","modified":1480914393176},{"_id":"public/tags/python/page/2/index.html","hash":"1b62c212cd9f8590785df9e63e54d0a8b7b5ac46","modified":1480914393176},{"_id":"public/tags/垦丁/index.html","hash":"af9642f521d6de53c5cbf5d9e32180ccead0f92c","modified":1480914393176},{"_id":"public/tags/运维/index.html","hash":"07739d4b16b69734c41a7c758e40aa4ed372c31b","modified":1480914393176},{"_id":"public/tags/台湾/index.html","hash":"b5d7aa8f6670778eb006986fb85957c8ce724650","modified":1480914393176},{"_id":"public/tags/Supervisor/index.html","hash":"796ebe86410ea1cccbb575a343b09371f6d7fc55","modified":1480914393176},{"_id":"public/tags/vim/index.html","hash":"f2830283207feb04b793f2870e153e96ba0bb87d","modified":1480914393176},{"_id":"public/tags/Scrapy/index.html","hash":"d1fb0914967798335535b4c501df5608d5891fe5","modified":1480914393176},{"_id":"public/tags/flask-restful/index.html","hash":"d107d43ca8d7f35316d2750fbcfadcfa44f9d6b4","modified":1480914393176},{"_id":"public/tags/flask/index.html","hash":"5aaa4df19d355f8446d0dfd4db317917adbd58ba","modified":1480914393176},{"_id":"public/tags/session/index.html","hash":"eeadca93a76b0ab7b25d2adaf2dbaacc93fb300d","modified":1480914393177},{"_id":"public/tags/WSGI/index.html","hash":"c4a96306ddf92a5bff7c870117b5a5f2b61d13fa","modified":1480914393177},{"_id":"public/tags/数据库/index.html","hash":"223007ebb4ca0920ed405c07d0dcdf2f7730b5ca","modified":1480914393177},{"_id":"public/tags/致优团建/index.html","hash":"1bb4a7084e31780ab5d9821ccdbd8cb32dd222ce","modified":1480914393177},{"_id":"public/tags/跨域问题/index.html","hash":"08207bf87e1b0faf7da25767aaa4d85d2fcae27e","modified":1480914393177},{"_id":"public/2016/11/21/pip-install-psycopg2-error-fix/index.html","hash":"52e4cc0b085be38fc63f572db87248a71eea3707","modified":1480914393177},{"_id":"public/2016/12/02/flask-session-的坑/index.html","hash":"25e3eef6016a32a92849c660a7ca7776241a6c56","modified":1480914393177},{"_id":"public/2016/10/28/开发工具/index.html","hash":"d555393630be9e808af43a4e227695a450cff125","modified":1480914393177},{"_id":"public/2016/10/17/Vim-使用总结/index.html","hash":"86c3167b341adbacdf2c0a964620c066afc46e1f","modified":1480914393177},{"_id":"public/2016/08/25/将python-脚本制作成命令/index.html","hash":"85851cfd41786c39e64587ffdcc56ffc2a095259","modified":1480914393177},{"_id":"public/2016/05/23/Supervisord-使用总结/index.html","hash":"52715fe338ad3dd48bdef78aaa4ed0490d009ae0","modified":1480914393177},{"_id":"public/2016/05/06/Install-Nginx-uwsgi-on-CentOS7/index.html","hash":"f8de31c636ac47de43e339652a0b977d53f4c2fa","modified":1480914393177},{"_id":"public/2016/04/25/classmethod-staticmethod-in-python/index.html","hash":"0a9fa966b50327c813c0fa17165941c567c19689","modified":1480914393177},{"_id":"public/2016/04/20/增加-python-包搜索路径/index.html","hash":"eec8d65318cc3c5b7eb99f6bfb5b064b9e8d2e8b","modified":1480914393177},{"_id":"public/2016/04/17/跨域问题解决方法/index.html","hash":"8fafaf05b451f258a741b6fdb32a5c4046fb779e","modified":1480914393177},{"_id":"public/2016/11/24/flask-restul-使用体会/index.html","hash":"73142d0ce9457671155d89a9342c08e364a587aa","modified":1480914393177},{"_id":"public/2016/04/13/MySqldb-安装/index.html","hash":"cc32fd1a2a4ce3604549d1582fc3982fa187322b","modified":1480914393177},{"_id":"public/2016/04/12/Nginx-服务器处理一次请求的流程/index.html","hash":"1790093b321937d9fb02575e9772fb267c1b786a","modified":1480914393177},{"_id":"public/2016/04/12/Python-property-decorator/index.html","hash":"b3768f567c1ee6e2ecea4766ed9f0286f5b28af9","modified":1480914393177},{"_id":"public/2016/04/05/what-is-WSGI/index.html","hash":"ff20dcee94fc01d2136537019bf04c1b573604f0","modified":1480914393177},{"_id":"public/2016/03/31/Scrapy-框架简介/index.html","hash":"cfd0783d3998db2a59d5319e310b61e19a6f98bf","modified":1480914393177},{"_id":"public/2016/04/01/致优一周年，香山团建/index.html","hash":"61f46788fc98ec4c7592e2499fc62a3532688635","modified":1480914393178},{"_id":"public/2016/03/31/Travel-Image/index.html","hash":"f3e3c7cdf5a4332b9fd57bbeacbcc551add953fb","modified":1480914393180},{"_id":"public/2016/03/28/Hexo-GitHub-搭建博客备忘/index.html","hash":"aef038ec4efd9e53cd5264261fa2497912aca2a9","modified":1480914393180},{"_id":"public/2016/10/25/数据库连接占满504-error/index.html","hash":"750ba1cf9aaa9258c55b944bfe815ff994fe4de6","modified":1480914393180},{"_id":"public/index.html","hash":"9a062fe1f1621a1e09356e5de369dfbc674ceaf5","modified":1480914393180},{"_id":"public/page/3/index.html","hash":"e2d6be41aed542c520f8508a4583de9926a89891","modified":1480914393180},{"_id":"public/page/4/index.html","hash":"a856c8698af387e6ff9cb3d3ffe445a5c456b884","modified":1480914393181},{"_id":"public/page/2/index.html","hash":"9048df4dd6a0b0be7695bdd82bf66b3aa680e0c4","modified":1480914393181},{"_id":"public/archives/page/5/index.html","hash":"ac5076a746fc460692707a85d8b0d4d90e92df86","modified":1480914393184},{"_id":"public/archives/2016/page/5/index.html","hash":"94c2c17e6baf1af5ca087c5ba1145c4303857a4a","modified":1480914393184},{"_id":"public/page/5/index.html","hash":"8791e5839390aa4caf84fd8d350f726af9760967","modified":1480914393185},{"_id":"public/tags/https/index.html","hash":"665d0c5363bae89849f03502e3d6685e4bbad79f","modified":1480914393185},{"_id":"public/2016/12/05/Deploy-https-website-on-nginx-server/index.html","hash":"a69c88e0bff880a24c53f591c542bbc4e0473afd","modified":1480914393185}],"Category":[{"name":"技术相关","_id":"ciwbg55t80002k4rnxrpfa5q3"},{"name":"旅行","_id":"ciwbg55tz000jk4rnf3yee8qp"}],"Data":[],"Page":[{"title":"关于我","date":"2016-03-28T09:36:10.000Z","type":"about","comments":0,"_content":"\n## 初入江湖小码农一枚\n\n\n10-14 赛季 华东理工大学计算机科学与技术专业\n14-15 赛季 Chinese University of Hong Kong Computer Science master\n15 年下半年开始工作\n目前主要从事 web 后端开发（python 相关）\n\n爱旅行，爱音乐，热篮球，爱健身，爱妹子～\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-03-28 17:36:10\ntype: \"about\"\ncomments: false\n---\n\n## 初入江湖小码农一枚\n\n\n10-14 赛季 华东理工大学计算机科学与技术专业\n14-15 赛季 Chinese University of Hong Kong Computer Science master\n15 年下半年开始工作\n目前主要从事 web 后端开发（python 相关）\n\n爱旅行，爱音乐，热篮球，爱健身，爱妹子～\n","updated":"2016-03-28T14:09:24.000Z","path":"about/index.html","layout":"page","_id":"ciwbg55yi002pk4rnzhae3gpe","content":"<h2 id=\"初入江湖小码农一枚\"><a href=\"#初入江湖小码农一枚\" class=\"headerlink\" title=\"初入江湖小码农一枚\"></a>初入江湖小码农一枚</h2><p>10-14 赛季 华东理工大学计算机科学与技术专业<br>14-15 赛季 Chinese University of Hong Kong Computer Science master<br>15 年下半年开始工作<br>目前主要从事 web 后端开发（python 相关）</p>\n<p>爱旅行，爱音乐，热篮球，爱健身，爱妹子～</p>\n","excerpt":"","more":"<h2 id=\"初入江湖小码农一枚\"><a href=\"#初入江湖小码农一枚\" class=\"headerlink\" title=\"初入江湖小码农一枚\"></a>初入江湖小码农一枚</h2><p>10-14 赛季 华东理工大学计算机科学与技术专业<br>14-15 赛季 Chinese University of Hong Kong Computer Science master<br>15 年下半年开始工作<br>目前主要从事 web 后端开发（python 相关）</p>\n<p>爱旅行，爱音乐，热篮球，爱健身，爱妹子～</p>\n"},{"title":"分类","date":"2016-03-28T09:37:11.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-03-28 17:37:11\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-03-28T11:23:30.000Z","path":"categories/index.html","layout":"page","_id":"ciwbg55yk002rk4rn5jph9xui","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-03-28T09:36:59.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-03-28 17:36:59\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-03-28T11:23:34.000Z","path":"tags/index.html","layout":"page","_id":"ciwbg55ym002tk4rna8wrp623","content":"","excerpt":"","more":""}],"Post":[{"title":"Deploy https website on nginx server","date":"2016-12-05T02:16:22.000Z","_content":"为了提高网站安全性，最近将 http 的站点转换部署为了 https。 使用了[Let's encrypt](https://letsencrypt.org/) CA认证证书，[certbot](https://certbot.eff.org/#ubuntutrusty-nginx)自动部署证书工具。\n\n# Requirement\n\nNginx server (编译时需要加 --with-http_ssl_module 模块)。 Ubuntu 14.04 操作系统。\n\n# Deploy HTTPS\n\n## Install Certbot\n\n运行以下命令，安装 certbot-auto 脚本\n\n<!--more-->\n\n```\nwget https://dl.eff.org/certbot-auto\nchmod a+x certbot-auto\n```\n它会自动安装自身需要的依赖，并且自动更新，只需要运行以下\n\n\t$ ./certbot-auto\n\n为了确保 certbot 有权限访问并验证目录，需要在 nginx 配置一下目录。(以默认目录为例)\n\n\tsudo vim /etc/nginx/sites-available/default\n\n添加一下 block\n\n```\nserver {\n        . . .\n\n        location ~ /.well-known {\n                allow all;\n        }\n\n        . . .\n}\n```\n\n检查 nginx 配置并重启：\n\n```bash\n\tsudo nginx -t\n\tsudo nbgix -s reload\n```\n## 获取证书\n\n首先要知道 web 根目录，也就是网站的根目录。我们使用 webroot 插件请求 ssl 认证，-d 参数指出绑定到哪个域名下面。可以指定多个域名，但是要确保最高域名在最前面。\n\n\tcertbot-auto certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d www.example.com\n\t\n> certbot-auto 需要管理员权限，非管理员用户需要加 sudo 运行\n\n如果一切顺利，会有如下输出：\n\n```\nOutput:\nIMPORTANT NOTES:\n - If you lose your account credentials, you can recover through\n   e-mails sent to sammy@digitalocean.com\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/example.com/fullchain.pem. Your\n   cert will expire on 2016-03-15. To obtain a new version of the\n   certificate in the future, simply run Let's Encrypt again.\n - Your account credentials have been saved in your Let's Encrypt\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Let's\n   Encrypt so making regular backups of this folder is ideal.\n - If like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n/etc/letsencrypt/live/ 就是保存证书的目录， 2016-03-15 是有效期截止日。\n\n## 证书文件\n\n经过授权之后，你会得到如下文件：\n\n* cert.pem: 你的域名的授权证书\n* chain.pem: The Let's Encrypt 链证书\n* fullchain.pem: 结合了 cert.pem 和 chain.pem 的文件\n* privkey.pem: 你的私钥文件\n\n牢记这些文件的位置非常重要，因为你要定期做备份，以防万一。\n`/etc/letsencrypt/live/` 目录实际上是链接到`/etc/letsencrypt/archive` 目录上的。而且它会每次都链接到最新的授权文件。\n可以通过如下命令查看：\n\n\tsudo ls -l /etc/letsencrypt/live/your_domain_name\n\n## 生成强霍夫曼组\n\n为了进一步加强安全性，我们需要生成一个 2048 位的霍夫曼组\n\n\tsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n生成后的文件存储在 /etc/ssl/certs/dhparam.pem\n\n# Config TLS/SSL On Nginx Server\n\n现在你有了一个 ssl 的证书，现在需要将它部署在 Nginx 上。打开 server 配置文件，注释掉，原来的 listen 80, listen servername 等行。\n\n添加一下配置：\n\n```\n\tlisten 443 ssl;\n  server_name example.com www.example.com;\n  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n```\n仅允许强 ssl 链接，并使用刚刚生成的霍夫曼组：\n\n```\n \t\t\t\tssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n        ssl_session_timeout 1d;\n        ssl_session_cache shared:SSL:50m;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security max-age=15768000;\n```\n最后将 80 端口的请求全部转发到 443 ssl 端口，添加一个新的 server block：\n\n```\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$host$request_uri;\n}\n```\n检查 nginx 配置并重启：\n\n```bash\n\tsudo nginx -t\n\tsudo nbgix -s reload\n```\n\n# Renew 证书\n\n[Let's encrypt](https://letsencrypt.org/)的证书有效期为90天，但是推荐每60天更新一次，留出 30 天的缓冲期。运行以下命令更新证书：\n\n\tcertbot-auto renew\n\t\n以上任务可以设置为一个 crontab 的定期任务。`sudo crontab -e`\n\n```\n\t30 2 * * 1 /usr/local/sbin/certbot-auto renew >> /var/log/le-renew.log\n\t35 2 * * 1 /etc/init.d/nginx reload\n```\n每周一的，凌晨2:30，renew。 2:35 重启 nginx server。\n\n# Conclusion\n\n这样你就配置好了一个使用[Let's encrypt](https://letsencrypt.org/)证书的，基于 Nginx 的站点。\n\n\n\n\n","source":"_posts/Deploy-https-website-on-nginx-server.md","raw":"---\ntitle: Deploy https website on nginx server\ndate: 2016-12-05 10:16:22\ntags:\t\n\t\t- https\n\t\t- nginx\ncategories: 技术相关\n---\n为了提高网站安全性，最近将 http 的站点转换部署为了 https。 使用了[Let's encrypt](https://letsencrypt.org/) CA认证证书，[certbot](https://certbot.eff.org/#ubuntutrusty-nginx)自动部署证书工具。\n\n# Requirement\n\nNginx server (编译时需要加 --with-http_ssl_module 模块)。 Ubuntu 14.04 操作系统。\n\n# Deploy HTTPS\n\n## Install Certbot\n\n运行以下命令，安装 certbot-auto 脚本\n\n<!--more-->\n\n```\nwget https://dl.eff.org/certbot-auto\nchmod a+x certbot-auto\n```\n它会自动安装自身需要的依赖，并且自动更新，只需要运行以下\n\n\t$ ./certbot-auto\n\n为了确保 certbot 有权限访问并验证目录，需要在 nginx 配置一下目录。(以默认目录为例)\n\n\tsudo vim /etc/nginx/sites-available/default\n\n添加一下 block\n\n```\nserver {\n        . . .\n\n        location ~ /.well-known {\n                allow all;\n        }\n\n        . . .\n}\n```\n\n检查 nginx 配置并重启：\n\n```bash\n\tsudo nginx -t\n\tsudo nbgix -s reload\n```\n## 获取证书\n\n首先要知道 web 根目录，也就是网站的根目录。我们使用 webroot 插件请求 ssl 认证，-d 参数指出绑定到哪个域名下面。可以指定多个域名，但是要确保最高域名在最前面。\n\n\tcertbot-auto certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d www.example.com\n\t\n> certbot-auto 需要管理员权限，非管理员用户需要加 sudo 运行\n\n如果一切顺利，会有如下输出：\n\n```\nOutput:\nIMPORTANT NOTES:\n - If you lose your account credentials, you can recover through\n   e-mails sent to sammy@digitalocean.com\n - Congratulations! Your certificate and chain have been saved at\n   /etc/letsencrypt/live/example.com/fullchain.pem. Your\n   cert will expire on 2016-03-15. To obtain a new version of the\n   certificate in the future, simply run Let's Encrypt again.\n - Your account credentials have been saved in your Let's Encrypt\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Let's\n   Encrypt so making regular backups of this folder is ideal.\n - If like Let's Encrypt, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n```\n\n/etc/letsencrypt/live/ 就是保存证书的目录， 2016-03-15 是有效期截止日。\n\n## 证书文件\n\n经过授权之后，你会得到如下文件：\n\n* cert.pem: 你的域名的授权证书\n* chain.pem: The Let's Encrypt 链证书\n* fullchain.pem: 结合了 cert.pem 和 chain.pem 的文件\n* privkey.pem: 你的私钥文件\n\n牢记这些文件的位置非常重要，因为你要定期做备份，以防万一。\n`/etc/letsencrypt/live/` 目录实际上是链接到`/etc/letsencrypt/archive` 目录上的。而且它会每次都链接到最新的授权文件。\n可以通过如下命令查看：\n\n\tsudo ls -l /etc/letsencrypt/live/your_domain_name\n\n## 生成强霍夫曼组\n\n为了进一步加强安全性，我们需要生成一个 2048 位的霍夫曼组\n\n\tsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n生成后的文件存储在 /etc/ssl/certs/dhparam.pem\n\n# Config TLS/SSL On Nginx Server\n\n现在你有了一个 ssl 的证书，现在需要将它部署在 Nginx 上。打开 server 配置文件，注释掉，原来的 listen 80, listen servername 等行。\n\n添加一下配置：\n\n```\n\tlisten 443 ssl;\n  server_name example.com www.example.com;\n  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n```\n仅允许强 ssl 链接，并使用刚刚生成的霍夫曼组：\n\n```\n \t\t\t\tssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\n        ssl_session_timeout 1d;\n        ssl_session_cache shared:SSL:50m;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security max-age=15768000;\n```\n最后将 80 端口的请求全部转发到 443 ssl 端口，添加一个新的 server block：\n\n```\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$host$request_uri;\n}\n```\n检查 nginx 配置并重启：\n\n```bash\n\tsudo nginx -t\n\tsudo nbgix -s reload\n```\n\n# Renew 证书\n\n[Let's encrypt](https://letsencrypt.org/)的证书有效期为90天，但是推荐每60天更新一次，留出 30 天的缓冲期。运行以下命令更新证书：\n\n\tcertbot-auto renew\n\t\n以上任务可以设置为一个 crontab 的定期任务。`sudo crontab -e`\n\n```\n\t30 2 * * 1 /usr/local/sbin/certbot-auto renew >> /var/log/le-renew.log\n\t35 2 * * 1 /etc/init.d/nginx reload\n```\n每周一的，凌晨2:30，renew。 2:35 重启 nginx server。\n\n# Conclusion\n\n这样你就配置好了一个使用[Let's encrypt](https://letsencrypt.org/)证书的，基于 Nginx 的站点。\n\n\n\n\n","slug":"Deploy-https-website-on-nginx-server","published":1,"updated":"2016-12-05T05:06:05.000Z","_id":"ciwbg55t20000k4rnzclskvqb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为了提高网站安全性，最近将 http 的站点转换部署为了 https。 使用了<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s encrypt</a> CA认证证书，<a href=\"https://certbot.eff.org/#ubuntutrusty-nginx\" target=\"_blank\" rel=\"external\">certbot</a>自动部署证书工具。</p>\n<h1 id=\"Requirement\"><a href=\"#Requirement\" class=\"headerlink\" title=\"Requirement\"></a>Requirement</h1><p>Nginx server (编译时需要加 –with-http_ssl_module 模块)。 Ubuntu 14.04 操作系统。</p>\n<h1 id=\"Deploy-HTTPS\"><a href=\"#Deploy-HTTPS\" class=\"headerlink\" title=\"Deploy HTTPS\"></a>Deploy HTTPS</h1><h2 id=\"Install-Certbot\"><a href=\"#Install-Certbot\" class=\"headerlink\" title=\"Install Certbot\"></a>Install Certbot</h2><p>运行以下命令，安装 certbot-auto 脚本</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.eff.org/certbot-auto</div><div class=\"line\">chmod a+x certbot-auto</div></pre></td></tr></table></figure>\n<p>它会自动安装自身需要的依赖，并且自动更新，只需要运行以下</p>\n<pre><code>$ ./certbot-auto\n</code></pre><p>为了确保 certbot 有权限访问并验证目录，需要在 nginx 配置一下目录。(以默认目录为例)</p>\n<pre><code>sudo vim /etc/nginx/sites-available/default\n</code></pre><p>添加一下 block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        . . .</div><div class=\"line\"></div><div class=\"line\">        location ~ /.well-known &#123;</div><div class=\"line\">                allow all;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        . . .</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>检查 nginx 配置并重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo nginx -t</div><div class=\"line\">sudo nbgix <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<h2 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h2><p>首先要知道 web 根目录，也就是网站的根目录。我们使用 webroot 插件请求 ssl 认证，-d 参数指出绑定到哪个域名下面。可以指定多个域名，但是要确保最高域名在最前面。</p>\n<pre><code>certbot-auto certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d www.example.com\n</code></pre><blockquote>\n<p>certbot-auto 需要管理员权限，非管理员用户需要加 sudo 运行</p>\n</blockquote>\n<p>如果一切顺利，会有如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Output:</div><div class=\"line\">IMPORTANT NOTES:</div><div class=\"line\"> - If you lose your account credentials, you can recover through</div><div class=\"line\">   e-mails sent to sammy@digitalocean.com</div><div class=\"line\"> - Congratulations! Your certificate and chain have been saved at</div><div class=\"line\">   /etc/letsencrypt/live/example.com/fullchain.pem. Your</div><div class=\"line\">   cert will expire on 2016-03-15. To obtain a new version of the</div><div class=\"line\">   certificate in the future, simply run Let&apos;s Encrypt again.</div><div class=\"line\"> - Your account credentials have been saved in your Let&apos;s Encrypt</div><div class=\"line\">   configuration directory at /etc/letsencrypt. You should make a</div><div class=\"line\">   secure backup of this folder now. This configuration directory will</div><div class=\"line\">   also contain certificates and private keys obtained by Let&apos;s</div><div class=\"line\">   Encrypt so making regular backups of this folder is ideal.</div><div class=\"line\"> - If like Let&apos;s Encrypt, please consider supporting our work by:</div><div class=\"line\"></div><div class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</div><div class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</div></pre></td></tr></table></figure>\n<p>/etc/letsencrypt/live/ 就是保存证书的目录， 2016-03-15 是有效期截止日。</p>\n<h2 id=\"证书文件\"><a href=\"#证书文件\" class=\"headerlink\" title=\"证书文件\"></a>证书文件</h2><p>经过授权之后，你会得到如下文件：</p>\n<ul>\n<li>cert.pem: 你的域名的授权证书</li>\n<li>chain.pem: The Let’s Encrypt 链证书</li>\n<li>fullchain.pem: 结合了 cert.pem 和 chain.pem 的文件</li>\n<li>privkey.pem: 你的私钥文件</li>\n</ul>\n<p>牢记这些文件的位置非常重要，因为你要定期做备份，以防万一。<br><code>/etc/letsencrypt/live/</code> 目录实际上是链接到<code>/etc/letsencrypt/archive</code> 目录上的。而且它会每次都链接到最新的授权文件。<br>可以通过如下命令查看：</p>\n<pre><code>sudo ls -l /etc/letsencrypt/live/your_domain_name\n</code></pre><h2 id=\"生成强霍夫曼组\"><a href=\"#生成强霍夫曼组\" class=\"headerlink\" title=\"生成强霍夫曼组\"></a>生成强霍夫曼组</h2><p>为了进一步加强安全性，我们需要生成一个 2048 位的霍夫曼组</p>\n<pre><code>sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre><p>生成后的文件存储在 /etc/ssl/certs/dhparam.pem</p>\n<h1 id=\"Config-TLS-SSL-On-Nginx-Server\"><a href=\"#Config-TLS-SSL-On-Nginx-Server\" class=\"headerlink\" title=\"Config TLS/SSL On Nginx Server\"></a>Config TLS/SSL On Nginx Server</h1><p>现在你有了一个 ssl 的证书，现在需要将它部署在 Nginx 上。打开 server 配置文件，注释掉，原来的 listen 80, listen servername 等行。</p>\n<p>添加一下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen 443 ssl;</div><div class=\"line\"> server_name example.com www.example.com;</div><div class=\"line\"> ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</div><div class=\"line\"> ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</div></pre></td></tr></table></figure>\n<p>仅允许强 ssl 链接，并使用刚刚生成的霍夫曼组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">   ssl_prefer_server_ciphers on;</div><div class=\"line\">   ssl_dhparam /etc/ssl/certs/dhparam.pem;</div><div class=\"line\">   ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</div><div class=\"line\">   ssl_session_timeout 1d;</div><div class=\"line\">   ssl_session_cache shared:SSL:50m;</div><div class=\"line\">   ssl_stapling on;</div><div class=\"line\">   ssl_stapling_verify on;</div><div class=\"line\">   add_header Strict-Transport-Security max-age=15768000;</div></pre></td></tr></table></figure>\n<p>最后将 80 端口的请求全部转发到 443 ssl 端口，添加一个新的 server block：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name example.com www.example.com;</div><div class=\"line\">    return 301 https://$host$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>检查 nginx 配置并重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo nginx -t</div><div class=\"line\">sudo nbgix <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<h1 id=\"Renew-证书\"><a href=\"#Renew-证书\" class=\"headerlink\" title=\"Renew 证书\"></a>Renew 证书</h1><p><a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s encrypt</a>的证书有效期为90天，但是推荐每60天更新一次，留出 30 天的缓冲期。运行以下命令更新证书：</p>\n<pre><code>certbot-auto renew\n</code></pre><p>以上任务可以设置为一个 crontab 的定期任务。<code>sudo crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">30 2 * * 1 /usr/local/sbin/certbot-auto renew &gt;&gt; /var/log/le-renew.log</div><div class=\"line\">35 2 * * 1 /etc/init.d/nginx reload</div></pre></td></tr></table></figure>\n<p>每周一的，凌晨2:30，renew。 2:35 重启 nginx server。</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>这样你就配置好了一个使用<a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s encrypt</a>证书的，基于 Nginx 的站点。</p>\n","excerpt":"<p>为了提高网站安全性，最近将 http 的站点转换部署为了 https。 使用了<a href=\"https://letsencrypt.org/\">Let’s encrypt</a> CA认证证书，<a href=\"https://certbot.eff.org/#ubuntutrusty-nginx\">certbot</a>自动部署证书工具。</p>\n<h1 id=\"Requirement\"><a href=\"#Requirement\" class=\"headerlink\" title=\"Requirement\"></a>Requirement</h1><p>Nginx server (编译时需要加 –with-http_ssl_module 模块)。 Ubuntu 14.04 操作系统。</p>\n<h1 id=\"Deploy-HTTPS\"><a href=\"#Deploy-HTTPS\" class=\"headerlink\" title=\"Deploy HTTPS\"></a>Deploy HTTPS</h1><h2 id=\"Install-Certbot\"><a href=\"#Install-Certbot\" class=\"headerlink\" title=\"Install Certbot\"></a>Install Certbot</h2><p>运行以下命令，安装 certbot-auto 脚本</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://dl.eff.org/certbot-auto</div><div class=\"line\">chmod a+x certbot-auto</div></pre></td></tr></table></figure>\n<p>它会自动安装自身需要的依赖，并且自动更新，只需要运行以下</p>\n<pre><code>$ ./certbot-auto\n</code></pre><p>为了确保 certbot 有权限访问并验证目录，需要在 nginx 配置一下目录。(以默认目录为例)</p>\n<pre><code>sudo vim /etc/nginx/sites-available/default\n</code></pre><p>添加一下 block</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">        . . .</div><div class=\"line\"></div><div class=\"line\">        location ~ /.well-known &#123;</div><div class=\"line\">                allow all;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        . . .</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>检查 nginx 配置并重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo nginx -t</div><div class=\"line\">sudo nbgix <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<h2 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h2><p>首先要知道 web 根目录，也就是网站的根目录。我们使用 webroot 插件请求 ssl 认证，-d 参数指出绑定到哪个域名下面。可以指定多个域名，但是要确保最高域名在最前面。</p>\n<pre><code>certbot-auto certonly -a webroot --webroot-path=/usr/share/nginx/html -d example.com -d www.example.com\n</code></pre><blockquote>\n<p>certbot-auto 需要管理员权限，非管理员用户需要加 sudo 运行</p>\n</blockquote>\n<p>如果一切顺利，会有如下输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">Output:</div><div class=\"line\">IMPORTANT NOTES:</div><div class=\"line\"> - If you lose your account credentials, you can recover through</div><div class=\"line\">   e-mails sent to sammy@digitalocean.com</div><div class=\"line\"> - Congratulations! Your certificate and chain have been saved at</div><div class=\"line\">   /etc/letsencrypt/live/example.com/fullchain.pem. Your</div><div class=\"line\">   cert will expire on 2016-03-15. To obtain a new version of the</div><div class=\"line\">   certificate in the future, simply run Let&apos;s Encrypt again.</div><div class=\"line\"> - Your account credentials have been saved in your Let&apos;s Encrypt</div><div class=\"line\">   configuration directory at /etc/letsencrypt. You should make a</div><div class=\"line\">   secure backup of this folder now. This configuration directory will</div><div class=\"line\">   also contain certificates and private keys obtained by Let&apos;s</div><div class=\"line\">   Encrypt so making regular backups of this folder is ideal.</div><div class=\"line\"> - If like Let&apos;s Encrypt, please consider supporting our work by:</div><div class=\"line\"></div><div class=\"line\">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</div><div class=\"line\">   Donating to EFF:                    https://eff.org/donate-le</div></pre></td></tr></table></figure>\n<p>/etc/letsencrypt/live/ 就是保存证书的目录， 2016-03-15 是有效期截止日。</p>\n<h2 id=\"证书文件\"><a href=\"#证书文件\" class=\"headerlink\" title=\"证书文件\"></a>证书文件</h2><p>经过授权之后，你会得到如下文件：</p>\n<ul>\n<li>cert.pem: 你的域名的授权证书</li>\n<li>chain.pem: The Let’s Encrypt 链证书</li>\n<li>fullchain.pem: 结合了 cert.pem 和 chain.pem 的文件</li>\n<li>privkey.pem: 你的私钥文件</li>\n</ul>\n<p>牢记这些文件的位置非常重要，因为你要定期做备份，以防万一。<br><code>/etc/letsencrypt/live/</code> 目录实际上是链接到<code>/etc/letsencrypt/archive</code> 目录上的。而且它会每次都链接到最新的授权文件。<br>可以通过如下命令查看：</p>\n<pre><code>sudo ls -l /etc/letsencrypt/live/your_domain_name\n</code></pre><h2 id=\"生成强霍夫曼组\"><a href=\"#生成强霍夫曼组\" class=\"headerlink\" title=\"生成强霍夫曼组\"></a>生成强霍夫曼组</h2><p>为了进一步加强安全性，我们需要生成一个 2048 位的霍夫曼组</p>\n<pre><code>sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre><p>生成后的文件存储在 /etc/ssl/certs/dhparam.pem</p>\n<h1 id=\"Config-TLS-SSL-On-Nginx-Server\"><a href=\"#Config-TLS-SSL-On-Nginx-Server\" class=\"headerlink\" title=\"Config TLS/SSL On Nginx Server\"></a>Config TLS/SSL On Nginx Server</h1><p>现在你有了一个 ssl 的证书，现在需要将它部署在 Nginx 上。打开 server 配置文件，注释掉，原来的 listen 80, listen servername 等行。</p>\n<p>添加一下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">listen 443 ssl;</div><div class=\"line\"> server_name example.com www.example.com;</div><div class=\"line\"> ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</div><div class=\"line\"> ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</div></pre></td></tr></table></figure>\n<p>仅允许强 ssl 链接，并使用刚刚生成的霍夫曼组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class=\"line\">   ssl_prefer_server_ciphers on;</div><div class=\"line\">   ssl_dhparam /etc/ssl/certs/dhparam.pem;</div><div class=\"line\">   ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</div><div class=\"line\">   ssl_session_timeout 1d;</div><div class=\"line\">   ssl_session_cache shared:SSL:50m;</div><div class=\"line\">   ssl_stapling on;</div><div class=\"line\">   ssl_stapling_verify on;</div><div class=\"line\">   add_header Strict-Transport-Security max-age=15768000;</div></pre></td></tr></table></figure>\n<p>最后将 80 端口的请求全部转发到 443 ssl 端口，添加一个新的 server block：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\">    server_name example.com www.example.com;</div><div class=\"line\">    return 301 https://$host$request_uri;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>检查 nginx 配置并重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo nginx -t</div><div class=\"line\">sudo nbgix <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure>\n<h1 id=\"Renew-证书\"><a href=\"#Renew-证书\" class=\"headerlink\" title=\"Renew 证书\"></a>Renew 证书</h1><p><a href=\"https://letsencrypt.org/\">Let’s encrypt</a>的证书有效期为90天，但是推荐每60天更新一次，留出 30 天的缓冲期。运行以下命令更新证书：</p>\n<pre><code>certbot-auto renew\n</code></pre><p>以上任务可以设置为一个 crontab 的定期任务。<code>sudo crontab -e</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">30 2 * * 1 /usr/local/sbin/certbot-auto renew &gt;&gt; /var/log/le-renew.log</div><div class=\"line\">35 2 * * 1 /etc/init.d/nginx reload</div></pre></td></tr></table></figure>\n<p>每周一的，凌晨2:30，renew。 2:35 重启 nginx server。</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>这样你就配置好了一个使用<a href=\"https://letsencrypt.org/\">Let’s encrypt</a>证书的，基于 Nginx 的站点。</p>"},{"title":"MySqldb 安装","date":"2016-04-13T10:46:13.000Z","_content":"\n\ttar zxvf MySQL-python-1.2.3.tar.gz\n\tcd MySQL-python-1.2.3\n\tpython setup.py install\n\n\n安装python-mysql\n\n\tpip install mysql-python\n\n<!--more-->\n修改某个链接\n{% qnimg mysqldb_install.png %}\n\ncode:\n\n\tls -l /usr/lib/mysql | grep libmysqlclient.so\n\tln /usr/lib/mysql/libmysqlclient.so.16.0.0 /usr/lib/libmysqlclient.so.18\n\n\nDEBUG笔记：\n（终极解决：把/www/wdlinux/mysql/lib中的全部打包到/usr/lib/mysql和/usr/lib64/mysql中，然后重启）\n先看看/usr/lib/mysql/中是否有so.16文件，没有的话从/usr/lib中或/www/wdlinux/mysql/lib中cp过来\n查看so文件的链接信息：\nldconfig -v | grep mysql\n正确时为：\n{% qnimg mysqldb_install2.png %}\n\n \n","source":"_posts/MySqldb-安装.md","raw":"---\ntitle: MySqldb 安装\ndate: 2016-04-13 18:46:13\ntags: \n\t- MySqldb\n\t- 小问题\ncategories: 技术相关\n---\n\n\ttar zxvf MySQL-python-1.2.3.tar.gz\n\tcd MySQL-python-1.2.3\n\tpython setup.py install\n\n\n安装python-mysql\n\n\tpip install mysql-python\n\n<!--more-->\n修改某个链接\n{% qnimg mysqldb_install.png %}\n\ncode:\n\n\tls -l /usr/lib/mysql | grep libmysqlclient.so\n\tln /usr/lib/mysql/libmysqlclient.so.16.0.0 /usr/lib/libmysqlclient.so.18\n\n\nDEBUG笔记：\n（终极解决：把/www/wdlinux/mysql/lib中的全部打包到/usr/lib/mysql和/usr/lib64/mysql中，然后重启）\n先看看/usr/lib/mysql/中是否有so.16文件，没有的话从/usr/lib中或/www/wdlinux/mysql/lib中cp过来\n查看so文件的链接信息：\nldconfig -v | grep mysql\n正确时为：\n{% qnimg mysqldb_install2.png %}\n\n \n","slug":"MySqldb-安装","published":1,"updated":"2016-04-20T09:28:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55t60001k4rne4dcc3qb","content":"<pre><code>tar zxvf MySQL-python-1.2.3.tar.gz\ncd MySQL-python-1.2.3\npython setup.py install\n</code></pre><p>安装python-mysql</p>\n<pre><code>pip install mysql-python\n</code></pre><a id=\"more\"></a>\n<p>修改某个链接<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/mysqldb_install.png\"></p>\n<p>code:</p>\n<pre><code>ls -l /usr/lib/mysql | grep libmysqlclient.so\nln /usr/lib/mysql/libmysqlclient.so.16.0.0 /usr/lib/libmysqlclient.so.18\n</code></pre><p>DEBUG笔记：<br>（终极解决：把/www/wdlinux/mysql/lib中的全部打包到/usr/lib/mysql和/usr/lib64/mysql中，然后重启）<br>先看看/usr/lib/mysql/中是否有so.16文件，没有的话从/usr/lib中或/www/wdlinux/mysql/lib中cp过来<br>查看so文件的链接信息：<br>ldconfig -v | grep mysql<br>正确时为：<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/mysqldb_install2.png\"></p>\n","excerpt":"<pre><code>tar zxvf MySQL-python-1.2.3.tar.gz\ncd MySQL-python-1.2.3\npython setup.py install\n</code></pre><p>安装python-mysql</p>\n<pre><code>pip install mysql-python\n</code></pre>","more":"<p>修改某个链接<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/mysqldb_install.png\"></p>\n<p>code:</p>\n<pre><code>ls -l /usr/lib/mysql | grep libmysqlclient.so\nln /usr/lib/mysql/libmysqlclient.so.16.0.0 /usr/lib/libmysqlclient.so.18\n</code></pre><p>DEBUG笔记：<br>（终极解决：把/www/wdlinux/mysql/lib中的全部打包到/usr/lib/mysql和/usr/lib64/mysql中，然后重启）<br>先看看/usr/lib/mysql/中是否有so.16文件，没有的话从/usr/lib中或/www/wdlinux/mysql/lib中cp过来<br>查看so文件的链接信息：<br>ldconfig -v | grep mysql<br>正确时为：<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/mysqldb_install2.png\"></p>"},{"title":"Hexo + GitHub 搭建博客备忘(Mac)","date":"2016-03-28T14:11:00.000Z","_content":"\n## Hexo 安装\n---------------------------------\nhexo 依赖 [node.js](https://nodejs.org/en/), 首先下载安装node.js。然后运行以下命令：\n\n\tnpm install hexo-cli -g\n\thexo init blog\n\tcd blog\n\tnpm install\n\thexo server\n\n之后就可以在\n[http://localhost:4000/](http://localhost:4000/)查看效果了。\n\n<!-- more -->\nHexo 的实用[插件](https://hexo.io/plugins/)\n\n\tnpm install hexo-generator-index --save\n    npm install hexo-generator-archive --save\n    npm install hexo-generator-category --save\n    npm install hexo-generator-tag --save\n    npm install hexo-server --save\n    npm install hexo-deployer-git --save\n    npm install hexo-deployer-heroku --save\n    npm install hexo-deployer-rsync --save\n    npm install hexo-deployer-openshift --save\n    npm install hexo-renderer-marked@0.2 --save\n    npm install hexo-renderer-stylus@0.2 --save\n    npm install hexo-generator-feed@1 --save\n    npm install hexo-generator-sitemap@1 --save\n    npm install --save hexo-admin\n    \n其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在[这里](https://github.com/jaredly/hexo-admin)\n\n## GitHub 账号申请和新建项目\n----------------------------------\n* 登录到你的[GitHub](http://github.com/)账号\n* 选择新建醒目，项目名称需要设置为`your_username.github.io`\n* 首次创建需要10分钟左右的审核时间，之后就可以访问了`http://your_username.github.io` (现在访问可能会导致404，因为项目还是空的)\n\n## 部署到线上\n----------------------------------\n修改 hexo 项目根目录下的站点配置文件`_config.yml`，如果安装了`hexo-deployer-git`插件，这里之接修改如下配置：\n\n\tdeploy:\n    \ttype: git\n        repo: your-repository.git\n        branch: master\n\nHexo 生成命令：\n\t\n    hexo generate\n\n用于将目前项目生成静态文件\n\nHexo 部署命令\n\t\n    hexo deploy\n\n这条命令会根据你在`_config.yml`里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。\n\n这两条命令可以简写为: `hexo g -b` 或者 `hexo b -g` 效果相同。\n\n## Hexo主题\n----------------------------------\n+ Hexo Themes - http://hexo.io/themes/\n+ Jacman - http://wsgzao.github.io/post/hexo-jacman/\n+ iissnan - http://notes.iissnan.com\n\n## Markdown 教程及编写工具\n----------------------------------\n+ Markdown语法 - [http://wowubuntu.com/markdown/]( https://www.zybuluo.com/mdeditor)\n+ 在线工具 - [https://www.zybuluo.com/mdeditor]( https://www.zybuluo.com/mdeditor)\n","source":"_posts/Hexo-GitHub-搭建博客备忘.md","raw":"---\ntitle: Hexo + GitHub 搭建博客备忘(Mac)\ntags:\n  - github\n  - Hexo\ncategories: \n  - 技术相关\ndate: 2016-03-28 22:11:00\n---\n\n## Hexo 安装\n---------------------------------\nhexo 依赖 [node.js](https://nodejs.org/en/), 首先下载安装node.js。然后运行以下命令：\n\n\tnpm install hexo-cli -g\n\thexo init blog\n\tcd blog\n\tnpm install\n\thexo server\n\n之后就可以在\n[http://localhost:4000/](http://localhost:4000/)查看效果了。\n\n<!-- more -->\nHexo 的实用[插件](https://hexo.io/plugins/)\n\n\tnpm install hexo-generator-index --save\n    npm install hexo-generator-archive --save\n    npm install hexo-generator-category --save\n    npm install hexo-generator-tag --save\n    npm install hexo-server --save\n    npm install hexo-deployer-git --save\n    npm install hexo-deployer-heroku --save\n    npm install hexo-deployer-rsync --save\n    npm install hexo-deployer-openshift --save\n    npm install hexo-renderer-marked@0.2 --save\n    npm install hexo-renderer-stylus@0.2 --save\n    npm install hexo-generator-feed@1 --save\n    npm install hexo-generator-sitemap@1 --save\n    npm install --save hexo-admin\n    \n其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在[这里](https://github.com/jaredly/hexo-admin)\n\n## GitHub 账号申请和新建项目\n----------------------------------\n* 登录到你的[GitHub](http://github.com/)账号\n* 选择新建醒目，项目名称需要设置为`your_username.github.io`\n* 首次创建需要10分钟左右的审核时间，之后就可以访问了`http://your_username.github.io` (现在访问可能会导致404，因为项目还是空的)\n\n## 部署到线上\n----------------------------------\n修改 hexo 项目根目录下的站点配置文件`_config.yml`，如果安装了`hexo-deployer-git`插件，这里之接修改如下配置：\n\n\tdeploy:\n    \ttype: git\n        repo: your-repository.git\n        branch: master\n\nHexo 生成命令：\n\t\n    hexo generate\n\n用于将目前项目生成静态文件\n\nHexo 部署命令\n\t\n    hexo deploy\n\n这条命令会根据你在`_config.yml`里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。\n\n这两条命令可以简写为: `hexo g -b` 或者 `hexo b -g` 效果相同。\n\n## Hexo主题\n----------------------------------\n+ Hexo Themes - http://hexo.io/themes/\n+ Jacman - http://wsgzao.github.io/post/hexo-jacman/\n+ iissnan - http://notes.iissnan.com\n\n## Markdown 教程及编写工具\n----------------------------------\n+ Markdown语法 - [http://wowubuntu.com/markdown/]( https://www.zybuluo.com/mdeditor)\n+ 在线工具 - [https://www.zybuluo.com/mdeditor]( https://www.zybuluo.com/mdeditor)\n","slug":"Hexo-GitHub-搭建博客备忘","published":1,"updated":"2016-03-31T04:21:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55tc0004k4rnxj8lmulc","content":"<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><hr>\n<p>hexo 依赖 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>, 首先下载安装node.js。然后运行以下命令：</p>\n<pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n</code></pre><p>之后就可以在<br><a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>查看效果了。</p>\n<a id=\"more\"></a>\n<p>Hexo 的实用<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">插件</a></p>\n<pre><code>npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install --save hexo-admin\n</code></pre><p>其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在<a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h2 id=\"GitHub-账号申请和新建项目\"><a href=\"#GitHub-账号申请和新建项目\" class=\"headerlink\" title=\"GitHub 账号申请和新建项目\"></a>GitHub 账号申请和新建项目</h2><hr>\n<ul>\n<li>登录到你的<a href=\"http://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>账号</li>\n<li>选择新建醒目，项目名称需要设置为<code>your_username.github.io</code></li>\n<li>首次创建需要10分钟左右的审核时间，之后就可以访问了<code>http://your_username.github.io</code> (现在访问可能会导致404，因为项目还是空的)</li>\n</ul>\n<h2 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h2><hr>\n<p>修改 hexo 项目根目录下的站点配置文件<code>_config.yml</code>，如果安装了<code>hexo-deployer-git</code>插件，这里之接修改如下配置：</p>\n<pre><code>deploy:\n    type: git\n    repo: your-repository.git\n    branch: master\n</code></pre><p>Hexo 生成命令：</p>\n<pre><code>hexo generate\n</code></pre><p>用于将目前项目生成静态文件</p>\n<p>Hexo 部署命令</p>\n<pre><code>hexo deploy\n</code></pre><p>这条命令会根据你在<code>_config.yml</code>里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。</p>\n<p>这两条命令可以简写为: <code>hexo g -b</code> 或者 <code>hexo b -g</code> 效果相同。</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><hr>\n<ul>\n<li>Hexo Themes - <a href=\"http://hexo.io/themes/\" target=\"_blank\" rel=\"external\">http://hexo.io/themes/</a></li>\n<li>Jacman - <a href=\"http://wsgzao.github.io/post/hexo-jacman/\" target=\"_blank\" rel=\"external\">http://wsgzao.github.io/post/hexo-jacman/</a></li>\n<li>iissnan - <a href=\"http://notes.iissnan.com\" target=\"_blank\" rel=\"external\">http://notes.iissnan.com</a></li>\n</ul>\n<h2 id=\"Markdown-教程及编写工具\"><a href=\"#Markdown-教程及编写工具\" class=\"headerlink\" title=\"Markdown 教程及编写工具\"></a>Markdown 教程及编写工具</h2><hr>\n<ul>\n<li>Markdown语法 - <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown/</a></li>\n<li>在线工具 - <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">https://www.zybuluo.com/mdeditor</a></li>\n</ul>\n","excerpt":"<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><hr>\n<p>hexo 依赖 <a href=\"https://nodejs.org/en/\">node.js</a>, 首先下载安装node.js。然后运行以下命令：</p>\n<pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n</code></pre><p>之后就可以在<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a>查看效果了。</p>","more":"<p>Hexo 的实用<a href=\"https://hexo.io/plugins/\">插件</a></p>\n<pre><code>npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install --save hexo-admin\n</code></pre><p>其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在<a href=\"https://github.com/jaredly/hexo-admin\">这里</a></p>\n<h2 id=\"GitHub-账号申请和新建项目\"><a href=\"#GitHub-账号申请和新建项目\" class=\"headerlink\" title=\"GitHub 账号申请和新建项目\"></a>GitHub 账号申请和新建项目</h2><hr>\n<ul>\n<li>登录到你的<a href=\"http://github.com/\">GitHub</a>账号</li>\n<li>选择新建醒目，项目名称需要设置为<code>your_username.github.io</code></li>\n<li>首次创建需要10分钟左右的审核时间，之后就可以访问了<code>http://your_username.github.io</code> (现在访问可能会导致404，因为项目还是空的)</li>\n</ul>\n<h2 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h2><hr>\n<p>修改 hexo 项目根目录下的站点配置文件<code>_config.yml</code>，如果安装了<code>hexo-deployer-git</code>插件，这里之接修改如下配置：</p>\n<pre><code>deploy:\n    type: git\n    repo: your-repository.git\n    branch: master\n</code></pre><p>Hexo 生成命令：</p>\n<pre><code>hexo generate\n</code></pre><p>用于将目前项目生成静态文件</p>\n<p>Hexo 部署命令</p>\n<pre><code>hexo deploy\n</code></pre><p>这条命令会根据你在<code>_config.yml</code>里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。</p>\n<p>这两条命令可以简写为: <code>hexo g -b</code> 或者 <code>hexo b -g</code> 效果相同。</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><hr>\n<ul>\n<li>Hexo Themes - <a href=\"http://hexo.io/themes/\">http://hexo.io/themes/</a></li>\n<li>Jacman - <a href=\"http://wsgzao.github.io/post/hexo-jacman/\">http://wsgzao.github.io/post/hexo-jacman/</a></li>\n<li>iissnan - <a href=\"http://notes.iissnan.com\">http://notes.iissnan.com</a></li>\n</ul>\n<h2 id=\"Markdown-教程及编写工具\"><a href=\"#Markdown-教程及编写工具\" class=\"headerlink\" title=\"Markdown 教程及编写工具\"></a>Markdown 教程及编写工具</h2><hr>\n<ul>\n<li>Markdown语法 - <a href=\"https://www.zybuluo.com/mdeditor\">http://wowubuntu.com/markdown/</a></li>\n<li>在线工具 - <a href=\"https://www.zybuluo.com/mdeditor\">https://www.zybuluo.com/mdeditor</a></li>\n</ul>"},{"title":"Install Nginx uwsgi on CentOS7","date":"2016-05-06T04:04:07.000Z","_content":"\n# Introduction\n\n前些日子买了个 VPS，折腾着安装了 Nginx & uWSGI server, 写个备忘吧\n\n# 安装组件\n\n首先需要在 CentOS7 上安装必要的组件来运行程序，这里主要使用 yum 和 pip。\n\n首先安装 EPEL\n\n\tsudo yum install epel-release\n\n接下来是 Nginx web server 和 python 相关的库\n\n\tsudo yum install python-pip python-devel nginx gcc\n\n安装 uWSGI server\n\n\tpip install uwsgi\n\n<!--more-->\n\n# 编写一个简单的 python app\n\n这里我使用了 flask framework, pip 安装。\n\n\tpip install flask\n\n简单的 demo 程序\n\n```py\n\nfrom flask import Flask\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\n\nclass HelloWorld(Resource):\n    def get(self):\n        return {'content': 'content change test'}\n\n\napi.add_resource(HelloWorld, '/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n编写一个 wsgi.py 组件来引入刚才我们编写的 app。\n\n```py\n\nfrom api import app\n\nif __name__ == \"__main__\":\n    app.run()\n\n```\n\n这样运行如下用命令，就可以在本地运行了：\n\n\tuwsgi --socket 0.0.0.0:8080 --protocol=http -w wsgi\n\n使用 8080 端口， http 协议\n\n# 配置 Nginx 和 uWSGI server\n\n刚才运行的程序只是在本地，我们希望它可以服务外网，这就需要 Nginx 和 uWSGI 配合来做。下面是一些配置步骤。\n\n## uWSGI config file\n\nuWSGI server 可以通过配置文件启动，如果配置的项较长，显然通过文件启动会比较方便。\n在项目根目录新建 myapp.ini 配置文件\n\n\t[uwsgi]\n\tmodule = wsgi:app\n\n\tmaster = true\n\tprocesses = 5\n\tuid = user\n\n\tsocket = /run/uwsgi/myapp.sock\n\tchown-socket = user:nginx\n\tchmod-socket = 660\n\tvacuum = true\n\n\tdie-on-term = true\n\n配置文件指明了需要运行的 app, 使用 master mode 启动，使用5个 worker processes 来处理请求，使用 socket 来进行请求转发，效率更高更加安全。\nvacuum 表明当 process 结束运行是自动删除 socket。\n\n由于 uWSGI 和 systemd 对于 SIGTERM signal 的不同处理方式，我们需要最后一个 option 来让程序按照 systemd 期望的方式运行，uWSGI 会杀掉进程而不是 reload 它。\n\n## systemd 配置\n\n当系统重启时我们希望自动启动 uWSGI server, 这时候就需要用到 systemd，编写一个 systemd 配置文件。\n\n\tsudo nano /etc/systemd/system/uwsgi.service\n\n文件内容：\n\n\t[Unit]\n\tDescription=uWSGI instance to serve myapp\n\t[Service]\n\tExecStartPre=-/usr/bin/bash -c 'mkdir -p /run/uwsgi; chown root:nginx /run/uwsgi'\n\tExecStart=/usr/bin/bash -c 'cd /root/flasktest; uwsgi --ini flasktest.ini'\n\n\t[Install]\n\tWantedBy=multi-user.target\n\nExecStartPre 部分确保要有存放 socket 的目录，ExecStart 部分，首先切换到项目根目录，然后通过配置文件启动 uWSGI server。\n\n[Install] section 指定了 enable 命令执行时需要的操作，基本上是指定哪些状态自动启动，我们这里指定当 multi-user mode 是启动。\n\n保存配置文件后，接下来就可以通过 systemd 启动 uWSGI server 了。\n\n\tsudo systemctl start uwsgi\n\n启动之后， 查看状态\n\n\tsudo systemctl status uwsgi\n\n指定开机启动服务：\n\n\tsudo systemctl enable uwsgi\n\n停止服务\n\n\tsudo systemctl stop uwsgi\n\n\n## 配置 Nginx proxy server\n\n在 /etc/nginx/conf.d/ 目录下新建 .conf 配置文件\n\n\tvim /etc/nginx/conf.d/flasktest.conf\n\n内容如下\n\n\tserver {\n\t    listen 8080;\n\t    server_name 104.224.160.89;\n\n\t    location / {\n\t        include uwsgi_params;\n\t        uwsgi_pass unix:/run/uwsgi/flasktest.sock;\n\t    }\n\t}\n\n监听 8080 端口，IP地址作为 server name, 将 request pass 到我们指定的 socket 中。\n\n测试 nginx 配置文件是否有问题\n\n\tsudo nginx -t\n\n使用 systemd 开启 nginx 服务\n\n\tsudo systemctl start nginx\n\n开机自启动\n\n\tsudo systemctl enable nginx\n\n# 总结\n\nNginx 作为静态服务器效率极高，近年来被广泛推广。配合 uWSGI 使用 systemd 或者 supervisor 作为运维工具，维护 Nginx 和 uWSGI 进程，记录 log, 监控服务等等，由于 uWSGI 支持大部分上层框架，web framework 可以方便的根据自己的业务逻辑进行选择。\n\n","source":"_posts/Install-Nginx-uwsgi-on-CentOS7.md","raw":"---\ntitle: Install Nginx uwsgi on CentOS7\ndate: 2016-05-06 12:04:07\ntags:\n\t- Nginx\n\t- uwsgi\n\t- python\ncategories: 技术相关\n---\n\n# Introduction\n\n前些日子买了个 VPS，折腾着安装了 Nginx & uWSGI server, 写个备忘吧\n\n# 安装组件\n\n首先需要在 CentOS7 上安装必要的组件来运行程序，这里主要使用 yum 和 pip。\n\n首先安装 EPEL\n\n\tsudo yum install epel-release\n\n接下来是 Nginx web server 和 python 相关的库\n\n\tsudo yum install python-pip python-devel nginx gcc\n\n安装 uWSGI server\n\n\tpip install uwsgi\n\n<!--more-->\n\n# 编写一个简单的 python app\n\n这里我使用了 flask framework, pip 安装。\n\n\tpip install flask\n\n简单的 demo 程序\n\n```py\n\nfrom flask import Flask\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\n\nclass HelloWorld(Resource):\n    def get(self):\n        return {'content': 'content change test'}\n\n\napi.add_resource(HelloWorld, '/')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n\n```\n编写一个 wsgi.py 组件来引入刚才我们编写的 app。\n\n```py\n\nfrom api import app\n\nif __name__ == \"__main__\":\n    app.run()\n\n```\n\n这样运行如下用命令，就可以在本地运行了：\n\n\tuwsgi --socket 0.0.0.0:8080 --protocol=http -w wsgi\n\n使用 8080 端口， http 协议\n\n# 配置 Nginx 和 uWSGI server\n\n刚才运行的程序只是在本地，我们希望它可以服务外网，这就需要 Nginx 和 uWSGI 配合来做。下面是一些配置步骤。\n\n## uWSGI config file\n\nuWSGI server 可以通过配置文件启动，如果配置的项较长，显然通过文件启动会比较方便。\n在项目根目录新建 myapp.ini 配置文件\n\n\t[uwsgi]\n\tmodule = wsgi:app\n\n\tmaster = true\n\tprocesses = 5\n\tuid = user\n\n\tsocket = /run/uwsgi/myapp.sock\n\tchown-socket = user:nginx\n\tchmod-socket = 660\n\tvacuum = true\n\n\tdie-on-term = true\n\n配置文件指明了需要运行的 app, 使用 master mode 启动，使用5个 worker processes 来处理请求，使用 socket 来进行请求转发，效率更高更加安全。\nvacuum 表明当 process 结束运行是自动删除 socket。\n\n由于 uWSGI 和 systemd 对于 SIGTERM signal 的不同处理方式，我们需要最后一个 option 来让程序按照 systemd 期望的方式运行，uWSGI 会杀掉进程而不是 reload 它。\n\n## systemd 配置\n\n当系统重启时我们希望自动启动 uWSGI server, 这时候就需要用到 systemd，编写一个 systemd 配置文件。\n\n\tsudo nano /etc/systemd/system/uwsgi.service\n\n文件内容：\n\n\t[Unit]\n\tDescription=uWSGI instance to serve myapp\n\t[Service]\n\tExecStartPre=-/usr/bin/bash -c 'mkdir -p /run/uwsgi; chown root:nginx /run/uwsgi'\n\tExecStart=/usr/bin/bash -c 'cd /root/flasktest; uwsgi --ini flasktest.ini'\n\n\t[Install]\n\tWantedBy=multi-user.target\n\nExecStartPre 部分确保要有存放 socket 的目录，ExecStart 部分，首先切换到项目根目录，然后通过配置文件启动 uWSGI server。\n\n[Install] section 指定了 enable 命令执行时需要的操作，基本上是指定哪些状态自动启动，我们这里指定当 multi-user mode 是启动。\n\n保存配置文件后，接下来就可以通过 systemd 启动 uWSGI server 了。\n\n\tsudo systemctl start uwsgi\n\n启动之后， 查看状态\n\n\tsudo systemctl status uwsgi\n\n指定开机启动服务：\n\n\tsudo systemctl enable uwsgi\n\n停止服务\n\n\tsudo systemctl stop uwsgi\n\n\n## 配置 Nginx proxy server\n\n在 /etc/nginx/conf.d/ 目录下新建 .conf 配置文件\n\n\tvim /etc/nginx/conf.d/flasktest.conf\n\n内容如下\n\n\tserver {\n\t    listen 8080;\n\t    server_name 104.224.160.89;\n\n\t    location / {\n\t        include uwsgi_params;\n\t        uwsgi_pass unix:/run/uwsgi/flasktest.sock;\n\t    }\n\t}\n\n监听 8080 端口，IP地址作为 server name, 将 request pass 到我们指定的 socket 中。\n\n测试 nginx 配置文件是否有问题\n\n\tsudo nginx -t\n\n使用 systemd 开启 nginx 服务\n\n\tsudo systemctl start nginx\n\n开机自启动\n\n\tsudo systemctl enable nginx\n\n# 总结\n\nNginx 作为静态服务器效率极高，近年来被广泛推广。配合 uWSGI 使用 systemd 或者 supervisor 作为运维工具，维护 Nginx 和 uWSGI 进程，记录 log, 监控服务等等，由于 uWSGI 支持大部分上层框架，web framework 可以方便的根据自己的业务逻辑进行选择。\n\n","slug":"Install-Nginx-uwsgi-on-CentOS7","published":1,"updated":"2016-05-06T08:11:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55td0005k4rnq0r717c8","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>前些日子买了个 VPS，折腾着安装了 Nginx &amp; uWSGI server, 写个备忘吧</p>\n<h1 id=\"安装组件\"><a href=\"#安装组件\" class=\"headerlink\" title=\"安装组件\"></a>安装组件</h1><p>首先需要在 CentOS7 上安装必要的组件来运行程序，这里主要使用 yum 和 pip。</p>\n<p>首先安装 EPEL</p>\n<pre><code>sudo yum install epel-release\n</code></pre><p>接下来是 Nginx web server 和 python 相关的库</p>\n<pre><code>sudo yum install python-pip python-devel nginx gcc\n</code></pre><p>安装 uWSGI server</p>\n<pre><code>pip install uwsgi\n</code></pre><a id=\"more\"></a>\n<h1 id=\"编写一个简单的-python-app\"><a href=\"#编写一个简单的-python-app\" class=\"headerlink\" title=\"编写一个简单的 python app\"></a>编写一个简单的 python app</h1><p>这里我使用了 flask framework, pip 安装。</p>\n<pre><code>pip install flask\n</code></pre><p>简单的 demo 程序</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> Resource, Api</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">api = Api(app)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span><span class=\"params\">(Resource)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'content'</span>: <span class=\"string\">'content change test'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">api.add_resource(HelloWorld, <span class=\"string\">'/'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</div></pre></td></tr></table></figure>\n<p>编写一个 wsgi.py 组件来引入刚才我们编写的 app。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> api <span class=\"keyword\">import</span> app</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>这样运行如下用命令，就可以在本地运行了：</p>\n<pre><code>uwsgi --socket 0.0.0.0:8080 --protocol=http -w wsgi\n</code></pre><p>使用 8080 端口， http 协议</p>\n<h1 id=\"配置-Nginx-和-uWSGI-server\"><a href=\"#配置-Nginx-和-uWSGI-server\" class=\"headerlink\" title=\"配置 Nginx 和 uWSGI server\"></a>配置 Nginx 和 uWSGI server</h1><p>刚才运行的程序只是在本地，我们希望它可以服务外网，这就需要 Nginx 和 uWSGI 配合来做。下面是一些配置步骤。</p>\n<h2 id=\"uWSGI-config-file\"><a href=\"#uWSGI-config-file\" class=\"headerlink\" title=\"uWSGI config file\"></a>uWSGI config file</h2><p>uWSGI server 可以通过配置文件启动，如果配置的项较长，显然通过文件启动会比较方便。<br>在项目根目录新建 myapp.ini 配置文件</p>\n<pre><code>[uwsgi]\nmodule = wsgi:app\n\nmaster = true\nprocesses = 5\nuid = user\n\nsocket = /run/uwsgi/myapp.sock\nchown-socket = user:nginx\nchmod-socket = 660\nvacuum = true\n\ndie-on-term = true\n</code></pre><p>配置文件指明了需要运行的 app, 使用 master mode 启动，使用5个 worker processes 来处理请求，使用 socket 来进行请求转发，效率更高更加安全。<br>vacuum 表明当 process 结束运行是自动删除 socket。</p>\n<p>由于 uWSGI 和 systemd 对于 SIGTERM signal 的不同处理方式，我们需要最后一个 option 来让程序按照 systemd 期望的方式运行，uWSGI 会杀掉进程而不是 reload 它。</p>\n<h2 id=\"systemd-配置\"><a href=\"#systemd-配置\" class=\"headerlink\" title=\"systemd 配置\"></a>systemd 配置</h2><p>当系统重启时我们希望自动启动 uWSGI server, 这时候就需要用到 systemd，编写一个 systemd 配置文件。</p>\n<pre><code>sudo nano /etc/systemd/system/uwsgi.service\n</code></pre><p>文件内容：</p>\n<pre><code>[Unit]\nDescription=uWSGI instance to serve myapp\n[Service]\nExecStartPre=-/usr/bin/bash -c &apos;mkdir -p /run/uwsgi; chown root:nginx /run/uwsgi&apos;\nExecStart=/usr/bin/bash -c &apos;cd /root/flasktest; uwsgi --ini flasktest.ini&apos;\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><p>ExecStartPre 部分确保要有存放 socket 的目录，ExecStart 部分，首先切换到项目根目录，然后通过配置文件启动 uWSGI server。</p>\n<p>[Install] section 指定了 enable 命令执行时需要的操作，基本上是指定哪些状态自动启动，我们这里指定当 multi-user mode 是启动。</p>\n<p>保存配置文件后，接下来就可以通过 systemd 启动 uWSGI server 了。</p>\n<pre><code>sudo systemctl start uwsgi\n</code></pre><p>启动之后， 查看状态</p>\n<pre><code>sudo systemctl status uwsgi\n</code></pre><p>指定开机启动服务：</p>\n<pre><code>sudo systemctl enable uwsgi\n</code></pre><p>停止服务</p>\n<pre><code>sudo systemctl stop uwsgi\n</code></pre><h2 id=\"配置-Nginx-proxy-server\"><a href=\"#配置-Nginx-proxy-server\" class=\"headerlink\" title=\"配置 Nginx proxy server\"></a>配置 Nginx proxy server</h2><p>在 /etc/nginx/conf.d/ 目录下新建 .conf 配置文件</p>\n<pre><code>vim /etc/nginx/conf.d/flasktest.conf\n</code></pre><p>内容如下</p>\n<pre><code>server {\n    listen 8080;\n    server_name 104.224.160.89;\n\n    location / {\n        include uwsgi_params;\n        uwsgi_pass unix:/run/uwsgi/flasktest.sock;\n    }\n}\n</code></pre><p>监听 8080 端口，IP地址作为 server name, 将 request pass 到我们指定的 socket 中。</p>\n<p>测试 nginx 配置文件是否有问题</p>\n<pre><code>sudo nginx -t\n</code></pre><p>使用 systemd 开启 nginx 服务</p>\n<pre><code>sudo systemctl start nginx\n</code></pre><p>开机自启动</p>\n<pre><code>sudo systemctl enable nginx\n</code></pre><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Nginx 作为静态服务器效率极高，近年来被广泛推广。配合 uWSGI 使用 systemd 或者 supervisor 作为运维工具，维护 Nginx 和 uWSGI 进程，记录 log, 监控服务等等，由于 uWSGI 支持大部分上层框架，web framework 可以方便的根据自己的业务逻辑进行选择。</p>\n","excerpt":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>前些日子买了个 VPS，折腾着安装了 Nginx &amp; uWSGI server, 写个备忘吧</p>\n<h1 id=\"安装组件\"><a href=\"#安装组件\" class=\"headerlink\" title=\"安装组件\"></a>安装组件</h1><p>首先需要在 CentOS7 上安装必要的组件来运行程序，这里主要使用 yum 和 pip。</p>\n<p>首先安装 EPEL</p>\n<pre><code>sudo yum install epel-release\n</code></pre><p>接下来是 Nginx web server 和 python 相关的库</p>\n<pre><code>sudo yum install python-pip python-devel nginx gcc\n</code></pre><p>安装 uWSGI server</p>\n<pre><code>pip install uwsgi\n</code></pre>","more":"<h1 id=\"编写一个简单的-python-app\"><a href=\"#编写一个简单的-python-app\" class=\"headerlink\" title=\"编写一个简单的 python app\"></a>编写一个简单的 python app</h1><p>这里我使用了 flask framework, pip 安装。</p>\n<pre><code>pip install flask\n</code></pre><p>简单的 demo 程序</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> Resource, Api</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">api = Api(app)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span><span class=\"params\">(Resource)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"string\">'content'</span>: <span class=\"string\">'content change test'</span>&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">api.add_resource(HelloWorld, <span class=\"string\">'/'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    app.run(debug=<span class=\"keyword\">True</span>)</div></pre></td></tr></table></figure>\n<p>编写一个 wsgi.py 组件来引入刚才我们编写的 app。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> api <span class=\"keyword\">import</span> app</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\">    app.run()</div></pre></td></tr></table></figure>\n<p>这样运行如下用命令，就可以在本地运行了：</p>\n<pre><code>uwsgi --socket 0.0.0.0:8080 --protocol=http -w wsgi\n</code></pre><p>使用 8080 端口， http 协议</p>\n<h1 id=\"配置-Nginx-和-uWSGI-server\"><a href=\"#配置-Nginx-和-uWSGI-server\" class=\"headerlink\" title=\"配置 Nginx 和 uWSGI server\"></a>配置 Nginx 和 uWSGI server</h1><p>刚才运行的程序只是在本地，我们希望它可以服务外网，这就需要 Nginx 和 uWSGI 配合来做。下面是一些配置步骤。</p>\n<h2 id=\"uWSGI-config-file\"><a href=\"#uWSGI-config-file\" class=\"headerlink\" title=\"uWSGI config file\"></a>uWSGI config file</h2><p>uWSGI server 可以通过配置文件启动，如果配置的项较长，显然通过文件启动会比较方便。<br>在项目根目录新建 myapp.ini 配置文件</p>\n<pre><code>[uwsgi]\nmodule = wsgi:app\n\nmaster = true\nprocesses = 5\nuid = user\n\nsocket = /run/uwsgi/myapp.sock\nchown-socket = user:nginx\nchmod-socket = 660\nvacuum = true\n\ndie-on-term = true\n</code></pre><p>配置文件指明了需要运行的 app, 使用 master mode 启动，使用5个 worker processes 来处理请求，使用 socket 来进行请求转发，效率更高更加安全。<br>vacuum 表明当 process 结束运行是自动删除 socket。</p>\n<p>由于 uWSGI 和 systemd 对于 SIGTERM signal 的不同处理方式，我们需要最后一个 option 来让程序按照 systemd 期望的方式运行，uWSGI 会杀掉进程而不是 reload 它。</p>\n<h2 id=\"systemd-配置\"><a href=\"#systemd-配置\" class=\"headerlink\" title=\"systemd 配置\"></a>systemd 配置</h2><p>当系统重启时我们希望自动启动 uWSGI server, 这时候就需要用到 systemd，编写一个 systemd 配置文件。</p>\n<pre><code>sudo nano /etc/systemd/system/uwsgi.service\n</code></pre><p>文件内容：</p>\n<pre><code>[Unit]\nDescription=uWSGI instance to serve myapp\n[Service]\nExecStartPre=-/usr/bin/bash -c &apos;mkdir -p /run/uwsgi; chown root:nginx /run/uwsgi&apos;\nExecStart=/usr/bin/bash -c &apos;cd /root/flasktest; uwsgi --ini flasktest.ini&apos;\n\n[Install]\nWantedBy=multi-user.target\n</code></pre><p>ExecStartPre 部分确保要有存放 socket 的目录，ExecStart 部分，首先切换到项目根目录，然后通过配置文件启动 uWSGI server。</p>\n<p>[Install] section 指定了 enable 命令执行时需要的操作，基本上是指定哪些状态自动启动，我们这里指定当 multi-user mode 是启动。</p>\n<p>保存配置文件后，接下来就可以通过 systemd 启动 uWSGI server 了。</p>\n<pre><code>sudo systemctl start uwsgi\n</code></pre><p>启动之后， 查看状态</p>\n<pre><code>sudo systemctl status uwsgi\n</code></pre><p>指定开机启动服务：</p>\n<pre><code>sudo systemctl enable uwsgi\n</code></pre><p>停止服务</p>\n<pre><code>sudo systemctl stop uwsgi\n</code></pre><h2 id=\"配置-Nginx-proxy-server\"><a href=\"#配置-Nginx-proxy-server\" class=\"headerlink\" title=\"配置 Nginx proxy server\"></a>配置 Nginx proxy server</h2><p>在 /etc/nginx/conf.d/ 目录下新建 .conf 配置文件</p>\n<pre><code>vim /etc/nginx/conf.d/flasktest.conf\n</code></pre><p>内容如下</p>\n<pre><code>server {\n    listen 8080;\n    server_name 104.224.160.89;\n\n    location / {\n        include uwsgi_params;\n        uwsgi_pass unix:/run/uwsgi/flasktest.sock;\n    }\n}\n</code></pre><p>监听 8080 端口，IP地址作为 server name, 将 request pass 到我们指定的 socket 中。</p>\n<p>测试 nginx 配置文件是否有问题</p>\n<pre><code>sudo nginx -t\n</code></pre><p>使用 systemd 开启 nginx 服务</p>\n<pre><code>sudo systemctl start nginx\n</code></pre><p>开机自启动</p>\n<pre><code>sudo systemctl enable nginx\n</code></pre><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Nginx 作为静态服务器效率极高，近年来被广泛推广。配合 uWSGI 使用 systemd 或者 supervisor 作为运维工具，维护 Nginx 和 uWSGI 进程，记录 log, 监控服务等等，由于 uWSGI 支持大部分上层框架，web framework 可以方便的根据自己的业务逻辑进行选择。</p>"},{"title":"Python property decorator","date":"2016-04-12T06:12:23.000Z","_content":"\n# property() 方法\n\nproperty() 方法返回了一个特殊的 [descriptor object](https://docs.python.org/2/howto/descriptor.html)， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。\n\n操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。\n\n创建一个新式类 C，以及一个 p 属性：\n\n```py\nclass C(...):\n    def R(self):\n        ...read method...\n    def W(self, value):\n        ...write method...\n    def D(self):\n        ...delete method...\n    p = property(R, W, D, doc)\n    ...\n```\n\n<!--more-->\n* R 是一个不带参数的 `getter` 方法，返回属性的值，如果不提供此方法，任何读操作都会引起`AttributeError`\n* W 是一个接受一个参数的 `setter` 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起`AttributeError`\n* D 是一个 `deleter` 方法，会删除这个属性，如果不提供此方法，删除操作会引起`AttributeError`\n* doc 是一个文档字符串用来描述这个属性，调用方法\n\t\n\t\tC.p.__doc__\n\n以下是一个小的类带有属性 x:\n\n```py\nclass C(object):\n    def __init__(self):\n        self.__x=None\n    def getx(self):\n        print \"+++ getx()\"\n        return self.__x\n    def setx(self, v):\n        print \"+++ setx({0})\".format(v)\n        self.__x  =  v\n    def delx(self):\n        print \"+++ delx()\"\n        del self.__x\n    x=property(getx, setx, delx, \"Me property 'x'.\")\n```\n\n在 python 解释器中执行：\n\n\t>>> c=C()\n\t>>> print c.x\n\t+++ getx()\n\tNone\n\t>>> print C.x.__doc__\n\tMe property 'x'.\n\t>>> c.x=15\n\t+++ setx(15)\n\t>>> c.x\n\t+++ getx()\n\t15\n\t>>> del c.x\n\t+++ delx()\n\t>>> c.x\n\t+++ getx()\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<stdin>\", line 6, in getx\n\tAttributeError: 'C' object has no attribute '_C__x'\n\n# property decorator\n从 Python 2.6 开始这个方法支持装饰器用法 `@property` ，使用这个装饰器装饰一个函数，和用 `getter` 装饰它效果是一样的。另外这个装饰器本身又带有 `deleter` 和 `setter` 两个装饰器。可以使用被 `@property` 装饰过的函数去定义自己的 `setter` 和 `deleter` 方法。\n\n比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：\n\n```py\n@property\ndef state(self):\n    '''The internal state property.'''\n    return self._state\n```\n\n这样 .state 将会是这个属性的 getter 方法，而且 文档字符串'''The internal state property.''' 也会被存储在属性中。\n\n如果你需要 setter 和 deleter 方法：\n\n```py\n@state.setter\ndef state(self, k):\n    if not (0 <= k <= 2):\n        raise ValueError(\"Must be 0 through 2 inclusive!\")\n    else:\n        self._state = k\n        \n@state.deleter\ndef state(self):\n    del self._state\n```\n\n    ","source":"_posts/Python-property-decorator.md","raw":"---\ntitle: Python property decorator\ndate: 2016-04-12 14:12:23\ntags: python\ncategories: 技术相关\n---\n\n# property() 方法\n\nproperty() 方法返回了一个特殊的 [descriptor object](https://docs.python.org/2/howto/descriptor.html)， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。\n\n操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。\n\n创建一个新式类 C，以及一个 p 属性：\n\n```py\nclass C(...):\n    def R(self):\n        ...read method...\n    def W(self, value):\n        ...write method...\n    def D(self):\n        ...delete method...\n    p = property(R, W, D, doc)\n    ...\n```\n\n<!--more-->\n* R 是一个不带参数的 `getter` 方法，返回属性的值，如果不提供此方法，任何读操作都会引起`AttributeError`\n* W 是一个接受一个参数的 `setter` 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起`AttributeError`\n* D 是一个 `deleter` 方法，会删除这个属性，如果不提供此方法，删除操作会引起`AttributeError`\n* doc 是一个文档字符串用来描述这个属性，调用方法\n\t\n\t\tC.p.__doc__\n\n以下是一个小的类带有属性 x:\n\n```py\nclass C(object):\n    def __init__(self):\n        self.__x=None\n    def getx(self):\n        print \"+++ getx()\"\n        return self.__x\n    def setx(self, v):\n        print \"+++ setx({0})\".format(v)\n        self.__x  =  v\n    def delx(self):\n        print \"+++ delx()\"\n        del self.__x\n    x=property(getx, setx, delx, \"Me property 'x'.\")\n```\n\n在 python 解释器中执行：\n\n\t>>> c=C()\n\t>>> print c.x\n\t+++ getx()\n\tNone\n\t>>> print C.x.__doc__\n\tMe property 'x'.\n\t>>> c.x=15\n\t+++ setx(15)\n\t>>> c.x\n\t+++ getx()\n\t15\n\t>>> del c.x\n\t+++ delx()\n\t>>> c.x\n\t+++ getx()\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<stdin>\", line 6, in getx\n\tAttributeError: 'C' object has no attribute '_C__x'\n\n# property decorator\n从 Python 2.6 开始这个方法支持装饰器用法 `@property` ，使用这个装饰器装饰一个函数，和用 `getter` 装饰它效果是一样的。另外这个装饰器本身又带有 `deleter` 和 `setter` 两个装饰器。可以使用被 `@property` 装饰过的函数去定义自己的 `setter` 和 `deleter` 方法。\n\n比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：\n\n```py\n@property\ndef state(self):\n    '''The internal state property.'''\n    return self._state\n```\n\n这样 .state 将会是这个属性的 getter 方法，而且 文档字符串'''The internal state property.''' 也会被存储在属性中。\n\n如果你需要 setter 和 deleter 方法：\n\n```py\n@state.setter\ndef state(self, k):\n    if not (0 <= k <= 2):\n        raise ValueError(\"Must be 0 through 2 inclusive!\")\n    else:\n        self._state = k\n        \n@state.deleter\ndef state(self):\n    del self._state\n```\n\n    ","slug":"Python-property-decorator","published":1,"updated":"2016-04-17T09:46:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55ti0006k4rnb6591gy2","content":"<h1 id=\"property-方法\"><a href=\"#property-方法\" class=\"headerlink\" title=\"property() 方法\"></a>property() 方法</h1><p>property() 方法返回了一个特殊的 <a href=\"https://docs.python.org/2/howto/descriptor.html\" target=\"_blank\" rel=\"external\">descriptor object</a>， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。</p>\n<p>操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。</p>\n<p>创建一个新式类 C，以及一个 p 属性：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(...)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">R</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        ...read method...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">W</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        ...write method...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">D</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        ...delete method...</div><div class=\"line\">    p = property(R, W, D, doc)</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>R 是一个不带参数的 <code>getter</code> 方法，返回属性的值，如果不提供此方法，任何读操作都会引起<code>AttributeError</code></li>\n<li>W 是一个接受一个参数的 <code>setter</code> 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起<code>AttributeError</code></li>\n<li>D 是一个 <code>deleter</code> 方法，会删除这个属性，如果不提供此方法，删除操作会引起<code>AttributeError</code></li>\n<li><p>doc 是一个文档字符串用来描述这个属性，调用方法</p>\n<pre><code>C.p.__doc__\n</code></pre></li>\n</ul>\n<p>以下是一个小的类带有属性 x:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.__x=<span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getx</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ getx()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__x</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setx</span><span class=\"params\">(self, v)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ setx(&#123;0&#125;)\"</span>.format(v)</div><div class=\"line\">        self.__x  =  v</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delx</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ delx()\"</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.__x</div><div class=\"line\">    x=property(getx, setx, delx, <span class=\"string\">\"Me property 'x'.\"</span>)</div></pre></td></tr></table></figure>\n<p>在 python 解释器中执行：</p>\n<pre><code>&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; print c.x\n+++ getx()\nNone\n&gt;&gt;&gt; print C.x.__doc__\nMe property &apos;x&apos;.\n&gt;&gt;&gt; c.x=15\n+++ setx(15)\n&gt;&gt;&gt; c.x\n+++ getx()\n15\n&gt;&gt;&gt; del c.x\n+++ delx()\n&gt;&gt;&gt; c.x\n+++ getx()\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;&lt;stdin&gt;&quot;, line 6, in getx\nAttributeError: &apos;C&apos; object has no attribute &apos;_C__x&apos;\n</code></pre><h1 id=\"property-decorator\"><a href=\"#property-decorator\" class=\"headerlink\" title=\"property decorator\"></a>property decorator</h1><p>从 Python 2.6 开始这个方法支持装饰器用法 <code>@property</code> ，使用这个装饰器装饰一个函数，和用 <code>getter</code> 装饰它效果是一样的。另外这个装饰器本身又带有 <code>deleter</code> 和 <code>setter</code> 两个装饰器。可以使用被 <code>@property</code> 装饰过的函数去定义自己的 <code>setter</code> 和 <code>deleter</code> 方法。</p>\n<p>比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@property</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''The internal state property.'''</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self._state</div></pre></td></tr></table></figure>\n<p>这样 .state 将会是这个属性的 getter 方法，而且 文档字符串’’’The internal state property.’’’ 也会被存储在属性中。</p>\n<p>如果你需要 setter 和 deleter 方法：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@state.setter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self, k)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"number\">0</span> &lt;= k &lt;= <span class=\"number\">2</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"Must be 0 through 2 inclusive!\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        self._state = k</div><div class=\"line\">        </div><div class=\"line\"><span class=\"meta\">@state.deleter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">del</span> self._state</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"property-方法\"><a href=\"#property-方法\" class=\"headerlink\" title=\"property() 方法\"></a>property() 方法</h1><p>property() 方法返回了一个特殊的 <a href=\"https://docs.python.org/2/howto/descriptor.html\">descriptor object</a>， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。</p>\n<p>操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。</p>\n<p>创建一个新式类 C，以及一个 p 属性：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(...)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">R</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        ...read method...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">W</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        ...write method...</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">D</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        ...delete method...</div><div class=\"line\">    p = property(R, W, D, doc)</div><div class=\"line\">    ...</div></pre></td></tr></table></figure>","more":"<ul>\n<li>R 是一个不带参数的 <code>getter</code> 方法，返回属性的值，如果不提供此方法，任何读操作都会引起<code>AttributeError</code></li>\n<li>W 是一个接受一个参数的 <code>setter</code> 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起<code>AttributeError</code></li>\n<li>D 是一个 <code>deleter</code> 方法，会删除这个属性，如果不提供此方法，删除操作会引起<code>AttributeError</code></li>\n<li><p>doc 是一个文档字符串用来描述这个属性，调用方法</p>\n<pre><code>C.p.__doc__\n</code></pre></li>\n</ul>\n<p>以下是一个小的类带有属性 x:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.__x=<span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getx</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ getx()\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__x</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setx</span><span class=\"params\">(self, v)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ setx(&#123;0&#125;)\"</span>.format(v)</div><div class=\"line\">        self.__x  =  v</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delx</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"+++ delx()\"</span></div><div class=\"line\">        <span class=\"keyword\">del</span> self.__x</div><div class=\"line\">    x=property(getx, setx, delx, <span class=\"string\">\"Me property 'x'.\"</span>)</div></pre></td></tr></table></figure>\n<p>在 python 解释器中执行：</p>\n<pre><code>&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; print c.x\n+++ getx()\nNone\n&gt;&gt;&gt; print C.x.__doc__\nMe property &apos;x&apos;.\n&gt;&gt;&gt; c.x=15\n+++ setx(15)\n&gt;&gt;&gt; c.x\n+++ getx()\n15\n&gt;&gt;&gt; del c.x\n+++ delx()\n&gt;&gt;&gt; c.x\n+++ getx()\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;&lt;stdin&gt;&quot;, line 6, in getx\nAttributeError: &apos;C&apos; object has no attribute &apos;_C__x&apos;\n</code></pre><h1 id=\"property-decorator\"><a href=\"#property-decorator\" class=\"headerlink\" title=\"property decorator\"></a>property decorator</h1><p>从 Python 2.6 开始这个方法支持装饰器用法 <code>@property</code> ，使用这个装饰器装饰一个函数，和用 <code>getter</code> 装饰它效果是一样的。另外这个装饰器本身又带有 <code>deleter</code> 和 <code>setter</code> 两个装饰器。可以使用被 <code>@property</code> 装饰过的函数去定义自己的 <code>setter</code> 和 <code>deleter</code> 方法。</p>\n<p>比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@property</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"string\">'''The internal state property.'''</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self._state</div></pre></td></tr></table></figure>\n<p>这样 .state 将会是这个属性的 getter 方法，而且 文档字符串’’’The internal state property.’’’ 也会被存储在属性中。</p>\n<p>如果你需要 setter 和 deleter 方法：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@state.setter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self, k)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (<span class=\"number\">0</span> &lt;= k &lt;= <span class=\"number\">2</span>):</div><div class=\"line\">        <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">\"Must be 0 through 2 inclusive!\"</span>)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        self._state = k</div><div class=\"line\">        </div><div class=\"line\"><span class=\"meta\">@state.deleter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">state</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">del</span> self._state</div></pre></td></tr></table></figure>"},{"title":"Travel Image","date":"2016-03-31T02:48:44.000Z","_content":"\n{% qnimg kd1.jpg alt:垦丁海边 %}\n{% qnimg kd2.jpg alt:垦丁海边 %}\n<!-- more -->\n{% qnimg kd3.jpg alt:垦丁海边 %}\n{% qnimg kd4.jpg alt:垦丁海边 %}\n{% qnimg kd5.jpg alt:垦丁海边 %}\n","source":"_posts/Travel-Image.md","raw":"---\ntitle: Travel Image\ndate: 2016-03-31 10:48:44\ntags: \n\t- 垦丁\n\t- 台湾\ncategories: \n\t- 旅行\n---\n\n{% qnimg kd1.jpg alt:垦丁海边 %}\n{% qnimg kd2.jpg alt:垦丁海边 %}\n<!-- more -->\n{% qnimg kd3.jpg alt:垦丁海边 %}\n{% qnimg kd4.jpg alt:垦丁海边 %}\n{% qnimg kd5.jpg alt:垦丁海边 %}\n","slug":"Travel-Image","published":1,"updated":"2016-03-31T08:08:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55tm0009k4rnk1ayfhxo","content":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd1.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd2.jpg\">\n<a id=\"more\"></a>\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd3.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd4.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd5.jpg\">\n","excerpt":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd1.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd2.jpg\">","more":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd3.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd4.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd5.jpg\">"},{"title":"Nginx 服务器处理一次请求的流程","date":"2016-04-12T09:51:04.000Z","_content":"\n# 基于名字的虚拟主机\n\nNginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n<!--more-->\n\n在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在\"listen\"指令中设置\"default_server\"参数：\n\n\tserver {\n\t    listen      80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\"default_server\"参数从0.8.21版开始可用。在之前的版本中，应该使用\"default\"参数代替。\n请注意\"default_server\"是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。\n\n# 如何防止处理未定义主机名的请求\n\n如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：\n\n\tserver {\n\t    listen       80;\n\t    server_name  \"\";\n\t    return       444;\n\t}\n\n在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。\n\n> 从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name\n\"\"。而之前的版本使用机器的hostname作为主机名的默认值。\n\n＃ 基于域名和IP混合的虚拟主机\n\n下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。\n\n默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80 default_server;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n# 一个简单PHP站点配置\n\n现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    root        /data/www;\n\n\t    location / {\n\t        index   index.html index.php;\n\t    }\n\n\t    location ~* \\.(gif|jpg|png)$ {\n\t        expires 30d;\n\t    }\n\n\t    location ~ \\.php$ {\n\t        fastcgi_pass  localhost:9000;\n\t        fastcgi_param SCRIPT_FILENAME\n\t                      $document_root$fastcgi_script_name;\n\t        include       fastcgi_params;\n\t    }\n\t}\n\n首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是\"/\"，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。\n\n请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：\n\n\t/index.php?user=john&page=1\n\t/index.php?page=1&user=john\n\n除此以外，任何人在请求串中都可以随意添加字符串：\n\n\t/index.php?page=1&something+else&user=john\n\n现在让我们来看使用上面的配置，请求是怎样被处理的：\n\n\t请求\"/logo.gif\"首先匹配上location \"/\"，然后匹配上正则表达式\"\\.(gif|jpg|png)$\"。因此，它将被后者处理。根据\"root /data/www\"指令，nginx将请求映射到文件/data/www/logo.gif\"，并发送这个文件到客户端。\n\t请求\"/index.php\"首先也匹配上location \"/\"，然后匹配上正则表达式\"\\.(php)$\"。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为\"/data/www/index.php\"，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，\"/index.php\"。\n\t请求\"/about.html\"仅能匹配上location \"/\"，因此，它将使用此location进行处理。根据\"root /data/www\"指令，nginx将请求映射到文件\"/data/www/about.html\"，并发送这个文件到客户端。\n\t请求\"/\"的处理更为复杂。它仅能匹配上location \"/\"，因此，它将使用此location进行处理。然后，index指令使用它的参数和\"root /data/www\"指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到\"/index.php\"，接着nginx将重新寻找匹配\"/index.php\"的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n\n[原文链接](http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names)","source":"_posts/Nginx-服务器处理一次请求的流程.md","raw":"---\ntitle: Nginx 服务器处理一次请求的流程\ndate: 2016-04-12 17:51:04\ntags: Nginx\ncategories: 技术相关\n---\n\n# 基于名字的虚拟主机\n\nNginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n<!--more-->\n\n在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在\"listen\"指令中设置\"default_server\"参数：\n\n\tserver {\n\t    listen      80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\"default_server\"参数从0.8.21版开始可用。在之前的版本中，应该使用\"default\"参数代替。\n请注意\"default_server\"是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。\n\n# 如何防止处理未定义主机名的请求\n\n如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：\n\n\tserver {\n\t    listen       80;\n\t    server_name  \"\";\n\t    return       444;\n\t}\n\n在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。\n\n> 从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name\n\"\"。而之前的版本使用机器的hostname作为主机名的默认值。\n\n＃ 基于域名和IP混合的虚拟主机\n\n下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。\n\n默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80 default_server;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n# 一个简单PHP站点配置\n\n现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    root        /data/www;\n\n\t    location / {\n\t        index   index.html index.php;\n\t    }\n\n\t    location ~* \\.(gif|jpg|png)$ {\n\t        expires 30d;\n\t    }\n\n\t    location ~ \\.php$ {\n\t        fastcgi_pass  localhost:9000;\n\t        fastcgi_param SCRIPT_FILENAME\n\t                      $document_root$fastcgi_script_name;\n\t        include       fastcgi_params;\n\t    }\n\t}\n\n首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是\"/\"，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。\n\n请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：\n\n\t/index.php?user=john&page=1\n\t/index.php?page=1&user=john\n\n除此以外，任何人在请求串中都可以随意添加字符串：\n\n\t/index.php?page=1&something+else&user=john\n\n现在让我们来看使用上面的配置，请求是怎样被处理的：\n\n\t请求\"/logo.gif\"首先匹配上location \"/\"，然后匹配上正则表达式\"\\.(gif|jpg|png)$\"。因此，它将被后者处理。根据\"root /data/www\"指令，nginx将请求映射到文件/data/www/logo.gif\"，并发送这个文件到客户端。\n\t请求\"/index.php\"首先也匹配上location \"/\"，然后匹配上正则表达式\"\\.(php)$\"。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为\"/data/www/index.php\"，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，\"/index.php\"。\n\t请求\"/about.html\"仅能匹配上location \"/\"，因此，它将使用此location进行处理。根据\"root /data/www\"指令，nginx将请求映射到文件\"/data/www/about.html\"，并发送这个文件到客户端。\n\t请求\"/\"的处理更为复杂。它仅能匹配上location \"/\"，因此，它将使用此location进行处理。然后，index指令使用它的参数和\"root /data/www\"指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到\"/index.php\"，接着nginx将重新寻找匹配\"/index.php\"的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n\n[原文链接](http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names)","slug":"Nginx-服务器处理一次请求的流程","published":1,"updated":"2016-04-17T09:45:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55tr000bk4rnhyafwvz1","content":"<h1 id=\"基于名字的虚拟主机\"><a href=\"#基于名字的虚拟主机\" class=\"headerlink\" title=\"基于名字的虚拟主机\"></a>基于名字的虚拟主机</h1><p>Nginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><a id=\"more\"></a>\n<p>在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在”listen”指令中设置”default_server”参数：</p>\n<pre><code>server {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n</code></pre><p>“default_server”参数从0.8.21版开始可用。在之前的版本中，应该使用”default”参数代替。<br>请注意”default_server”是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。</p>\n<h1 id=\"如何防止处理未定义主机名的请求\"><a href=\"#如何防止处理未定义主机名的请求\" class=\"headerlink\" title=\"如何防止处理未定义主机名的请求\"></a>如何防止处理未定义主机名的请求</h1><p>如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：</p>\n<pre><code>server {\n    listen       80;\n    server_name  &quot;&quot;;\n    return       444;\n}\n</code></pre><p>在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。</p>\n<blockquote>\n<p>从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name<br>“”。而之前的版本使用机器的hostname作为主机名的默认值。</p>\n</blockquote>\n<p>＃ 基于域名和IP混合的虚拟主机</p>\n<p>下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><p>这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。</p>\n<p>默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><h1 id=\"一个简单PHP站点配置\"><a href=\"#一个简单PHP站点配置\" class=\"headerlink\" title=\"一个简单PHP站点配置\"></a>一个简单PHP站点配置</h1><p>现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n</code></pre><p>首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是”/“，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。</p>\n<p>请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：</p>\n<pre><code>/index.php?user=john&amp;page=1\n/index.php?page=1&amp;user=john\n</code></pre><p>除此以外，任何人在请求串中都可以随意添加字符串：</p>\n<pre><code>/index.php?page=1&amp;something+else&amp;user=john\n</code></pre><p>现在让我们来看使用上面的配置，请求是怎样被处理的：</p>\n<pre><code>请求&quot;/logo.gif&quot;首先匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(gif|jpg|png)$&quot;。因此，它将被后者处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件/data/www/logo.gif&quot;，并发送这个文件到客户端。\n请求&quot;/index.php&quot;首先也匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(php)$&quot;。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为&quot;/data/www/index.php&quot;，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，&quot;/index.php&quot;。\n请求&quot;/about.html&quot;仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件&quot;/data/www/about.html&quot;，并发送这个文件到客户端。\n请求&quot;/&quot;的处理更为复杂。它仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。然后，index指令使用它的参数和&quot;root /data/www&quot;指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到&quot;/index.php&quot;，接着nginx将重新寻找匹配&quot;/index.php&quot;的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n</code></pre><p><a href=\"http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","excerpt":"<h1 id=\"基于名字的虚拟主机\"><a href=\"#基于名字的虚拟主机\" class=\"headerlink\" title=\"基于名字的虚拟主机\"></a>基于名字的虚拟主机</h1><p>Nginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre>","more":"<p>在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在”listen”指令中设置”default_server”参数：</p>\n<pre><code>server {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n</code></pre><p>“default_server”参数从0.8.21版开始可用。在之前的版本中，应该使用”default”参数代替。<br>请注意”default_server”是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。</p>\n<h1 id=\"如何防止处理未定义主机名的请求\"><a href=\"#如何防止处理未定义主机名的请求\" class=\"headerlink\" title=\"如何防止处理未定义主机名的请求\"></a>如何防止处理未定义主机名的请求</h1><p>如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：</p>\n<pre><code>server {\n    listen       80;\n    server_name  &quot;&quot;;\n    return       444;\n}\n</code></pre><p>在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。</p>\n<blockquote>\n<p>从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name<br>“”。而之前的版本使用机器的hostname作为主机名的默认值。</p>\n</blockquote>\n<p>＃ 基于域名和IP混合的虚拟主机</p>\n<p>下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><p>这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。</p>\n<p>默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><h1 id=\"一个简单PHP站点配置\"><a href=\"#一个简单PHP站点配置\" class=\"headerlink\" title=\"一个简单PHP站点配置\"></a>一个简单PHP站点配置</h1><p>现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n</code></pre><p>首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是”/“，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。</p>\n<p>请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：</p>\n<pre><code>/index.php?user=john&amp;page=1\n/index.php?page=1&amp;user=john\n</code></pre><p>除此以外，任何人在请求串中都可以随意添加字符串：</p>\n<pre><code>/index.php?page=1&amp;something+else&amp;user=john\n</code></pre><p>现在让我们来看使用上面的配置，请求是怎样被处理的：</p>\n<pre><code>请求&quot;/logo.gif&quot;首先匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(gif|jpg|png)$&quot;。因此，它将被后者处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件/data/www/logo.gif&quot;，并发送这个文件到客户端。\n请求&quot;/index.php&quot;首先也匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(php)$&quot;。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为&quot;/data/www/index.php&quot;，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，&quot;/index.php&quot;。\n请求&quot;/about.html&quot;仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件&quot;/data/www/about.html&quot;，并发送这个文件到客户端。\n请求&quot;/&quot;的处理更为复杂。它仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。然后，index指令使用它的参数和&quot;root /data/www&quot;指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到&quot;/index.php&quot;，接着nginx将重新寻找匹配&quot;/index.php&quot;的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n</code></pre><p><a href=\"http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names\">原文链接</a></p>"},{"title":"classmethod & staticmethod in python","date":"2016-04-25T07:55:26.000Z","_content":"\n\n# Difference between classmethod and staticmethod in python\n\n\n```py\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x    \n\na=A()\n```\n\n下面是调用 foo 方法的语句，a 实例将自己作为第一个参数传给 foo 方法：\n\n\ta.foo(1)\n\t# executing foo(<__main__.A object at 0xb7dbef0c>,1)\n\n<!--more-->\n\n\n---------------------------------------------------------\n\n**调用类方法** 类将本身而不是创建的实例传给 class_foo 方法：\n\n\ta.class_foo(1)\n\t# executing class_foo(<class '__main__.A'>,1)\n\n同样也可以通过类 A 直接调用 class_foo, 一般情况下，如果你定义了一个类方法，通常你会通过类而不是类创建的实例来调用它。\n\n\tA.class_foo(1)\n\t# executing class_foo(<class '__main__.A'>,1)\n\n---------------------------------------------------------\n\n**调用静态方法** 类本身或者类创建的实例都不会传给静态方法，静态方法和其他方法使用行为完全相同，但是你可以通过类或者类的实例来调用它。\n\n\ta.static_foo(1)\n\t# executing static_foo(1)\n\n\tA.static_foo('hi')\n\t# executing static_foo(hi)\n\n\n\n\n","source":"_posts/classmethod-staticmethod-in-python.md","raw":"---\ntitle: 'classmethod & staticmethod in python'\ndate: 2016-04-25 15:55:26\ntags: python\ncategories: 技术相关\n---\n\n\n# Difference between classmethod and staticmethod in python\n\n\n```py\nclass A(object):\n    def foo(self,x):\n        print \"executing foo(%s,%s)\"%(self,x)\n\n    @classmethod\n    def class_foo(cls,x):\n        print \"executing class_foo(%s,%s)\"%(cls,x)\n\n    @staticmethod\n    def static_foo(x):\n        print \"executing static_foo(%s)\"%x    \n\na=A()\n```\n\n下面是调用 foo 方法的语句，a 实例将自己作为第一个参数传给 foo 方法：\n\n\ta.foo(1)\n\t# executing foo(<__main__.A object at 0xb7dbef0c>,1)\n\n<!--more-->\n\n\n---------------------------------------------------------\n\n**调用类方法** 类将本身而不是创建的实例传给 class_foo 方法：\n\n\ta.class_foo(1)\n\t# executing class_foo(<class '__main__.A'>,1)\n\n同样也可以通过类 A 直接调用 class_foo, 一般情况下，如果你定义了一个类方法，通常你会通过类而不是类创建的实例来调用它。\n\n\tA.class_foo(1)\n\t# executing class_foo(<class '__main__.A'>,1)\n\n---------------------------------------------------------\n\n**调用静态方法** 类本身或者类创建的实例都不会传给静态方法，静态方法和其他方法使用行为完全相同，但是你可以通过类或者类的实例来调用它。\n\n\ta.static_foo(1)\n\t# executing static_foo(1)\n\n\tA.static_foo('hi')\n\t# executing static_foo(hi)\n\n\n\n\n","slug":"classmethod-staticmethod-in-python","published":1,"updated":"2016-04-25T08:36:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55tx000fk4rnr0ai3g3c","content":"<h1 id=\"Difference-between-classmethod-and-staticmethod-in-python\"><a href=\"#Difference-between-classmethod-and-staticmethod-in-python\" class=\"headerlink\" title=\"Difference between classmethod and staticmethod in python\"></a>Difference between classmethod and staticmethod in python</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x    </div><div class=\"line\"></div><div class=\"line\">a=A()</div></pre></td></tr></table></figure>\n<p>下面是调用 foo 方法的语句，a 实例将自己作为第一个参数传给 foo 方法：</p>\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre><a id=\"more\"></a>\n<hr>\n<p><strong>调用类方法</strong> 类将本身而不是创建的实例传给 class_foo 方法：</p>\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)\n</code></pre><p>同样也可以通过类 A 直接调用 class_foo, 一般情况下，如果你定义了一个类方法，通常你会通过类而不是类创建的实例来调用它。</p>\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)\n</code></pre><hr>\n<p><strong>调用静态方法</strong> 类本身或者类创建的实例都不会传给静态方法，静态方法和其他方法使用行为完全相同，但是你可以通过类或者类的实例来调用它。</p>\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo(&apos;hi&apos;)\n# executing static_foo(hi)\n</code></pre>","excerpt":"<h1 id=\"Difference-between-classmethod-and-staticmethod-in-python\"><a href=\"#Difference-between-classmethod-and-staticmethod-in-python\" class=\"headerlink\" title=\"Difference between classmethod and staticmethod in python\"></a>Difference between classmethod and staticmethod in python</h1><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(self,x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing foo(%s,%s)\"</span>%(self,x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @classmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_foo</span><span class=\"params\">(cls,x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing class_foo(%s,%s)\"</span>%(cls,x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @staticmethod</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_foo</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">\"executing static_foo(%s)\"</span>%x    </div><div class=\"line\"></div><div class=\"line\">a=A()</div></pre></td></tr></table></figure>\n<p>下面是调用 foo 方法的语句，a 实例将自己作为第一个参数传给 foo 方法：</p>\n<pre><code>a.foo(1)\n# executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)\n</code></pre>","more":"<hr>\n<p><strong>调用类方法</strong> 类将本身而不是创建的实例传给 class_foo 方法：</p>\n<pre><code>a.class_foo(1)\n# executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)\n</code></pre><p>同样也可以通过类 A 直接调用 class_foo, 一般情况下，如果你定义了一个类方法，通常你会通过类而不是类创建的实例来调用它。</p>\n<pre><code>A.class_foo(1)\n# executing class_foo(&lt;class &apos;__main__.A&apos;&gt;,1)\n</code></pre><hr>\n<p><strong>调用静态方法</strong> 类本身或者类创建的实例都不会传给静态方法，静态方法和其他方法使用行为完全相同，但是你可以通过类或者类的实例来调用它。</p>\n<pre><code>a.static_foo(1)\n# executing static_foo(1)\n\nA.static_foo(&apos;hi&apos;)\n# executing static_foo(hi)\n</code></pre>"},{"title":"Supervisor 使用总结","date":"2016-05-23T03:29:16.000Z","_content":"\n# 简介\n\nSupervisor 是一个 client/server 系统，帮助用户管理 Unix like 系统上的进程。\n提供当进程 crash 或者系统重启的时候，自动启动进程，分组管理进程，错误日志，检测进程等功能。\n\n## 组成\n\n1. supervisord server 端的 supervisor 程序，负责启动进程，响应客户端的请求，重启 crash 的子进程等\n\n2. supervisorctl client 端的 supervisor 程序，提供了类似 shell 的界面来和 supervisord 进行交互，可以使用响应的命令管理进程\n\n3. web server 提供了一个 web 界面来管理进程，需要启用配置文件中的 [inet_http_server] section。\n\n4. XML-RPC Interface 还未使用过...\n\n<!--more-->\n\n# Install and run\n\n使用 easy_install 或者 pip\n\n\teasy_install supervisor\n\nor\n\n\tpip install supervisor\n\nsupervisor 的配置文件一般在 `/etc/supervisord.conf`，当然也可以指定为其他位置。\n\n启动 supervisord\n\n\tsupervisord -c supervisord.conf\n\n启动 supervisorctl\n\n\tsupervisorctl -c supervisord.conf\n\n## 常用命令\n\n* supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。\n* supervisorctl start programxxx，启动某个进程\n* supervisorctl restart programxxx，重启某个进程\n* supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)\n* supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。\n* supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。\n* supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。\n\n__注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。__\n\n\n# Supervisor 详细配置\n\n```\n; Sample supervisor config file.\n\n[unix_http_server]\n;用于和 supervisord 通信的 socket\nfile=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)\n;chmod=0700                 ; sockef file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; (default is no username (open server))\n;password=123               ; (default is no password (open server))\n\n\n;web server 管理界面\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=yourusername       ; (default is no username (open server))\npassword=yourpassword       ; (default is no password (open server))\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)\nlogfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)\nlogfile_backups=10          ; (num of main logfile rotation backups;default 10)\nloglevel=info               ; (log level;default info; others: debug,warn,trace)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nnodaemon=false              ; (start in foreground if true;default false)\nminfds=1024                 ; (min. avail startup file descriptors;default 1024)\nminprocs=200                ; (min. avail process descriptors;default 200)\n;umask=022                  ; (process file creation umask;default 022)\n;user=chrism                 ; (default is current user, required if root)\n;identifier=supervisor       ; (supervisord identifier, default is 'supervisor')\n;directory=/tmp              ; (default is not to cd during start)\n;nocleanup=true              ; (don't clean up tempfiles at start;default false)\n;childlogdir=/tmp            ; ('AUTO' child log dir, default $TEMP)\n;environment=KEY=value       ; (key value pairs to add to environment)\n;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\n;此处需要和[unix_http_server]中填写的路径一致\nserverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as http_username if set\n;password=123                ; should be same as http_password if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The below sample program section shows all possible program subsection values,\n; create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;需要运行的程序\n;[program:theprogramname]\n;command=/bin/cat              ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;autorestart=true              ; retstart at unexpected quit (default: true)\n;startsecs=10                  ; number of secs prog must stay running (def. 1)\n;startretries=3                ; max # of serial start failures (default 3)\n;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)\n;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)\n;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;environment=A=1,B=2           ; process environment additions (def no adds)\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The below sample eventlistener section shows all possible\n; eventlistener subsection values, create one or more 'real'\n; eventlistener: sections to be able to handle event notifications\n; sent by supervisor.\n\n;[eventlistener:theeventlistenername]\n;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;events=EVENT                  ; event notif. types to subscribe to (req'd)\n;buffer_size=10                ; event buffer queue size (default 10)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)\n;startsecs=10                  ; number of secs prog must stay running (def. 1)\n;startretries=3                ; max # of serial start failures (default 3)\n;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups        ; # of stderr logfile backups (default 10)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;environment=A=1,B=2           ; process environment additions\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The below sample group section shows all possible group values,\n; create one or more 'real' group: sections to create \"heterogeneous\"\n; process groups.\n\n;[group:thegroupname]\n;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions\n;priority=999                  ; the relative start priority (default 999)\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\n;将其他配置文件包含进来\nfiles = supervisord.d/*.ini\n\n```\n\n\n","source":"_posts/Supervisord-使用总结.md","raw":"---\ntitle: Supervisor 使用总结\ndate: 2016-05-23 11:29:16\ntags: \n\t- 运维\n\t- Supervisor\ncategories: 技术相关\n---\n\n# 简介\n\nSupervisor 是一个 client/server 系统，帮助用户管理 Unix like 系统上的进程。\n提供当进程 crash 或者系统重启的时候，自动启动进程，分组管理进程，错误日志，检测进程等功能。\n\n## 组成\n\n1. supervisord server 端的 supervisor 程序，负责启动进程，响应客户端的请求，重启 crash 的子进程等\n\n2. supervisorctl client 端的 supervisor 程序，提供了类似 shell 的界面来和 supervisord 进行交互，可以使用响应的命令管理进程\n\n3. web server 提供了一个 web 界面来管理进程，需要启用配置文件中的 [inet_http_server] section。\n\n4. XML-RPC Interface 还未使用过...\n\n<!--more-->\n\n# Install and run\n\n使用 easy_install 或者 pip\n\n\teasy_install supervisor\n\nor\n\n\tpip install supervisor\n\nsupervisor 的配置文件一般在 `/etc/supervisord.conf`，当然也可以指定为其他位置。\n\n启动 supervisord\n\n\tsupervisord -c supervisord.conf\n\n启动 supervisorctl\n\n\tsupervisorctl -c supervisord.conf\n\n## 常用命令\n\n* supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。\n* supervisorctl start programxxx，启动某个进程\n* supervisorctl restart programxxx，重启某个进程\n* supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)\n* supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。\n* supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。\n* supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。\n\n__注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。__\n\n\n# Supervisor 详细配置\n\n```\n; Sample supervisor config file.\n\n[unix_http_server]\n;用于和 supervisord 通信的 socket\nfile=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)\n;chmod=0700                 ; sockef file mode (default 0700)\n;chown=nobody:nogroup       ; socket file uid:gid owner\n;username=user              ; (default is no username (open server))\n;password=123               ; (default is no password (open server))\n\n\n;web server 管理界面\n[inet_http_server]         ; inet (TCP) server disabled by default\nport=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\nusername=yourusername       ; (default is no username (open server))\npassword=yourpassword       ; (default is no password (open server))\n\n[supervisord]\nlogfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)\nlogfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)\nlogfile_backups=10          ; (num of main logfile rotation backups;default 10)\nloglevel=info               ; (log level;default info; others: debug,warn,trace)\npidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)\nnodaemon=false              ; (start in foreground if true;default false)\nminfds=1024                 ; (min. avail startup file descriptors;default 1024)\nminprocs=200                ; (min. avail process descriptors;default 200)\n;umask=022                  ; (process file creation umask;default 022)\n;user=chrism                 ; (default is current user, required if root)\n;identifier=supervisor       ; (supervisord identifier, default is 'supervisor')\n;directory=/tmp              ; (default is not to cd during start)\n;nocleanup=true              ; (don't clean up tempfiles at start;default false)\n;childlogdir=/tmp            ; ('AUTO' child log dir, default $TEMP)\n;environment=KEY=value       ; (key value pairs to add to environment)\n;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)\n\n; the below section must remain in the config file for RPC\n; (supervisorctl/web interface) to work, additional interfaces may be\n; added by defining them in separate rpcinterface: sections\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\n;此处需要和[unix_http_server]中填写的路径一致\nserverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket\n;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket\n;username=chris              ; should be same as http_username if set\n;password=123                ; should be same as http_password if set\n;prompt=mysupervisor         ; cmd line prompt (default \"supervisor\")\n;history_file=~/.sc_history  ; use readline history if available\n\n; The below sample program section shows all possible program subsection values,\n; create one or more 'real' program: sections to be able to control them under\n; supervisor.\n\n;需要运行的程序\n;[program:theprogramname]\n;command=/bin/cat              ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=999                  ; the relative start priority (default 999)\n;autostart=true                ; start at supervisord start (default: true)\n;autorestart=true              ; retstart at unexpected quit (default: true)\n;startsecs=10                  ; number of secs prog must stay running (def. 1)\n;startretries=3                ; max # of serial start failures (default 3)\n;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)\n;stdout_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)\n;stderr_capture_maxbytes=1MB   ; number of bytes in 'capturemode' (default 0)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;environment=A=1,B=2           ; process environment additions (def no adds)\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The below sample eventlistener section shows all possible\n; eventlistener subsection values, create one or more 'real'\n; eventlistener: sections to be able to handle event notifications\n; sent by supervisor.\n\n;[eventlistener:theeventlistenername]\n;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)\n;process_name=%(program_name)s ; process_name expr (default %(program_name)s)\n;numprocs=1                    ; number of processes copies to start (def 1)\n;events=EVENT                  ; event notif. types to subscribe to (req'd)\n;buffer_size=10                ; event buffer queue size (default 10)\n;directory=/tmp                ; directory to cwd to before exec (def no cwd)\n;umask=022                     ; umask for process (default None)\n;priority=-1                   ; the relative start priority (default -1)\n;autostart=true                ; start at supervisord start (default: true)\n;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)\n;startsecs=10                  ; number of secs prog must stay running (def. 1)\n;startretries=3                ; max # of serial start failures (default 3)\n;exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)\n;stopsignal=QUIT               ; signal used to kill process (default TERM)\n;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)\n;user=chrism                   ; setuid to this UNIX account to run the program\n;redirect_stderr=true          ; redirect proc stderr to stdout (default false)\n;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO\n;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)\n;stdout_events_enabled=false   ; emit events on stdout writes (default false)\n;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO\n;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)\n;stderr_logfile_backups        ; # of stderr logfile backups (default 10)\n;stderr_events_enabled=false   ; emit events on stderr writes (default false)\n;environment=A=1,B=2           ; process environment additions\n;serverurl=AUTO                ; override serverurl computation (childutils)\n\n; The below sample group section shows all possible group values,\n; create one or more 'real' group: sections to create \"heterogeneous\"\n; process groups.\n\n;[group:thegroupname]\n;programs=progname1,progname2  ; each refers to 'x' in [program:x] definitions\n;priority=999                  ; the relative start priority (default 999)\n\n; The [include] section can just contain the \"files\" setting.  This\n; setting can list multiple files (separated by whitespace or\n; newlines).  It can also contain wildcards.  The filenames are\n; interpreted as relative to this file.  Included files *cannot*\n; include files themselves.\n\n[include]\n;将其他配置文件包含进来\nfiles = supervisord.d/*.ini\n\n```\n\n\n","slug":"Supervisord-使用总结","published":1,"updated":"2016-05-23T04:55:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55ty000ik4rn6hfa9h4n","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Supervisor 是一个 client/server 系统，帮助用户管理 Unix like 系统上的进程。<br>提供当进程 crash 或者系统重启的时候，自动启动进程，分组管理进程，错误日志，检测进程等功能。</p>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><ol>\n<li><p>supervisord server 端的 supervisor 程序，负责启动进程，响应客户端的请求，重启 crash 的子进程等</p>\n</li>\n<li><p>supervisorctl client 端的 supervisor 程序，提供了类似 shell 的界面来和 supervisord 进行交互，可以使用响应的命令管理进程</p>\n</li>\n<li><p>web server 提供了一个 web 界面来管理进程，需要启用配置文件中的 [inet_http_server] section。</p>\n</li>\n<li><p>XML-RPC Interface 还未使用过…</p>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"Install-and-run\"><a href=\"#Install-and-run\" class=\"headerlink\" title=\"Install and run\"></a>Install and run</h1><p>使用 easy_install 或者 pip</p>\n<pre><code>easy_install supervisor\n</code></pre><p>or</p>\n<pre><code>pip install supervisor\n</code></pre><p>supervisor 的配置文件一般在 <code>/etc/supervisord.conf</code>，当然也可以指定为其他位置。</p>\n<p>启动 supervisord</p>\n<pre><code>supervisord -c supervisord.conf\n</code></pre><p>启动 supervisorctl</p>\n<pre><code>supervisorctl -c supervisord.conf\n</code></pre><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。</li>\n<li>supervisorctl start programxxx，启动某个进程</li>\n<li>supervisorctl restart programxxx，重启某个进程</li>\n<li>supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)</li>\n<li>supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</li>\n<li>supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</li>\n<li>supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</li>\n</ul>\n<p><strong>注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</strong></p>\n<h1 id=\"Supervisor-详细配置\"><a href=\"#Supervisor-详细配置\" class=\"headerlink\" title=\"Supervisor 详细配置\"></a>Supervisor 详细配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\">; Sample supervisor config file.</div><div class=\"line\"></div><div class=\"line\">[unix_http_server]</div><div class=\"line\">;用于和 supervisord 通信的 socket</div><div class=\"line\">file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)</div><div class=\"line\">;chmod=0700                 ; sockef file mode (default 0700)</div><div class=\"line\">;chown=nobody:nogroup       ; socket file uid:gid owner</div><div class=\"line\">;username=user              ; (default is no username (open server))</div><div class=\"line\">;password=123               ; (default is no password (open server))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">;web server 管理界面</div><div class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class=\"line\">port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</div><div class=\"line\">username=yourusername       ; (default is no username (open server))</div><div class=\"line\">password=yourpassword       ; (default is no password (open server))</div><div class=\"line\"></div><div class=\"line\">[supervisord]</div><div class=\"line\">logfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)</div><div class=\"line\">logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)</div><div class=\"line\">logfile_backups=10          ; (num of main logfile rotation backups;default 10)</div><div class=\"line\">loglevel=info               ; (log level;default info; others: debug,warn,trace)</div><div class=\"line\">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class=\"line\">nodaemon=false              ; (start in foreground if true;default false)</div><div class=\"line\">minfds=1024                 ; (min. avail startup file descriptors;default 1024)</div><div class=\"line\">minprocs=200                ; (min. avail process descriptors;default 200)</div><div class=\"line\">;umask=022                  ; (process file creation umask;default 022)</div><div class=\"line\">;user=chrism                 ; (default is current user, required if root)</div><div class=\"line\">;identifier=supervisor       ; (supervisord identifier, default is &apos;supervisor&apos;)</div><div class=\"line\">;directory=/tmp              ; (default is not to cd during start)</div><div class=\"line\">;nocleanup=true              ; (don&apos;t clean up tempfiles at start;default false)</div><div class=\"line\">;childlogdir=/tmp            ; (&apos;AUTO&apos; child log dir, default $TEMP)</div><div class=\"line\">;environment=KEY=value       ; (key value pairs to add to environment)</div><div class=\"line\">;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)</div><div class=\"line\"></div><div class=\"line\">; the below section must remain in the config file for RPC</div><div class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class=\"line\">; added by defining them in separate rpcinterface: sections</div><div class=\"line\">[rpcinterface:supervisor]</div><div class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class=\"line\"></div><div class=\"line\">[supervisorctl]</div><div class=\"line\">;此处需要和[unix_http_server]中填写的路径一致</div><div class=\"line\">serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket</div><div class=\"line\">;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</div><div class=\"line\">;username=chris              ; should be same as http_username if set</div><div class=\"line\">;password=123                ; should be same as http_password if set</div><div class=\"line\">;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)</div><div class=\"line\">;history_file=~/.sc_history  ; use readline history if available</div><div class=\"line\"></div><div class=\"line\">; The below sample program section shows all possible program subsection values,</div><div class=\"line\">; create one or more &apos;real&apos; program: sections to be able to control them under</div><div class=\"line\">; supervisor.</div><div class=\"line\"></div><div class=\"line\">;需要运行的程序</div><div class=\"line\">;[program:theprogramname]</div><div class=\"line\">;command=/bin/cat              ; the program (relative uses PATH, can take args)</div><div class=\"line\">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</div><div class=\"line\">;numprocs=1                    ; number of processes copies to start (def 1)</div><div class=\"line\">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</div><div class=\"line\">;umask=022                     ; umask for process (default None)</div><div class=\"line\">;priority=999                  ; the relative start priority (default 999)</div><div class=\"line\">;autostart=true                ; start at supervisord start (default: true)</div><div class=\"line\">;autorestart=true              ; retstart at unexpected quit (default: true)</div><div class=\"line\">;startsecs=10                  ; number of secs prog must stay running (def. 1)</div><div class=\"line\">;startretries=3                ; max # of serial start failures (default 3)</div><div class=\"line\">;exitcodes=0,2                 ; &apos;expected&apos; exit codes for process (default 0,2)</div><div class=\"line\">;stopsignal=QUIT               ; signal used to kill process (default TERM)</div><div class=\"line\">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</div><div class=\"line\">;user=chrism                   ; setuid to this UNIX account to run the program</div><div class=\"line\">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</div><div class=\"line\">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</div><div class=\"line\">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</div><div class=\"line\">;stdout_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class=\"line\">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</div><div class=\"line\">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</div><div class=\"line\">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</div><div class=\"line\">;stderr_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class=\"line\">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</div><div class=\"line\">;environment=A=1,B=2           ; process environment additions (def no adds)</div><div class=\"line\">;serverurl=AUTO                ; override serverurl computation (childutils)</div><div class=\"line\"></div><div class=\"line\">; The below sample eventlistener section shows all possible</div><div class=\"line\">; eventlistener subsection values, create one or more &apos;real&apos;</div><div class=\"line\">; eventlistener: sections to be able to handle event notifications</div><div class=\"line\">; sent by supervisor.</div><div class=\"line\"></div><div class=\"line\">;[eventlistener:theeventlistenername]</div><div class=\"line\">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</div><div class=\"line\">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</div><div class=\"line\">;numprocs=1                    ; number of processes copies to start (def 1)</div><div class=\"line\">;events=EVENT                  ; event notif. types to subscribe to (req&apos;d)</div><div class=\"line\">;buffer_size=10                ; event buffer queue size (default 10)</div><div class=\"line\">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</div><div class=\"line\">;umask=022                     ; umask for process (default None)</div><div class=\"line\">;priority=-1                   ; the relative start priority (default -1)</div><div class=\"line\">;autostart=true                ; start at supervisord start (default: true)</div><div class=\"line\">;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)</div><div class=\"line\">;startsecs=10                  ; number of secs prog must stay running (def. 1)</div><div class=\"line\">;startretries=3                ; max # of serial start failures (default 3)</div><div class=\"line\">;exitcodes=0,2                 ; &apos;expected&apos; exit codes for process (default 0,2)</div><div class=\"line\">;stopsignal=QUIT               ; signal used to kill process (default TERM)</div><div class=\"line\">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</div><div class=\"line\">;user=chrism                   ; setuid to this UNIX account to run the program</div><div class=\"line\">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</div><div class=\"line\">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</div><div class=\"line\">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</div><div class=\"line\">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</div><div class=\"line\">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</div><div class=\"line\">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stderr_logfile_backups        ; # of stderr logfile backups (default 10)</div><div class=\"line\">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</div><div class=\"line\">;environment=A=1,B=2           ; process environment additions</div><div class=\"line\">;serverurl=AUTO                ; override serverurl computation (childutils)</div><div class=\"line\"></div><div class=\"line\">; The below sample group section shows all possible group values,</div><div class=\"line\">; create one or more &apos;real&apos; group: sections to create &quot;heterogeneous&quot;</div><div class=\"line\">; process groups.</div><div class=\"line\"></div><div class=\"line\">;[group:thegroupname]</div><div class=\"line\">;programs=progname1,progname2  ; each refers to &apos;x&apos; in [program:x] definitions</div><div class=\"line\">;priority=999                  ; the relative start priority (default 999)</div><div class=\"line\"></div><div class=\"line\">; The [include] section can just contain the &quot;files&quot; setting.  This</div><div class=\"line\">; setting can list multiple files (separated by whitespace or</div><div class=\"line\">; newlines).  It can also contain wildcards.  The filenames are</div><div class=\"line\">; interpreted as relative to this file.  Included files *cannot*</div><div class=\"line\">; include files themselves.</div><div class=\"line\"></div><div class=\"line\">[include]</div><div class=\"line\">;将其他配置文件包含进来</div><div class=\"line\">files = supervisord.d/*.ini</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Supervisor 是一个 client/server 系统，帮助用户管理 Unix like 系统上的进程。<br>提供当进程 crash 或者系统重启的时候，自动启动进程，分组管理进程，错误日志，检测进程等功能。</p>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><ol>\n<li><p>supervisord server 端的 supervisor 程序，负责启动进程，响应客户端的请求，重启 crash 的子进程等</p>\n</li>\n<li><p>supervisorctl client 端的 supervisor 程序，提供了类似 shell 的界面来和 supervisord 进行交互，可以使用响应的命令管理进程</p>\n</li>\n<li><p>web server 提供了一个 web 界面来管理进程，需要启用配置文件中的 [inet_http_server] section。</p>\n</li>\n<li><p>XML-RPC Interface 还未使用过…</p>\n</li>\n</ol>","more":"<h1 id=\"Install-and-run\"><a href=\"#Install-and-run\" class=\"headerlink\" title=\"Install and run\"></a>Install and run</h1><p>使用 easy_install 或者 pip</p>\n<pre><code>easy_install supervisor\n</code></pre><p>or</p>\n<pre><code>pip install supervisor\n</code></pre><p>supervisor 的配置文件一般在 <code>/etc/supervisord.conf</code>，当然也可以指定为其他位置。</p>\n<p>启动 supervisord</p>\n<pre><code>supervisord -c supervisord.conf\n</code></pre><p>启动 supervisorctl</p>\n<pre><code>supervisorctl -c supervisord.conf\n</code></pre><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ul>\n<li>supervisorctl stop programxxx，停止某一个进程(programxxx)，programxxx为[program:chatdemon]里配置的值，这个示例就是chatdemon。</li>\n<li>supervisorctl start programxxx，启动某个进程</li>\n<li>supervisorctl restart programxxx，重启某个进程</li>\n<li>supervisorctl stop groupworker: ，重启所有属于名为groupworker这个分组的进程(start,restart同理)</li>\n<li>supervisorctl stop all，停止全部进程，注：start、restart、stop都不会载入最新的配置文件。</li>\n<li>supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</li>\n<li>supervisorctl update，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</li>\n</ul>\n<p><strong>注意：显示用stop停止掉的进程，用reload或者update都不会自动重启。</strong></p>\n<h1 id=\"Supervisor-详细配置\"><a href=\"#Supervisor-详细配置\" class=\"headerlink\" title=\"Supervisor 详细配置\"></a>Supervisor 详细配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\">; Sample supervisor config file.</div><div class=\"line\"></div><div class=\"line\">[unix_http_server]</div><div class=\"line\">;用于和 supervisord 通信的 socket</div><div class=\"line\">file=/var/run/supervisor/supervisor.sock   ; (the path to the socket file)</div><div class=\"line\">;chmod=0700                 ; sockef file mode (default 0700)</div><div class=\"line\">;chown=nobody:nogroup       ; socket file uid:gid owner</div><div class=\"line\">;username=user              ; (default is no username (open server))</div><div class=\"line\">;password=123               ; (default is no password (open server))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">;web server 管理界面</div><div class=\"line\">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class=\"line\">port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</div><div class=\"line\">username=yourusername       ; (default is no username (open server))</div><div class=\"line\">password=yourpassword       ; (default is no password (open server))</div><div class=\"line\"></div><div class=\"line\">[supervisord]</div><div class=\"line\">logfile=/var/log/supervisor/supervisord.log  ; (main log file;default $CWD/supervisord.log)</div><div class=\"line\">logfile_maxbytes=50MB       ; (max main logfile bytes b4 rotation;default 50MB)</div><div class=\"line\">logfile_backups=10          ; (num of main logfile rotation backups;default 10)</div><div class=\"line\">loglevel=info               ; (log level;default info; others: debug,warn,trace)</div><div class=\"line\">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</div><div class=\"line\">nodaemon=false              ; (start in foreground if true;default false)</div><div class=\"line\">minfds=1024                 ; (min. avail startup file descriptors;default 1024)</div><div class=\"line\">minprocs=200                ; (min. avail process descriptors;default 200)</div><div class=\"line\">;umask=022                  ; (process file creation umask;default 022)</div><div class=\"line\">;user=chrism                 ; (default is current user, required if root)</div><div class=\"line\">;identifier=supervisor       ; (supervisord identifier, default is &apos;supervisor&apos;)</div><div class=\"line\">;directory=/tmp              ; (default is not to cd during start)</div><div class=\"line\">;nocleanup=true              ; (don&apos;t clean up tempfiles at start;default false)</div><div class=\"line\">;childlogdir=/tmp            ; (&apos;AUTO&apos; child log dir, default $TEMP)</div><div class=\"line\">;environment=KEY=value       ; (key value pairs to add to environment)</div><div class=\"line\">;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)</div><div class=\"line\"></div><div class=\"line\">; the below section must remain in the config file for RPC</div><div class=\"line\">; (supervisorctl/web interface) to work, additional interfaces may be</div><div class=\"line\">; added by defining them in separate rpcinterface: sections</div><div class=\"line\">[rpcinterface:supervisor]</div><div class=\"line\">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class=\"line\"></div><div class=\"line\">[supervisorctl]</div><div class=\"line\">;此处需要和[unix_http_server]中填写的路径一致</div><div class=\"line\">serverurl=unix:///var/run/supervisor/supervisor.sock ; use a unix:// URL  for a unix socket</div><div class=\"line\">;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</div><div class=\"line\">;username=chris              ; should be same as http_username if set</div><div class=\"line\">;password=123                ; should be same as http_password if set</div><div class=\"line\">;prompt=mysupervisor         ; cmd line prompt (default &quot;supervisor&quot;)</div><div class=\"line\">;history_file=~/.sc_history  ; use readline history if available</div><div class=\"line\"></div><div class=\"line\">; The below sample program section shows all possible program subsection values,</div><div class=\"line\">; create one or more &apos;real&apos; program: sections to be able to control them under</div><div class=\"line\">; supervisor.</div><div class=\"line\"></div><div class=\"line\">;需要运行的程序</div><div class=\"line\">;[program:theprogramname]</div><div class=\"line\">;command=/bin/cat              ; the program (relative uses PATH, can take args)</div><div class=\"line\">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</div><div class=\"line\">;numprocs=1                    ; number of processes copies to start (def 1)</div><div class=\"line\">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</div><div class=\"line\">;umask=022                     ; umask for process (default None)</div><div class=\"line\">;priority=999                  ; the relative start priority (default 999)</div><div class=\"line\">;autostart=true                ; start at supervisord start (default: true)</div><div class=\"line\">;autorestart=true              ; retstart at unexpected quit (default: true)</div><div class=\"line\">;startsecs=10                  ; number of secs prog must stay running (def. 1)</div><div class=\"line\">;startretries=3                ; max # of serial start failures (default 3)</div><div class=\"line\">;exitcodes=0,2                 ; &apos;expected&apos; exit codes for process (default 0,2)</div><div class=\"line\">;stopsignal=QUIT               ; signal used to kill process (default TERM)</div><div class=\"line\">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</div><div class=\"line\">;user=chrism                   ; setuid to this UNIX account to run the program</div><div class=\"line\">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</div><div class=\"line\">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</div><div class=\"line\">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</div><div class=\"line\">;stdout_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class=\"line\">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</div><div class=\"line\">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</div><div class=\"line\">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stderr_logfile_backups=10     ; # of stderr logfile backups (default 10)</div><div class=\"line\">;stderr_capture_maxbytes=1MB   ; number of bytes in &apos;capturemode&apos; (default 0)</div><div class=\"line\">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</div><div class=\"line\">;environment=A=1,B=2           ; process environment additions (def no adds)</div><div class=\"line\">;serverurl=AUTO                ; override serverurl computation (childutils)</div><div class=\"line\"></div><div class=\"line\">; The below sample eventlistener section shows all possible</div><div class=\"line\">; eventlistener subsection values, create one or more &apos;real&apos;</div><div class=\"line\">; eventlistener: sections to be able to handle event notifications</div><div class=\"line\">; sent by supervisor.</div><div class=\"line\"></div><div class=\"line\">;[eventlistener:theeventlistenername]</div><div class=\"line\">;command=/bin/eventlistener    ; the program (relative uses PATH, can take args)</div><div class=\"line\">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</div><div class=\"line\">;numprocs=1                    ; number of processes copies to start (def 1)</div><div class=\"line\">;events=EVENT                  ; event notif. types to subscribe to (req&apos;d)</div><div class=\"line\">;buffer_size=10                ; event buffer queue size (default 10)</div><div class=\"line\">;directory=/tmp                ; directory to cwd to before exec (def no cwd)</div><div class=\"line\">;umask=022                     ; umask for process (default None)</div><div class=\"line\">;priority=-1                   ; the relative start priority (default -1)</div><div class=\"line\">;autostart=true                ; start at supervisord start (default: true)</div><div class=\"line\">;autorestart=unexpected        ; restart at unexpected quit (default: unexpected)</div><div class=\"line\">;startsecs=10                  ; number of secs prog must stay running (def. 1)</div><div class=\"line\">;startretries=3                ; max # of serial start failures (default 3)</div><div class=\"line\">;exitcodes=0,2                 ; &apos;expected&apos; exit codes for process (default 0,2)</div><div class=\"line\">;stopsignal=QUIT               ; signal used to kill process (default TERM)</div><div class=\"line\">;stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)</div><div class=\"line\">;user=chrism                   ; setuid to this UNIX account to run the program</div><div class=\"line\">;redirect_stderr=true          ; redirect proc stderr to stdout (default false)</div><div class=\"line\">;stdout_logfile=/a/path        ; stdout log path, NONE for none; default AUTO</div><div class=\"line\">;stdout_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stdout_logfile_backups=10     ; # of stdout logfile backups (default 10)</div><div class=\"line\">;stdout_events_enabled=false   ; emit events on stdout writes (default false)</div><div class=\"line\">;stderr_logfile=/a/path        ; stderr log path, NONE for none; default AUTO</div><div class=\"line\">;stderr_logfile_maxbytes=1MB   ; max # logfile bytes b4 rotation (default 50MB)</div><div class=\"line\">;stderr_logfile_backups        ; # of stderr logfile backups (default 10)</div><div class=\"line\">;stderr_events_enabled=false   ; emit events on stderr writes (default false)</div><div class=\"line\">;environment=A=1,B=2           ; process environment additions</div><div class=\"line\">;serverurl=AUTO                ; override serverurl computation (childutils)</div><div class=\"line\"></div><div class=\"line\">; The below sample group section shows all possible group values,</div><div class=\"line\">; create one or more &apos;real&apos; group: sections to create &quot;heterogeneous&quot;</div><div class=\"line\">; process groups.</div><div class=\"line\"></div><div class=\"line\">;[group:thegroupname]</div><div class=\"line\">;programs=progname1,progname2  ; each refers to &apos;x&apos; in [program:x] definitions</div><div class=\"line\">;priority=999                  ; the relative start priority (default 999)</div><div class=\"line\"></div><div class=\"line\">; The [include] section can just contain the &quot;files&quot; setting.  This</div><div class=\"line\">; setting can list multiple files (separated by whitespace or</div><div class=\"line\">; newlines).  It can also contain wildcards.  The filenames are</div><div class=\"line\">; interpreted as relative to this file.  Included files *cannot*</div><div class=\"line\">; include files themselves.</div><div class=\"line\"></div><div class=\"line\">[include]</div><div class=\"line\">;将其他配置文件包含进来</div><div class=\"line\">files = supervisord.d/*.ini</div></pre></td></tr></table></figure>"},{"title":"Vim 使用总结","date":"2016-10-17T06:52:17.000Z","_content":"\n# 三种模式\n\n## 一般指令模式\n\n直接打开 vim 就是一般指令模式了，在一般指令模式下，可以上下左右移动光标，翻页，跳转到指定的行，以及删除复制等等操作\n\n\n<!--more-->\n\n## 编辑模式\n\n通过在一般指令模式下键入`i,I,o,O,a,A,r,R`等字母进入编辑模式，编辑模式下可以进行文本的输入和修改，通过键入`Esc`推出编辑模式重新回到一般指令模式。\n\n## 指令列命令模式\n\n在一般指令模式中键入`:/?`三个中的任意一个进入指令列模式。进入指令列模式中可以搜索，大量字符替换等等操作。\n\n\n{% qnimg centos7_vi-mode.gif title:\"vim 三种模式之间的关系\" %}\n\n# Cheatsheet\n\n## 一般指令模式\n\n\n| 按键 | Description |\n| ------ | ----------- |\n| h 或 向左方向鍵(←)   | 游標向左移動一個字元 |\n| j 或 向下方向鍵(↓) | 游標向下移動一個字元 |\n| k 或 向上方向鍵(↑)    | 游標向上移動一個字元 |\n| l 或 向右方向鍵(→)\t| 游標向右移動一個字元\t|\n| [Ctrl] + [f]\t| 螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用) |\n| [Ctrl] + [b]\t| 螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用) |\n| [Ctrl] + [d]\t| 螢幕『向下』移動半頁 |\n| [Ctrl] + [u]\t| 螢幕『向上』移動半頁 |\n| +\t| 游標移動到非空白字元的下一列\t|\n| -\t| 游標移動到非空白字元的上一列\t|\n| n&lt;space&gt;\t| 那個 n 表示『數字』，例如 20 。按下數字後再按空白鍵，游標會向右移動這一列的 n 個字元。例如 20&lt;space&gt; 則游標會向後面移動 20 個字元距離。\t|\n| 0 或功能鍵[Home] |\t這是數字『 0 』：移動到這一列的最前面字元處 (常用)\t|\n|$ 或功能鍵[End] | 移動到這一列的最後面字元處(常用)\t|\n| H\t| 游標移動到這個螢幕的最上方那一列的第一個字元\t|\n| M\t| 游標移動到這個螢幕的中央那一列的第一個字元\t|\n| L | 游標移動到這個螢幕的最下方那一列的第一個字元\t|\n| G\t| 移動到這個檔案的最後一列(常用)\t\t|\n| nG |\tn 為數字。移動到這個檔案的第 n 列。例如 20G 則會移動到這個檔案的第 20 列(可配合 :set nu) |\n| gg\t| 移動到這個檔案的第一列，相當於 1G 啊！ (常用) |\n| n<Enter>\t| n 為數字。游標向下移動 n 列(常用) |\n| /word\t | 向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用) |\n| ?word\t| 向游標之上尋找一個字串名稱為 word 的字串。例如要在檔案內搜尋 |\n| n\t | 這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！ |\n| N\t| 這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird。|\n| :n1,n2s/word1/word2/g\t| n1 與 n2 為數字。在第 n1 與 n2 列之間尋找 word1 這個字串，並將該字串取代為 word2 ！舉例來說，在 100 到 200 列之間搜尋 vbird 並取代為 VBIRD 則：\n|『:100,200s/vbird/VBIRD/g』。(常用)\t|\n| :1,$s/word1/word2/g\t| 從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！(常用)\t|\n| :1,$s/word1/word2/gc\t| 從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！且在取代前顯示提示字元給使用者確認 (confirm) 是否需要取代！(常用)\t|\n| x, X\t| 在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)\t|\n| nx\t| n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。|\n| dd\t| 刪除游標所在的那一整列(常用)|\n| ndd\t| n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)|\n| d1G\t| 刪除游標所在到第一列的所有資料|\n| dG\t| 刪除游標所在到最後一列的所有資料|\n| d$\t| 刪除游標所在處，到該列的最後一個字元|\n| d0\t| 那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元|\n| yy\t| 複製游標所在的那一列(常用)|\n| nyy\t| n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)|\n| y1G\t| 複製游標所在列到第一列的所有資料|\n| yG\t| 複製游標所在列到最後一列的所有資料|\n| y0\t| 複製游標所在的那個字元到該列行首的所有資料|\n| y$\t| 複製游標所在的那個字元到該列行尾的所有資料|\n| p, P\t| p 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)|\n| J\t| 將游標所在列與下一列的資料結合成同一列|\n| c\t| 重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]|\n| u\t| 復原前一個動作。(常用)|\n| [Ctrl]+r\t| 重做上一個動作。(常用)|\n| . | 重复上一个指令|\n\n## 编辑模式\n\n| 按键 | Description |\n| ------ | ----------- |\n|i, I\t| 進入插入模式(Insert mode)：i 為『從目前游標所在處插入』， I 為『在目前所在列的第一個非空白字元處開始插入』。 (常用)|\n| a, A\t| 進入插入模式(Insert mode)：a 為『從目前游標所在的下一個字元處開始插入』， A 為『從游標所在列的最後一個字元處開始插入』。(常用)|\n| o, O\t| 進入插入模式(Insert mode)：這是英文字母 o 的大小寫。o 為『在目前游標所在的下一列處插入新的一列』； O 為在目前游標所在處的上一列插入新的一列！(常用)|\n| r, R\t| 進入取代模式(Replace mode)：r 只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)|\n| [Esc]\t| 退出編輯模式，回到一般指令模式中(常用)|\n\n## 指令列模式\n\n| 按键 | Description |\n| ------ | ----------- |\n| :w\t| 將編輯的資料寫入硬碟檔案中(常用)|\n| :w!\t| 若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！|\n| :q\t| 離開 vi (常用)|\n| :q!\t| 若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。|\n| :wq\t| 儲存後離開，若為 :wq! 則為強制儲存後離開 (常用)|\n| ZZ\t| 這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！|\n| :w [filename]\t| 將編輯的資料儲存成另一個檔案（類似另存新檔）|\n| :r [filename]\t| 在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面|\n| :n1,n2 w [filename]\t| 將 n1 到 n2 的內容儲存成 filename 這個檔案。|\n| :! command\t| 暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！|\n| :set nu\t| 顯示行號，設定之後，會在每一列的字首顯示該列的行號|\n| :set nonu\t| 與 set nu 相反，為取消行號！|\n","source":"_posts/Vim-使用总结.md","raw":"---\ntitle: Vim 使用总结\ndate: 2016-10-17 14:52:17\ntags: vim\ncategories: 技术相关\n---\n\n# 三种模式\n\n## 一般指令模式\n\n直接打开 vim 就是一般指令模式了，在一般指令模式下，可以上下左右移动光标，翻页，跳转到指定的行，以及删除复制等等操作\n\n\n<!--more-->\n\n## 编辑模式\n\n通过在一般指令模式下键入`i,I,o,O,a,A,r,R`等字母进入编辑模式，编辑模式下可以进行文本的输入和修改，通过键入`Esc`推出编辑模式重新回到一般指令模式。\n\n## 指令列命令模式\n\n在一般指令模式中键入`:/?`三个中的任意一个进入指令列模式。进入指令列模式中可以搜索，大量字符替换等等操作。\n\n\n{% qnimg centos7_vi-mode.gif title:\"vim 三种模式之间的关系\" %}\n\n# Cheatsheet\n\n## 一般指令模式\n\n\n| 按键 | Description |\n| ------ | ----------- |\n| h 或 向左方向鍵(←)   | 游標向左移動一個字元 |\n| j 或 向下方向鍵(↓) | 游標向下移動一個字元 |\n| k 或 向上方向鍵(↑)    | 游標向上移動一個字元 |\n| l 或 向右方向鍵(→)\t| 游標向右移動一個字元\t|\n| [Ctrl] + [f]\t| 螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用) |\n| [Ctrl] + [b]\t| 螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用) |\n| [Ctrl] + [d]\t| 螢幕『向下』移動半頁 |\n| [Ctrl] + [u]\t| 螢幕『向上』移動半頁 |\n| +\t| 游標移動到非空白字元的下一列\t|\n| -\t| 游標移動到非空白字元的上一列\t|\n| n&lt;space&gt;\t| 那個 n 表示『數字』，例如 20 。按下數字後再按空白鍵，游標會向右移動這一列的 n 個字元。例如 20&lt;space&gt; 則游標會向後面移動 20 個字元距離。\t|\n| 0 或功能鍵[Home] |\t這是數字『 0 』：移動到這一列的最前面字元處 (常用)\t|\n|$ 或功能鍵[End] | 移動到這一列的最後面字元處(常用)\t|\n| H\t| 游標移動到這個螢幕的最上方那一列的第一個字元\t|\n| M\t| 游標移動到這個螢幕的中央那一列的第一個字元\t|\n| L | 游標移動到這個螢幕的最下方那一列的第一個字元\t|\n| G\t| 移動到這個檔案的最後一列(常用)\t\t|\n| nG |\tn 為數字。移動到這個檔案的第 n 列。例如 20G 則會移動到這個檔案的第 20 列(可配合 :set nu) |\n| gg\t| 移動到這個檔案的第一列，相當於 1G 啊！ (常用) |\n| n<Enter>\t| n 為數字。游標向下移動 n 列(常用) |\n| /word\t | 向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用) |\n| ?word\t| 向游標之上尋找一個字串名稱為 word 的字串。例如要在檔案內搜尋 |\n| n\t | 這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！ |\n| N\t| 這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird。|\n| :n1,n2s/word1/word2/g\t| n1 與 n2 為數字。在第 n1 與 n2 列之間尋找 word1 這個字串，並將該字串取代為 word2 ！舉例來說，在 100 到 200 列之間搜尋 vbird 並取代為 VBIRD 則：\n|『:100,200s/vbird/VBIRD/g』。(常用)\t|\n| :1,$s/word1/word2/g\t| 從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！(常用)\t|\n| :1,$s/word1/word2/gc\t| 從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！且在取代前顯示提示字元給使用者確認 (confirm) 是否需要取代！(常用)\t|\n| x, X\t| 在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)\t|\n| nx\t| n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。|\n| dd\t| 刪除游標所在的那一整列(常用)|\n| ndd\t| n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)|\n| d1G\t| 刪除游標所在到第一列的所有資料|\n| dG\t| 刪除游標所在到最後一列的所有資料|\n| d$\t| 刪除游標所在處，到該列的最後一個字元|\n| d0\t| 那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元|\n| yy\t| 複製游標所在的那一列(常用)|\n| nyy\t| n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)|\n| y1G\t| 複製游標所在列到第一列的所有資料|\n| yG\t| 複製游標所在列到最後一列的所有資料|\n| y0\t| 複製游標所在的那個字元到該列行首的所有資料|\n| y$\t| 複製游標所在的那個字元到該列行尾的所有資料|\n| p, P\t| p 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)|\n| J\t| 將游標所在列與下一列的資料結合成同一列|\n| c\t| 重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]|\n| u\t| 復原前一個動作。(常用)|\n| [Ctrl]+r\t| 重做上一個動作。(常用)|\n| . | 重复上一个指令|\n\n## 编辑模式\n\n| 按键 | Description |\n| ------ | ----------- |\n|i, I\t| 進入插入模式(Insert mode)：i 為『從目前游標所在處插入』， I 為『在目前所在列的第一個非空白字元處開始插入』。 (常用)|\n| a, A\t| 進入插入模式(Insert mode)：a 為『從目前游標所在的下一個字元處開始插入』， A 為『從游標所在列的最後一個字元處開始插入』。(常用)|\n| o, O\t| 進入插入模式(Insert mode)：這是英文字母 o 的大小寫。o 為『在目前游標所在的下一列處插入新的一列』； O 為在目前游標所在處的上一列插入新的一列！(常用)|\n| r, R\t| 進入取代模式(Replace mode)：r 只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)|\n| [Esc]\t| 退出編輯模式，回到一般指令模式中(常用)|\n\n## 指令列模式\n\n| 按键 | Description |\n| ------ | ----------- |\n| :w\t| 將編輯的資料寫入硬碟檔案中(常用)|\n| :w!\t| 若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！|\n| :q\t| 離開 vi (常用)|\n| :q!\t| 若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。|\n| :wq\t| 儲存後離開，若為 :wq! 則為強制儲存後離開 (常用)|\n| ZZ\t| 這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！|\n| :w [filename]\t| 將編輯的資料儲存成另一個檔案（類似另存新檔）|\n| :r [filename]\t| 在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面|\n| :n1,n2 w [filename]\t| 將 n1 到 n2 的內容儲存成 filename 這個檔案。|\n| :! command\t| 暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！|\n| :set nu\t| 顯示行號，設定之後，會在每一列的字首顯示該列的行號|\n| :set nonu\t| 與 set nu 相反，為取消行號！|\n","slug":"Vim-使用总结","published":1,"updated":"2016-10-17T09:13:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55uv001ik4rnkegme8ct","content":"<h1 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h1><h2 id=\"一般指令模式\"><a href=\"#一般指令模式\" class=\"headerlink\" title=\"一般指令模式\"></a>一般指令模式</h2><p>直接打开 vim 就是一般指令模式了，在一般指令模式下，可以上下左右移动光标，翻页，跳转到指定的行，以及删除复制等等操作</p>\n<a id=\"more\"></a>\n<h2 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h2><p>通过在一般指令模式下键入<code>i,I,o,O,a,A,r,R</code>等字母进入编辑模式，编辑模式下可以进行文本的输入和修改，通过键入<code>Esc</code>推出编辑模式重新回到一般指令模式。</p>\n<h2 id=\"指令列命令模式\"><a href=\"#指令列命令模式\" class=\"headerlink\" title=\"指令列命令模式\"></a>指令列命令模式</h2><p>在一般指令模式中键入<code>:/?</code>三个中的任意一个进入指令列模式。进入指令列模式中可以搜索，大量字符替换等等操作。</p>\n<img title=\"vim 三种模式之间的关系\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/centos7_vi-mode.gif\">\n<h1 id=\"Cheatsheet\"><a href=\"#Cheatsheet\" class=\"headerlink\" title=\"Cheatsheet\"></a>Cheatsheet</h1><h2 id=\"一般指令模式-1\"><a href=\"#一般指令模式-1\" class=\"headerlink\" title=\"一般指令模式\"></a>一般指令模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h 或 向左方向鍵(←)</td>\n<td>游標向左移動一個字元</td>\n</tr>\n<tr>\n<td>j 或 向下方向鍵(↓)</td>\n<td>游標向下移動一個字元</td>\n</tr>\n<tr>\n<td>k 或 向上方向鍵(↑)</td>\n<td>游標向上移動一個字元</td>\n</tr>\n<tr>\n<td>l 或 向右方向鍵(→)</td>\n<td>游標向右移動一個字元</td>\n</tr>\n<tr>\n<td>[Ctrl] + [f]</td>\n<td>螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)</td>\n</tr>\n<tr>\n<td>[Ctrl] + [b]</td>\n<td>螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)</td>\n</tr>\n<tr>\n<td>[Ctrl] + [d]</td>\n<td>螢幕『向下』移動半頁</td>\n</tr>\n<tr>\n<td>[Ctrl] + [u]</td>\n<td>螢幕『向上』移動半頁</td>\n</tr>\n<tr>\n<td>+</td>\n<td>游標移動到非空白字元的下一列</td>\n</tr>\n<tr>\n<td>-</td>\n<td>游標移動到非空白字元的上一列</td>\n</tr>\n<tr>\n<td>n&lt;space&gt;</td>\n<td>那個 n 表示『數字』，例如 20 。按下數字後再按空白鍵，游標會向右移動這一列的 n 個字元。例如 20&lt;space&gt; 則游標會向後面移動 20 個字元距離。</td>\n</tr>\n<tr>\n<td>0 或功能鍵[Home]</td>\n<td>這是數字『 0 』：移動到這一列的最前面字元處 (常用)</td>\n</tr>\n<tr>\n<td>$ 或功能鍵[End]</td>\n<td>移動到這一列的最後面字元處(常用)</td>\n</tr>\n<tr>\n<td>H</td>\n<td>游標移動到這個螢幕的最上方那一列的第一個字元</td>\n</tr>\n<tr>\n<td>M</td>\n<td>游標移動到這個螢幕的中央那一列的第一個字元</td>\n</tr>\n<tr>\n<td>L</td>\n<td>游標移動到這個螢幕的最下方那一列的第一個字元</td>\n</tr>\n<tr>\n<td>G</td>\n<td>移動到這個檔案的最後一列(常用)</td>\n</tr>\n<tr>\n<td>nG</td>\n<td>n 為數字。移動到這個檔案的第 n 列。例如 20G 則會移動到這個檔案的第 20 列(可配合 :set nu)</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>移動到這個檔案的第一列，相當於 1G 啊！ (常用)</td>\n</tr>\n<tr>\n<td>n<enter></enter></td>\n<td>n 為數字。游標向下移動 n 列(常用)</td>\n</tr>\n<tr>\n<td>/word</td>\n<td>向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)</td>\n</tr>\n<tr>\n<td>?word</td>\n<td>向游標之上尋找一個字串名稱為 word 的字串。例如要在檔案內搜尋</td>\n</tr>\n<tr>\n<td>n</td>\n<td>這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！</td>\n</tr>\n<tr>\n<td>N</td>\n<td>這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird。</td>\n</tr>\n<tr>\n<td>:n1,n2s/word1/word2/g</td>\n<td>n1 與 n2 為數字。在第 n1 與 n2 列之間尋找 word1 這個字串，並將該字串取代為 word2 ！舉例來說，在 100 到 200 列之間搜尋 vbird 並取代為 VBIRD 則：</td>\n</tr>\n<tr>\n<td>『:100,200s/vbird/VBIRD/g』。(常用)</td>\n</tr>\n<tr>\n<td>:1,$s/word1/word2/g</td>\n<td>從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！(常用)</td>\n</tr>\n<tr>\n<td>:1,$s/word1/word2/gc</td>\n<td>從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！且在取代前顯示提示字元給使用者確認 (confirm) 是否需要取代！(常用)</td>\n</tr>\n<tr>\n<td>x, X</td>\n<td>在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)</td>\n</tr>\n<tr>\n<td>nx</td>\n<td>n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>刪除游標所在的那一整列(常用)</td>\n</tr>\n<tr>\n<td>ndd</td>\n<td>n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)</td>\n</tr>\n<tr>\n<td>d1G</td>\n<td>刪除游標所在到第一列的所有資料</td>\n</tr>\n<tr>\n<td>dG</td>\n<td>刪除游標所在到最後一列的所有資料</td>\n</tr>\n<tr>\n<td>d$</td>\n<td>刪除游標所在處，到該列的最後一個字元</td>\n</tr>\n<tr>\n<td>d0</td>\n<td>那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>複製游標所在的那一列(常用)</td>\n</tr>\n<tr>\n<td>nyy</td>\n<td>n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)</td>\n</tr>\n<tr>\n<td>y1G</td>\n<td>複製游標所在列到第一列的所有資料</td>\n</tr>\n<tr>\n<td>yG</td>\n<td>複製游標所在列到最後一列的所有資料</td>\n</tr>\n<tr>\n<td>y0</td>\n<td>複製游標所在的那個字元到該列行首的所有資料</td>\n</tr>\n<tr>\n<td>y$</td>\n<td>複製游標所在的那個字元到該列行尾的所有資料</td>\n</tr>\n<tr>\n<td>p, P</td>\n<td>p 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)</td>\n</tr>\n<tr>\n<td>J</td>\n<td>將游標所在列與下一列的資料結合成同一列</td>\n</tr>\n<tr>\n<td>c</td>\n<td>重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]</td>\n</tr>\n<tr>\n<td>u</td>\n<td>復原前一個動作。(常用)</td>\n</tr>\n<tr>\n<td>[Ctrl]+r</td>\n<td>重做上一個動作。(常用)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>重复上一个指令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编辑模式-1\"><a href=\"#编辑模式-1\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i, I</td>\n<td>進入插入模式(Insert mode)：i 為『從目前游標所在處插入』， I 為『在目前所在列的第一個非空白字元處開始插入』。 (常用)</td>\n</tr>\n<tr>\n<td>a, A</td>\n<td>進入插入模式(Insert mode)：a 為『從目前游標所在的下一個字元處開始插入』， A 為『從游標所在列的最後一個字元處開始插入』。(常用)</td>\n</tr>\n<tr>\n<td>o, O</td>\n<td>進入插入模式(Insert mode)：這是英文字母 o 的大小寫。o 為『在目前游標所在的下一列處插入新的一列』； O 為在目前游標所在處的上一列插入新的一列！(常用)</td>\n</tr>\n<tr>\n<td>r, R</td>\n<td>進入取代模式(Replace mode)：r 只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)</td>\n</tr>\n<tr>\n<td>[Esc]</td>\n<td>退出編輯模式，回到一般指令模式中(常用)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"指令列模式\"><a href=\"#指令列模式\" class=\"headerlink\" title=\"指令列模式\"></a>指令列模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:w</td>\n<td>將編輯的資料寫入硬碟檔案中(常用)</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>離開 vi (常用)</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>儲存後離開，若為 :wq! 則為強制儲存後離開 (常用)</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td>這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！</td>\n</tr>\n<tr>\n<td>:w [filename]</td>\n<td>將編輯的資料儲存成另一個檔案（類似另存新檔）</td>\n</tr>\n<tr>\n<td>:r [filename]</td>\n<td>在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面</td>\n</tr>\n<tr>\n<td>:n1,n2 w [filename]</td>\n<td>將 n1 到 n2 的內容儲存成 filename 這個檔案。</td>\n</tr>\n<tr>\n<td>:! command</td>\n<td>暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>顯示行號，設定之後，會在每一列的字首顯示該列的行號</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>與 set nu 相反，為取消行號！</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h1 id=\"三种模式\"><a href=\"#三种模式\" class=\"headerlink\" title=\"三种模式\"></a>三种模式</h1><h2 id=\"一般指令模式\"><a href=\"#一般指令模式\" class=\"headerlink\" title=\"一般指令模式\"></a>一般指令模式</h2><p>直接打开 vim 就是一般指令模式了，在一般指令模式下，可以上下左右移动光标，翻页，跳转到指定的行，以及删除复制等等操作</p>","more":"<h2 id=\"编辑模式\"><a href=\"#编辑模式\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h2><p>通过在一般指令模式下键入<code>i,I,o,O,a,A,r,R</code>等字母进入编辑模式，编辑模式下可以进行文本的输入和修改，通过键入<code>Esc</code>推出编辑模式重新回到一般指令模式。</p>\n<h2 id=\"指令列命令模式\"><a href=\"#指令列命令模式\" class=\"headerlink\" title=\"指令列命令模式\"></a>指令列命令模式</h2><p>在一般指令模式中键入<code>:/?</code>三个中的任意一个进入指令列模式。进入指令列模式中可以搜索，大量字符替换等等操作。</p>\n<img title=\"vim 三种模式之间的关系\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/centos7_vi-mode.gif\">\n<h1 id=\"Cheatsheet\"><a href=\"#Cheatsheet\" class=\"headerlink\" title=\"Cheatsheet\"></a>Cheatsheet</h1><h2 id=\"一般指令模式-1\"><a href=\"#一般指令模式-1\" class=\"headerlink\" title=\"一般指令模式\"></a>一般指令模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>h 或 向左方向鍵(←)</td>\n<td>游標向左移動一個字元</td>\n</tr>\n<tr>\n<td>j 或 向下方向鍵(↓)</td>\n<td>游標向下移動一個字元</td>\n</tr>\n<tr>\n<td>k 或 向上方向鍵(↑)</td>\n<td>游標向上移動一個字元</td>\n</tr>\n<tr>\n<td>l 或 向右方向鍵(→)</td>\n<td>游標向右移動一個字元</td>\n</tr>\n<tr>\n<td>[Ctrl] + [f]</td>\n<td>螢幕『向下』移動一頁，相當於 [Page Down]按鍵 (常用)</td>\n</tr>\n<tr>\n<td>[Ctrl] + [b]</td>\n<td>螢幕『向上』移動一頁，相當於 [Page Up] 按鍵 (常用)</td>\n</tr>\n<tr>\n<td>[Ctrl] + [d]</td>\n<td>螢幕『向下』移動半頁</td>\n</tr>\n<tr>\n<td>[Ctrl] + [u]</td>\n<td>螢幕『向上』移動半頁</td>\n</tr>\n<tr>\n<td>+</td>\n<td>游標移動到非空白字元的下一列</td>\n</tr>\n<tr>\n<td>-</td>\n<td>游標移動到非空白字元的上一列</td>\n</tr>\n<tr>\n<td>n&lt;space&gt;</td>\n<td>那個 n 表示『數字』，例如 20 。按下數字後再按空白鍵，游標會向右移動這一列的 n 個字元。例如 20&lt;space&gt; 則游標會向後面移動 20 個字元距離。</td>\n</tr>\n<tr>\n<td>0 或功能鍵[Home]</td>\n<td>這是數字『 0 』：移動到這一列的最前面字元處 (常用)</td>\n</tr>\n<tr>\n<td>$ 或功能鍵[End]</td>\n<td>移動到這一列的最後面字元處(常用)</td>\n</tr>\n<tr>\n<td>H</td>\n<td>游標移動到這個螢幕的最上方那一列的第一個字元</td>\n</tr>\n<tr>\n<td>M</td>\n<td>游標移動到這個螢幕的中央那一列的第一個字元</td>\n</tr>\n<tr>\n<td>L</td>\n<td>游標移動到這個螢幕的最下方那一列的第一個字元</td>\n</tr>\n<tr>\n<td>G</td>\n<td>移動到這個檔案的最後一列(常用)</td>\n</tr>\n<tr>\n<td>nG</td>\n<td>n 為數字。移動到這個檔案的第 n 列。例如 20G 則會移動到這個檔案的第 20 列(可配合 :set nu)</td>\n</tr>\n<tr>\n<td>gg</td>\n<td>移動到這個檔案的第一列，相當於 1G 啊！ (常用)</td>\n</tr>\n<tr>\n<td>n<Enter></td>\n<td>n 為數字。游標向下移動 n 列(常用)</td>\n</tr>\n<tr>\n<td>/word</td>\n<td>向游標之下尋找一個名稱為 word 的字串。例如要在檔案內搜尋 vbird 這個字串，就輸入 /vbird 即可！ (常用)</td>\n</tr>\n<tr>\n<td>?word</td>\n<td>向游標之上尋找一個字串名稱為 word 的字串。例如要在檔案內搜尋</td>\n</tr>\n<tr>\n<td>n</td>\n<td>這個 n 是英文按鍵。代表『重複前一個搜尋的動作』。舉例來說， 如果剛剛我們執行 /vbird 去向下搜尋 vbird 這個字串，則按下 n 後，會向下繼續搜尋下一個名稱為 vbird 的字串。如果是執行 ?vbird 的話，那麼按下 n 則會向上繼續搜尋名稱為 vbird 的字串！</td>\n</tr>\n<tr>\n<td>N</td>\n<td>這個 N 是英文按鍵。與 n 剛好相反，為『反向』進行前一個搜尋動作。 例如 /vbird 後，按下 N 則表示『向上』搜尋 vbird。</td>\n</tr>\n<tr>\n<td>:n1,n2s/word1/word2/g</td>\n<td>n1 與 n2 為數字。在第 n1 與 n2 列之間尋找 word1 這個字串，並將該字串取代為 word2 ！舉例來說，在 100 到 200 列之間搜尋 vbird 並取代為 VBIRD 則：</td>\n</tr>\n<tr>\n<td>『:100,200s/vbird/VBIRD/g』。(常用)</td>\n</tr>\n<tr>\n<td>:1,$s/word1/word2/g</td>\n<td>從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！(常用)</td>\n</tr>\n<tr>\n<td>:1,$s/word1/word2/gc</td>\n<td>從第一列到最後一列尋找 word1 字串，並將該字串取代為 word2 ！且在取代前顯示提示字元給使用者確認 (confirm) 是否需要取代！(常用)</td>\n</tr>\n<tr>\n<td>x, X</td>\n<td>在一列字當中，x 為向後刪除一個字元 (相當於 [del] 按鍵)， X 為向前刪除一個字元(相當於 [backspace] 亦即是倒退鍵) (常用)</td>\n</tr>\n<tr>\n<td>nx</td>\n<td>n 為數字，連續向後刪除 n 個字元。舉例來說，我要連續刪除 10 個字元， 『10x』。</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>刪除游標所在的那一整列(常用)</td>\n</tr>\n<tr>\n<td>ndd</td>\n<td>n 為數字。刪除游標所在的向下 n 列，例如 20dd 則是刪除 20 列 (常用)</td>\n</tr>\n<tr>\n<td>d1G</td>\n<td>刪除游標所在到第一列的所有資料</td>\n</tr>\n<tr>\n<td>dG</td>\n<td>刪除游標所在到最後一列的所有資料</td>\n</tr>\n<tr>\n<td>d$</td>\n<td>刪除游標所在處，到該列的最後一個字元</td>\n</tr>\n<tr>\n<td>d0</td>\n<td>那個是數字的 0 ，刪除游標所在處，到該列的最前面一個字元</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>複製游標所在的那一列(常用)</td>\n</tr>\n<tr>\n<td>nyy</td>\n<td>n 為數字。複製游標所在的向下 n 列，例如 20yy 則是複製 20 列(常用)</td>\n</tr>\n<tr>\n<td>y1G</td>\n<td>複製游標所在列到第一列的所有資料</td>\n</tr>\n<tr>\n<td>yG</td>\n<td>複製游標所在列到最後一列的所有資料</td>\n</tr>\n<tr>\n<td>y0</td>\n<td>複製游標所在的那個字元到該列行首的所有資料</td>\n</tr>\n<tr>\n<td>y$</td>\n<td>複製游標所在的那個字元到該列行尾的所有資料</td>\n</tr>\n<tr>\n<td>p, P</td>\n<td>p 為將已複製的資料在游標下一列貼上，P 則為貼在游標上一列！ 舉例來說，我目前游標在第 20 列，且已經複製了 10 列資料。則按下 p 後， 那 10 列資料會貼在原本的 20 列之後，亦即由 21 列開始貼。但如果是按下 P 呢？ 那麼原本的第 20 列會被推到變成 30 列。 (常用)</td>\n</tr>\n<tr>\n<td>J</td>\n<td>將游標所在列與下一列的資料結合成同一列</td>\n</tr>\n<tr>\n<td>c</td>\n<td>重複刪除多個資料，例如向下刪除 10 列，[ 10cj ]</td>\n</tr>\n<tr>\n<td>u</td>\n<td>復原前一個動作。(常用)</td>\n</tr>\n<tr>\n<td>[Ctrl]+r</td>\n<td>重做上一個動作。(常用)</td>\n</tr>\n<tr>\n<td>.</td>\n<td>重复上一个指令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编辑模式-1\"><a href=\"#编辑模式-1\" class=\"headerlink\" title=\"编辑模式\"></a>编辑模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i, I</td>\n<td>進入插入模式(Insert mode)：i 為『從目前游標所在處插入』， I 為『在目前所在列的第一個非空白字元處開始插入』。 (常用)</td>\n</tr>\n<tr>\n<td>a, A</td>\n<td>進入插入模式(Insert mode)：a 為『從目前游標所在的下一個字元處開始插入』， A 為『從游標所在列的最後一個字元處開始插入』。(常用)</td>\n</tr>\n<tr>\n<td>o, O</td>\n<td>進入插入模式(Insert mode)：這是英文字母 o 的大小寫。o 為『在目前游標所在的下一列處插入新的一列』； O 為在目前游標所在處的上一列插入新的一列！(常用)</td>\n</tr>\n<tr>\n<td>r, R</td>\n<td>進入取代模式(Replace mode)：r 只會取代游標所在的那一個字元一次；R會一直取代游標所在的文字，直到按下 ESC 為止；(常用)</td>\n</tr>\n<tr>\n<td>[Esc]</td>\n<td>退出編輯模式，回到一般指令模式中(常用)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"指令列模式\"><a href=\"#指令列模式\" class=\"headerlink\" title=\"指令列模式\"></a>指令列模式</h2><table>\n<thead>\n<tr>\n<th>按键</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:w</td>\n<td>將編輯的資料寫入硬碟檔案中(常用)</td>\n</tr>\n<tr>\n<td>:w!</td>\n<td>若檔案屬性為『唯讀』時，強制寫入該檔案。不過，到底能不能寫入， 還是跟你對該檔案的檔案權限有關啊！</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>離開 vi (常用)</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>若曾修改過檔案，又不想儲存，使用 ! 為強制離開不儲存檔案。</td>\n</tr>\n<tr>\n<td>:wq</td>\n<td>儲存後離開，若為 :wq! 則為強制儲存後離開 (常用)</td>\n</tr>\n<tr>\n<td>ZZ</td>\n<td>這是大寫的 Z 喔！若檔案沒有更動，則不儲存離開，若檔案已經被更動過，則儲存後離開！</td>\n</tr>\n<tr>\n<td>:w [filename]</td>\n<td>將編輯的資料儲存成另一個檔案（類似另存新檔）</td>\n</tr>\n<tr>\n<td>:r [filename]</td>\n<td>在編輯的資料中，讀入另一個檔案的資料。亦即將 『filename』 這個檔案內容加到游標所在列後面</td>\n</tr>\n<tr>\n<td>:n1,n2 w [filename]</td>\n<td>將 n1 到 n2 的內容儲存成 filename 這個檔案。</td>\n</tr>\n<tr>\n<td>:! command</td>\n<td>暫時離開 vi 到指令列模式下執行 command 的顯示結果！例如『:! ls /home』即可在 vi 當中察看 /home 底下以 ls 輸出的檔案資訊！</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>顯示行號，設定之後，會在每一列的字首顯示該列的行號</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>與 set nu 相反，為取消行號！</td>\n</tr>\n</tbody>\n</table>"},{"title":"pip install psycopg2 error fix(Mac)","date":"2016-11-21T14:28:35.000Z","_content":"\n最近将开发环境迁移到 virtualenvwrapper 上，需要重新安装项目依赖。由于后台数据库使用的是 Postgresql，需要安装响应的 python 驱动模块 psycopg2，安装时系统反馈了如下错误\n\n```\nld: library not found for -lssl\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n'cc' failed with exit status 1\n```\n\nGoogle 了好久发现是升级 Xcode 的时候系统自动删除了 command line tools。\n\n**解决办法**\n\n`xcode-select --install`\n\n之后再运行\n\n`pip install psycopg2` 就不会报错了","source":"_posts/pip-install-psycopg2-error-fix.md","raw":"---\ntitle: pip install psycopg2 error fix(Mac)\ndate: 2016-11-21 22:28:35\ntags: python\ncategories: 技术相关\n---\n\n最近将开发环境迁移到 virtualenvwrapper 上，需要重新安装项目依赖。由于后台数据库使用的是 Postgresql，需要安装响应的 python 驱动模块 psycopg2，安装时系统反馈了如下错误\n\n```\nld: library not found for -lssl\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n'cc' failed with exit status 1\n```\n\nGoogle 了好久发现是升级 Xcode 的时候系统自动删除了 command line tools。\n\n**解决办法**\n\n`xcode-select --install`\n\n之后再运行\n\n`pip install psycopg2` 就不会报错了","slug":"pip-install-psycopg2-error-fix","published":1,"updated":"2016-11-21T14:44:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55ux001jk4rnog3kra8a","content":"<p>最近将开发环境迁移到 virtualenvwrapper 上，需要重新安装项目依赖。由于后台数据库使用的是 Postgresql，需要安装响应的 python 驱动模块 psycopg2，安装时系统反馈了如下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ld: library not found for -lssl</div><div class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div><div class=\"line\">&apos;cc&apos; failed with exit status 1</div></pre></td></tr></table></figure>\n<p>Google 了好久发现是升级 Xcode 的时候系统自动删除了 command line tools。</p>\n<p><strong>解决办法</strong></p>\n<p><code>xcode-select --install</code></p>\n<p>之后再运行</p>\n<p><code>pip install psycopg2</code> 就不会报错了</p>\n","excerpt":"","more":"<p>最近将开发环境迁移到 virtualenvwrapper 上，需要重新安装项目依赖。由于后台数据库使用的是 Postgresql，需要安装响应的 python 驱动模块 psycopg2，安装时系统反馈了如下错误</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ld: library not found for -lssl</div><div class=\"line\">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div><div class=\"line\">&apos;cc&apos; failed with exit status 1</div></pre></td></tr></table></figure>\n<p>Google 了好久发现是升级 Xcode 的时候系统自动删除了 command line tools。</p>\n<p><strong>解决办法</strong></p>\n<p><code>xcode-select --install</code></p>\n<p>之后再运行</p>\n<p><code>pip install psycopg2</code> 就不会报错了</p>\n"},{"title":"Scrapy 框架简介","date":"2016-03-31T07:29:07.000Z","_content":"\n# Scrapy 是？\n\nScrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。\n\n# Scrapy 安装\n\n以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：\n\t\n\tPython2.7\n\tpip 和 setuptools 包\n\tlxml. \n\tOpenSSL\n\t\n<!-- more -->\n你可以通过 pip 来进行安装。\n\n\tpip install scrapy\n\nPS: Mac OS X上需要安装 Xcode development tools.\n\n\txcode-select --install\n\n\n# Scrapy Tutorial\n\n这个教程将会涵盖以下内容：\n\n1. 创建一个 Scrapy 项目\n2. 定义你需要抓去的 Item\n3. 写一个爬虫去爬取一个网站并且提取出你的 Item\n4. 写一个 Item Pipeline 去存取数据\n\n我们爬取的目标是这个网站[Open directory project (dmoz)](http://www.dmoz.org/)\n\n## 创建 Scrapy 项目\n\n运行以下命令：\n\n\tscrapy startproject tutorial\n\n这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：\n\n\ttutorial/\n    scrapy.cfg            # deploy configuration file\n\n    tutorial/             # project's Python module, you'll import your code from here\n        __init__.py\n\n        items.py          # project items file\n\n        pipelines.py      # project pipelines file\n\n        settings.py       # project settings file\n\n        spiders/          # a directory where you'll later put your spiders\n            __init__.py\n            ...\n\n\n## 定义 Item\n\nItem 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。\n\n通过创建 `scrapy.Item` 类和相应的 `srapy.Field` 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。\n\n在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：\n\n```py\t\nimport scrapy\n\nclass DmozItem(scrapy.Item):\n\ttitle = scrapy.Field()\n\tlink = scrapy.Field()\n\tdesc = scrapy.Field()\n```\n\n## 第一个 Spider\n\nSpider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。\n\n创建一个 Spider 需要继承 `scrapy.Spider` 类，以下是类中定义的属性：\n\n* `name`: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider\n* `start_urls`: 一个包含开始爬取 URL 的列表\n* `parse()`: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL\n\n本教程中，在`tutorial/spiders`目录下保存`dmoz_spider.py` 作为第一个 spider 内容如下：\n\n```py\t\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\n\tname = \"dmoz\"\n\tallowed_domains = [\"dmoz.org\"]\n\tstart_urls = [\n    \t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n   \t\t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n\t]\n\ndef parse(self, response):\n    filename = response.url.split(\"/\")[-2] + '.html'\n    with open(filename, 'wb') as f:\n        f.write(response.body)\n```\n\n### 爬取\n\n返回项目跟目录，运行：\n\n\tscrapy crawl dmoz\n\n这个命令会启动名字为`dmoz`的爬虫，就是我们刚刚写的。会有如下输出\n\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n\t2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/> (referer: None)\t\n\t2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/> (referer: None)\n\t2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n\n### 提取Items\n\n#### Selector\n\nScrapy Selector 使用两种机制 [CSS](https://www.w3.org/TR/selectors/) 和 [XPath](https://www.w3.org/TR/xpath/) 进行数据解析。\n更多信息参考 []Selector documentation](http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors)\n\n#### 在 Shell 里面尝试 Selector\n\n运行以下命令：\n\n\tscrapy shell \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"\n\n然后就可以尝试查看 response 的各种属性了\n\n\tIn [1]: response.xpath('//title')\n\tOut[1]: [<Selector xpath='//title' data=u'<title>Open Directory - Computers: Progr'>]\n\n\tIn [2]: response.xpath('//title').extract()\n\tOut[2]: [u'<title>Open Directory - Computers: Programming: Languages: Python: Books</title>']\n\n\tIn [3]: response.xpath('//title/text()')\n\tOut[3]: [<Selector xpath='//title/text()' data=u'Open Directory - Computers: Programming:'>]\n\n\tIn [4]: response.xpath('//title/text()').extract()\n\tOut[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']\n\n\tIn [5]: response.xpath('//title/text()').re('(\\w+):')\n\tOut[5]: [u'Computers', u'Programming', u'Languages', u'Python']\n\t\n#### 提取数据\n\n现在我们来提取一些真正的信息吧\n\n通过查看`response.body` 我们发现需要的信息在<ul>标签里面，\n\n在我们的 spider 里面加入以下代码：\n\n```py\t\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n]\n\ndef parse(self, response):\n    for sel in response.xpath('//ul/li'):\n        title = sel.xpath('a/text()').extract()\n        link = sel.xpath('a/@href').extract()\n        desc = sel.xpath('text()').extract()\n        print title, link, desc\n```\n\n### 使用我们的Item\n\nItem objects 是一个 Python 字典，你可以像使用字典那样使用它。\n\n\t>>> item = DmozItem()\n\t>>> item['title'] = 'Example title'\n\t>>> item['title']\n\t'Example title'\n\n我们修改 spider 的代码：\n\n```py\nimport scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n]\n\ndef parse(self, response):\n    for sel in response.xpath('//ul/li'):\n        item = DmozItem()\n        item['title'] = sel.xpath('a/text()').extract()\n        item['link'] = sel.xpath('a/@href').extract()\n        item['desc'] = sel.xpath('text()').extract()\n        yield item\n```\n\n现在运行代码会得到`DmozItem` objects:\n\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n      'link': [u'http://gnosis.cx/TPiP/'],\n      'title': [u'Text Processing in Python']}\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n'],\n      'link': [u'http://www.informit.com/store/product.aspx?isbn=0130211192'],\n      'title': [u'XML Processing with Python']}\n\n## Following links\n\n仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。\n这里修改我们的代码：\n\n```py\nimport scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/\",\n]\n\ndef parse(self, response):\n    for href in response.css(\"ul.directory.dir-col > li > a::attr('href')\"):\n        url = response.urljoin(href.extract())\n        yield scrapy.Request(url, callback=self.parse_dir_contents)\n\ndef parse_dir_contents(self, response):\n    for sel in response.xpath('//ul/li'):\n        item = DmozItem()\n        item['title'] = sel.xpath('a/text()').extract()\n        item['link'] = sel.xpath('a/@href').extract()\n        item['desc'] = sel.xpath('text()').extract()\n        yield item\n```\n\n现在 *parse()* 方法仅仅提取我们需要的URL，再用 *response.urljoin* 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 *parse_dir_contents()* callback 函数， 作为实际的内容提取。\n\nScrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。\n\n通过这个机制我们可以编写更为复杂的爬虫。\n\n## 存储爬取的数据\n\n最简单的方式是用 [Feed exports](http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports)，通过下面的命令：\n\n\tscrapy crawl dmoz -o items.json\n\t\n这会生成一个名为`item.json`的文件，存储了我们抓取的数据，存储格式为JSON。\n小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 [Item Pipeline](http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline)\n\n\n\t\n","source":"_posts/Scrapy-框架简介.md","raw":"---\ntitle: Scrapy 框架简介\ndate: 2016-03-31 15:29:07\ntags:\n\t- Scrapy\ncategories: \n\t- 技术相关\n---\n\n# Scrapy 是？\n\nScrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。\n\n# Scrapy 安装\n\n以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：\n\t\n\tPython2.7\n\tpip 和 setuptools 包\n\tlxml. \n\tOpenSSL\n\t\n<!-- more -->\n你可以通过 pip 来进行安装。\n\n\tpip install scrapy\n\nPS: Mac OS X上需要安装 Xcode development tools.\n\n\txcode-select --install\n\n\n# Scrapy Tutorial\n\n这个教程将会涵盖以下内容：\n\n1. 创建一个 Scrapy 项目\n2. 定义你需要抓去的 Item\n3. 写一个爬虫去爬取一个网站并且提取出你的 Item\n4. 写一个 Item Pipeline 去存取数据\n\n我们爬取的目标是这个网站[Open directory project (dmoz)](http://www.dmoz.org/)\n\n## 创建 Scrapy 项目\n\n运行以下命令：\n\n\tscrapy startproject tutorial\n\n这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：\n\n\ttutorial/\n    scrapy.cfg            # deploy configuration file\n\n    tutorial/             # project's Python module, you'll import your code from here\n        __init__.py\n\n        items.py          # project items file\n\n        pipelines.py      # project pipelines file\n\n        settings.py       # project settings file\n\n        spiders/          # a directory where you'll later put your spiders\n            __init__.py\n            ...\n\n\n## 定义 Item\n\nItem 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。\n\n通过创建 `scrapy.Item` 类和相应的 `srapy.Field` 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。\n\n在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：\n\n```py\t\nimport scrapy\n\nclass DmozItem(scrapy.Item):\n\ttitle = scrapy.Field()\n\tlink = scrapy.Field()\n\tdesc = scrapy.Field()\n```\n\n## 第一个 Spider\n\nSpider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。\n\n创建一个 Spider 需要继承 `scrapy.Spider` 类，以下是类中定义的属性：\n\n* `name`: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider\n* `start_urls`: 一个包含开始爬取 URL 的列表\n* `parse()`: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL\n\n本教程中，在`tutorial/spiders`目录下保存`dmoz_spider.py` 作为第一个 spider 内容如下：\n\n```py\t\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\n\tname = \"dmoz\"\n\tallowed_domains = [\"dmoz.org\"]\n\tstart_urls = [\n    \t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n   \t\t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n\t]\n\ndef parse(self, response):\n    filename = response.url.split(\"/\")[-2] + '.html'\n    with open(filename, 'wb') as f:\n        f.write(response.body)\n```\n\n### 爬取\n\n返回项目跟目录，运行：\n\n\tscrapy crawl dmoz\n\n这个命令会启动名字为`dmoz`的爬虫，就是我们刚刚写的。会有如下输出\n\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n\t2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/> (referer: None)\t\n\t2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/> (referer: None)\n\t2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n\n### 提取Items\n\n#### Selector\n\nScrapy Selector 使用两种机制 [CSS](https://www.w3.org/TR/selectors/) 和 [XPath](https://www.w3.org/TR/xpath/) 进行数据解析。\n更多信息参考 []Selector documentation](http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors)\n\n#### 在 Shell 里面尝试 Selector\n\n运行以下命令：\n\n\tscrapy shell \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"\n\n然后就可以尝试查看 response 的各种属性了\n\n\tIn [1]: response.xpath('//title')\n\tOut[1]: [<Selector xpath='//title' data=u'<title>Open Directory - Computers: Progr'>]\n\n\tIn [2]: response.xpath('//title').extract()\n\tOut[2]: [u'<title>Open Directory - Computers: Programming: Languages: Python: Books</title>']\n\n\tIn [3]: response.xpath('//title/text()')\n\tOut[3]: [<Selector xpath='//title/text()' data=u'Open Directory - Computers: Programming:'>]\n\n\tIn [4]: response.xpath('//title/text()').extract()\n\tOut[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']\n\n\tIn [5]: response.xpath('//title/text()').re('(\\w+):')\n\tOut[5]: [u'Computers', u'Programming', u'Languages', u'Python']\n\t\n#### 提取数据\n\n现在我们来提取一些真正的信息吧\n\n通过查看`response.body` 我们发现需要的信息在<ul>标签里面，\n\n在我们的 spider 里面加入以下代码：\n\n```py\t\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n]\n\ndef parse(self, response):\n    for sel in response.xpath('//ul/li'):\n        title = sel.xpath('a/text()').extract()\n        link = sel.xpath('a/@href').extract()\n        desc = sel.xpath('text()').extract()\n        print title, link, desc\n```\n\n### 使用我们的Item\n\nItem objects 是一个 Python 字典，你可以像使用字典那样使用它。\n\n\t>>> item = DmozItem()\n\t>>> item['title'] = 'Example title'\n\t>>> item['title']\n\t'Example title'\n\n我们修改 spider 的代码：\n\n```py\nimport scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n]\n\ndef parse(self, response):\n    for sel in response.xpath('//ul/li'):\n        item = DmozItem()\n        item['title'] = sel.xpath('a/text()').extract()\n        item['link'] = sel.xpath('a/@href').extract()\n        item['desc'] = sel.xpath('text()').extract()\n        yield item\n```\n\n现在运行代码会得到`DmozItem` objects:\n\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n      'link': [u'http://gnosis.cx/TPiP/'],\n      'title': [u'Text Processing in Python']}\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n'],\n      'link': [u'http://www.informit.com/store/product.aspx?isbn=0130211192'],\n      'title': [u'XML Processing with Python']}\n\n## Following links\n\n仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。\n这里修改我们的代码：\n\n```py\nimport scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = \"dmoz\"\nallowed_domains = [\"dmoz.org\"]\nstart_urls = [\n    \"http://www.dmoz.org/Computers/Programming/Languages/Python/\",\n]\n\ndef parse(self, response):\n    for href in response.css(\"ul.directory.dir-col > li > a::attr('href')\"):\n        url = response.urljoin(href.extract())\n        yield scrapy.Request(url, callback=self.parse_dir_contents)\n\ndef parse_dir_contents(self, response):\n    for sel in response.xpath('//ul/li'):\n        item = DmozItem()\n        item['title'] = sel.xpath('a/text()').extract()\n        item['link'] = sel.xpath('a/@href').extract()\n        item['desc'] = sel.xpath('text()').extract()\n        yield item\n```\n\n现在 *parse()* 方法仅仅提取我们需要的URL，再用 *response.urljoin* 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 *parse_dir_contents()* callback 函数， 作为实际的内容提取。\n\nScrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。\n\n通过这个机制我们可以编写更为复杂的爬虫。\n\n## 存储爬取的数据\n\n最简单的方式是用 [Feed exports](http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports)，通过下面的命令：\n\n\tscrapy crawl dmoz -o items.json\n\t\n这会生成一个名为`item.json`的文件，存储了我们抓取的数据，存储格式为JSON。\n小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 [Item Pipeline](http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline)\n\n\n\t\n","slug":"Scrapy-框架简介","published":1,"updated":"2016-04-17T09:48:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55v0001lk4rn1r109kkn","content":"<h1 id=\"Scrapy-是？\"><a href=\"#Scrapy-是？\" class=\"headerlink\" title=\"Scrapy 是？\"></a>Scrapy 是？</h1><p>Scrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。</p>\n<h1 id=\"Scrapy-安装\"><a href=\"#Scrapy-安装\" class=\"headerlink\" title=\"Scrapy 安装\"></a>Scrapy 安装</h1><p>以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：</p>\n<pre><code>Python2.7\npip 和 setuptools 包\nlxml. \nOpenSSL\n</code></pre><a id=\"more\"></a>\n<p>你可以通过 pip 来进行安装。</p>\n<pre><code>pip install scrapy\n</code></pre><p>PS: Mac OS X上需要安装 Xcode development tools.</p>\n<pre><code>xcode-select --install\n</code></pre><h1 id=\"Scrapy-Tutorial\"><a href=\"#Scrapy-Tutorial\" class=\"headerlink\" title=\"Scrapy Tutorial\"></a>Scrapy Tutorial</h1><p>这个教程将会涵盖以下内容：</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义你需要抓去的 Item</li>\n<li>写一个爬虫去爬取一个网站并且提取出你的 Item</li>\n<li>写一个 Item Pipeline 去存取数据</li>\n</ol>\n<p>我们爬取的目标是这个网站<a href=\"http://www.dmoz.org/\" target=\"_blank\" rel=\"external\">Open directory project (dmoz)</a></p>\n<h2 id=\"创建-Scrapy-项目\"><a href=\"#创建-Scrapy-项目\" class=\"headerlink\" title=\"创建 Scrapy 项目\"></a>创建 Scrapy 项目</h2><p>运行以下命令：</p>\n<pre><code>scrapy startproject tutorial\n</code></pre><p>这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：</p>\n<pre><code>tutorial/\nscrapy.cfg            # deploy configuration file\n\ntutorial/             # project&apos;s Python module, you&apos;ll import your code from here\n    __init__.py\n\n    items.py          # project items file\n\n    pipelines.py      # project pipelines file\n\n    settings.py       # project settings file\n\n    spiders/          # a directory where you&apos;ll later put your spiders\n        __init__.py\n        ...\n</code></pre><h2 id=\"定义-Item\"><a href=\"#定义-Item\" class=\"headerlink\" title=\"定义 Item\"></a>定义 Item</h2><p>Item 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。</p>\n<p>通过创建 <code>scrapy.Item</code> 类和相应的 <code>srapy.Field</code> 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。</p>\n<p>在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">\ttitle = scrapy.Field()</div><div class=\"line\">\tlink = scrapy.Field()</div><div class=\"line\">\tdesc = scrapy.Field()</div></pre></td></tr></table></figure>\n<h2 id=\"第一个-Spider\"><a href=\"#第一个-Spider\" class=\"headerlink\" title=\"第一个 Spider\"></a>第一个 Spider</h2><p>Spider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。</p>\n<p>创建一个 Spider 需要继承 <code>scrapy.Spider</code> 类，以下是类中定义的属性：</p>\n<ul>\n<li><code>name</code>: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider</li>\n<li><code>start_urls</code>: 一个包含开始爬取 URL 的列表</li>\n<li><code>parse()</code>: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL</li>\n</ul>\n<p>本教程中，在<code>tutorial/spiders</code>目录下保存<code>dmoz_spider.py</code> 作为第一个 spider 内容如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">\tname = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">\tallowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">\tstart_urls = [</div><div class=\"line\">    \t<span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">   \t\t<span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">\t]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>] + <span class=\"string\">'.html'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.body)</div></pre></td></tr></table></figure>\n<h3 id=\"爬取\"><a href=\"#爬取\" class=\"headerlink\" title=\"爬取\"></a>爬取</h3><p>返回项目跟目录，运行：</p>\n<pre><code>scrapy crawl dmoz\n</code></pre><p>这个命令会启动名字为<code>dmoz</code>的爬虫，就是我们刚刚写的。会有如下输出</p>\n<pre><code>2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&gt; (referer: None)    \n2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt; (referer: None)\n2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n</code></pre><h3 id=\"提取Items\"><a href=\"#提取Items\" class=\"headerlink\" title=\"提取Items\"></a>提取Items</h3><h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><p>Scrapy Selector 使用两种机制 <a href=\"https://www.w3.org/TR/selectors/\" target=\"_blank\" rel=\"external\">CSS</a> 和 <a href=\"https://www.w3.org/TR/xpath/\" target=\"_blank\" rel=\"external\">XPath</a> 进行数据解析。<br>更多信息参考 <a href=\"http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors\" target=\"_blank\" rel=\"external\">]Selector documentation</a></p>\n<h4 id=\"在-Shell-里面尝试-Selector\"><a href=\"#在-Shell-里面尝试-Selector\" class=\"headerlink\" title=\"在 Shell 里面尝试 Selector\"></a>在 Shell 里面尝试 Selector</h4><p>运行以下命令：</p>\n<pre><code>scrapy shell &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;\n</code></pre><p>然后就可以尝试查看 response 的各种属性了</p>\n<pre><code>In [1]: response.xpath(&apos;//title&apos;)\nOut[1]: [&lt;Selector xpath=&apos;//title&apos; data=u&apos;&lt;title&gt;Open Directory - Computers: Progr&apos;&gt;]\n\nIn [2]: response.xpath(&apos;//title&apos;).extract()\nOut[2]: [u&apos;&lt;title&gt;Open Directory - Computers: Programming: Languages: Python: Books&lt;/title&gt;&apos;]\n\nIn [3]: response.xpath(&apos;//title/text()&apos;)\nOut[3]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos;Open Directory - Computers: Programming:&apos;&gt;]\n\nIn [4]: response.xpath(&apos;//title/text()&apos;).extract()\nOut[4]: [u&apos;Open Directory - Computers: Programming: Languages: Python: Books&apos;]\n\nIn [5]: response.xpath(&apos;//title/text()&apos;).re(&apos;(\\w+):&apos;)\nOut[5]: [u&apos;Computers&apos;, u&apos;Programming&apos;, u&apos;Languages&apos;, u&apos;Python&apos;]\n</code></pre><h4 id=\"提取数据\"><a href=\"#提取数据\" class=\"headerlink\" title=\"提取数据\"></a>提取数据</h4><p>现在我们来提取一些真正的信息吧</p>\n<p>通过查看<code>response.body</code> 我们发现需要的信息在<ul>标签里面，</ul></p>\n<p>在我们的 spider 里面加入以下代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        title = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        link = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        desc = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">print</span> title, link, desc</div></pre></td></tr></table></figure>\n<h3 id=\"使用我们的Item\"><a href=\"#使用我们的Item\" class=\"headerlink\" title=\"使用我们的Item\"></a>使用我们的Item</h3><p>Item objects 是一个 Python 字典，你可以像使用字典那样使用它。</p>\n<pre><code>&gt;&gt;&gt; item = DmozItem()\n&gt;&gt;&gt; item[&apos;title&apos;] = &apos;Example title&apos;\n&gt;&gt;&gt; item[&apos;title&apos;]\n&apos;Example title&apos;\n</code></pre><p>我们修改 spider 的代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.items <span class=\"keyword\">import</span> DmozItem</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        item = DmozItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'link'</span>] = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'desc'</span>] = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<p>现在运行代码会得到<code>DmozItem</code> objects:</p>\n<pre><code>[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n  &apos;link&apos;: [u&apos;http://gnosis.cx/TPiP/&apos;],\n  &apos;title&apos;: [u&apos;Text Processing in Python&apos;]}\n[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n&apos;],\n  &apos;link&apos;: [u&apos;http://www.informit.com/store/product.aspx?isbn=0130211192&apos;],\n  &apos;title&apos;: [u&apos;XML Processing with Python&apos;]}\n</code></pre><h2 id=\"Following-links\"><a href=\"#Following-links\" class=\"headerlink\" title=\"Following links\"></a>Following links</h2><p>仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。<br>这里修改我们的代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.items <span class=\"keyword\">import</span> DmozItem</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/\"</span>,</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> href <span class=\"keyword\">in</span> response.css(<span class=\"string\">\"ul.directory.dir-col &gt; li &gt; a::attr('href')\"</span>):</div><div class=\"line\">        url = response.urljoin(href.extract())</div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url, callback=self.parse_dir_contents)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_dir_contents</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        item = DmozItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'link'</span>] = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'desc'</span>] = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<p>现在 <em>parse()</em> 方法仅仅提取我们需要的URL，再用 <em>response.urljoin</em> 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 <em>parse_dir_contents()</em> callback 函数， 作为实际的内容提取。</p>\n<p>Scrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。</p>\n<p>通过这个机制我们可以编写更为复杂的爬虫。</p>\n<h2 id=\"存储爬取的数据\"><a href=\"#存储爬取的数据\" class=\"headerlink\" title=\"存储爬取的数据\"></a>存储爬取的数据</h2><p>最简单的方式是用 <a href=\"http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports\" target=\"_blank\" rel=\"external\">Feed exports</a>，通过下面的命令：</p>\n<pre><code>scrapy crawl dmoz -o items.json\n</code></pre><p>这会生成一个名为<code>item.json</code>的文件，存储了我们抓取的数据，存储格式为JSON。<br>小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 <a href=\"http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline\" target=\"_blank\" rel=\"external\">Item Pipeline</a></p>\n","excerpt":"<h1 id=\"Scrapy-是？\"><a href=\"#Scrapy-是？\" class=\"headerlink\" title=\"Scrapy 是？\"></a>Scrapy 是？</h1><p>Scrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。</p>\n<h1 id=\"Scrapy-安装\"><a href=\"#Scrapy-安装\" class=\"headerlink\" title=\"Scrapy 安装\"></a>Scrapy 安装</h1><p>以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：</p>\n<pre><code>Python2.7\npip 和 setuptools 包\nlxml. \nOpenSSL\n</code></pre>","more":"<p>你可以通过 pip 来进行安装。</p>\n<pre><code>pip install scrapy\n</code></pre><p>PS: Mac OS X上需要安装 Xcode development tools.</p>\n<pre><code>xcode-select --install\n</code></pre><h1 id=\"Scrapy-Tutorial\"><a href=\"#Scrapy-Tutorial\" class=\"headerlink\" title=\"Scrapy Tutorial\"></a>Scrapy Tutorial</h1><p>这个教程将会涵盖以下内容：</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义你需要抓去的 Item</li>\n<li>写一个爬虫去爬取一个网站并且提取出你的 Item</li>\n<li>写一个 Item Pipeline 去存取数据</li>\n</ol>\n<p>我们爬取的目标是这个网站<a href=\"http://www.dmoz.org/\">Open directory project (dmoz)</a></p>\n<h2 id=\"创建-Scrapy-项目\"><a href=\"#创建-Scrapy-项目\" class=\"headerlink\" title=\"创建 Scrapy 项目\"></a>创建 Scrapy 项目</h2><p>运行以下命令：</p>\n<pre><code>scrapy startproject tutorial\n</code></pre><p>这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：</p>\n<pre><code>tutorial/\nscrapy.cfg            # deploy configuration file\n\ntutorial/             # project&apos;s Python module, you&apos;ll import your code from here\n    __init__.py\n\n    items.py          # project items file\n\n    pipelines.py      # project pipelines file\n\n    settings.py       # project settings file\n\n    spiders/          # a directory where you&apos;ll later put your spiders\n        __init__.py\n        ...\n</code></pre><h2 id=\"定义-Item\"><a href=\"#定义-Item\" class=\"headerlink\" title=\"定义 Item\"></a>定义 Item</h2><p>Item 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。</p>\n<p>通过创建 <code>scrapy.Item</code> 类和相应的 <code>srapy.Field</code> 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。</p>\n<p>在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozItem</span><span class=\"params\">(scrapy.Item)</span>:</span></div><div class=\"line\">\ttitle = scrapy.Field()</div><div class=\"line\">\tlink = scrapy.Field()</div><div class=\"line\">\tdesc = scrapy.Field()</div></pre></td></tr></table></figure>\n<h2 id=\"第一个-Spider\"><a href=\"#第一个-Spider\" class=\"headerlink\" title=\"第一个 Spider\"></a>第一个 Spider</h2><p>Spider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。</p>\n<p>创建一个 Spider 需要继承 <code>scrapy.Spider</code> 类，以下是类中定义的属性：</p>\n<ul>\n<li><code>name</code>: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider</li>\n<li><code>start_urls</code>: 一个包含开始爬取 URL 的列表</li>\n<li><code>parse()</code>: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL</li>\n</ul>\n<p>本教程中，在<code>tutorial/spiders</code>目录下保存<code>dmoz_spider.py</code> 作为第一个 spider 内容如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">\tname = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">\tallowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">\tstart_urls = [</div><div class=\"line\">    \t<span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">   \t\t<span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">\t]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>] + <span class=\"string\">'.html'</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.body)</div></pre></td></tr></table></figure>\n<h3 id=\"爬取\"><a href=\"#爬取\" class=\"headerlink\" title=\"爬取\"></a>爬取</h3><p>返回项目跟目录，运行：</p>\n<pre><code>scrapy crawl dmoz\n</code></pre><p>这个命令会启动名字为<code>dmoz</code>的爬虫，就是我们刚刚写的。会有如下输出</p>\n<pre><code>2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&gt; (referer: None)    \n2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt; (referer: None)\n2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n</code></pre><h3 id=\"提取Items\"><a href=\"#提取Items\" class=\"headerlink\" title=\"提取Items\"></a>提取Items</h3><h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><p>Scrapy Selector 使用两种机制 <a href=\"https://www.w3.org/TR/selectors/\">CSS</a> 和 <a href=\"https://www.w3.org/TR/xpath/\">XPath</a> 进行数据解析。<br>更多信息参考 <a href=\"http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors\">]Selector documentation</a></p>\n<h4 id=\"在-Shell-里面尝试-Selector\"><a href=\"#在-Shell-里面尝试-Selector\" class=\"headerlink\" title=\"在 Shell 里面尝试 Selector\"></a>在 Shell 里面尝试 Selector</h4><p>运行以下命令：</p>\n<pre><code>scrapy shell &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;\n</code></pre><p>然后就可以尝试查看 response 的各种属性了</p>\n<pre><code>In [1]: response.xpath(&apos;//title&apos;)\nOut[1]: [&lt;Selector xpath=&apos;//title&apos; data=u&apos;&lt;title&gt;Open Directory - Computers: Progr&apos;&gt;]\n\nIn [2]: response.xpath(&apos;//title&apos;).extract()\nOut[2]: [u&apos;&lt;title&gt;Open Directory - Computers: Programming: Languages: Python: Books&lt;/title&gt;&apos;]\n\nIn [3]: response.xpath(&apos;//title/text()&apos;)\nOut[3]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos;Open Directory - Computers: Programming:&apos;&gt;]\n\nIn [4]: response.xpath(&apos;//title/text()&apos;).extract()\nOut[4]: [u&apos;Open Directory - Computers: Programming: Languages: Python: Books&apos;]\n\nIn [5]: response.xpath(&apos;//title/text()&apos;).re(&apos;(\\w+):&apos;)\nOut[5]: [u&apos;Computers&apos;, u&apos;Programming&apos;, u&apos;Languages&apos;, u&apos;Python&apos;]\n</code></pre><h4 id=\"提取数据\"><a href=\"#提取数据\" class=\"headerlink\" title=\"提取数据\"></a>提取数据</h4><p>现在我们来提取一些真正的信息吧</p>\n<p>通过查看<code>response.body</code> 我们发现需要的信息在<ul>标签里面，</p>\n<p>在我们的 spider 里面加入以下代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        title = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        link = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        desc = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">print</span> title, link, desc</div></pre></td></tr></table></figure>\n<h3 id=\"使用我们的Item\"><a href=\"#使用我们的Item\" class=\"headerlink\" title=\"使用我们的Item\"></a>使用我们的Item</h3><p>Item objects 是一个 Python 字典，你可以像使用字典那样使用它。</p>\n<pre><code>&gt;&gt;&gt; item = DmozItem()\n&gt;&gt;&gt; item[&apos;title&apos;] = &apos;Example title&apos;\n&gt;&gt;&gt; item[&apos;title&apos;]\n&apos;Example title&apos;\n</code></pre><p>我们修改 spider 的代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.items <span class=\"keyword\">import</span> DmozItem</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span>,</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span></div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        item = DmozItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'link'</span>] = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'desc'</span>] = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<p>现在运行代码会得到<code>DmozItem</code> objects:</p>\n<pre><code>[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n  &apos;link&apos;: [u&apos;http://gnosis.cx/TPiP/&apos;],\n  &apos;title&apos;: [u&apos;Text Processing in Python&apos;]}\n[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n&apos;],\n  &apos;link&apos;: [u&apos;http://www.informit.com/store/product.aspx?isbn=0130211192&apos;],\n  &apos;title&apos;: [u&apos;XML Processing with Python&apos;]}\n</code></pre><h2 id=\"Following-links\"><a href=\"#Following-links\" class=\"headerlink\" title=\"Following links\"></a>Following links</h2><p>仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。<br>这里修改我们的代码：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> scrapy</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> tutorial.items <span class=\"keyword\">import</span> DmozItem</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DmozSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></div><div class=\"line\">name = <span class=\"string\">\"dmoz\"</span></div><div class=\"line\">allowed_domains = [<span class=\"string\">\"dmoz.org\"</span>]</div><div class=\"line\">start_urls = [</div><div class=\"line\">    <span class=\"string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/\"</span>,</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> href <span class=\"keyword\">in</span> response.css(<span class=\"string\">\"ul.directory.dir-col &gt; li &gt; a::attr('href')\"</span>):</div><div class=\"line\">        url = response.urljoin(href.extract())</div><div class=\"line\">        <span class=\"keyword\">yield</span> scrapy.Request(url, callback=self.parse_dir_contents)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse_dir_contents</span><span class=\"params\">(self, response)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> sel <span class=\"keyword\">in</span> response.xpath(<span class=\"string\">'//ul/li'</span>):</div><div class=\"line\">        item = DmozItem()</div><div class=\"line\">        item[<span class=\"string\">'title'</span>] = sel.xpath(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'link'</span>] = sel.xpath(<span class=\"string\">'a/@href'</span>).extract()</div><div class=\"line\">        item[<span class=\"string\">'desc'</span>] = sel.xpath(<span class=\"string\">'text()'</span>).extract()</div><div class=\"line\">        <span class=\"keyword\">yield</span> item</div></pre></td></tr></table></figure>\n<p>现在 <em>parse()</em> 方法仅仅提取我们需要的URL，再用 <em>response.urljoin</em> 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 <em>parse_dir_contents()</em> callback 函数， 作为实际的内容提取。</p>\n<p>Scrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。</p>\n<p>通过这个机制我们可以编写更为复杂的爬虫。</p>\n<h2 id=\"存储爬取的数据\"><a href=\"#存储爬取的数据\" class=\"headerlink\" title=\"存储爬取的数据\"></a>存储爬取的数据</h2><p>最简单的方式是用 <a href=\"http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports\">Feed exports</a>，通过下面的命令：</p>\n<pre><code>scrapy crawl dmoz -o items.json\n</code></pre><p>这会生成一个名为<code>item.json</code>的文件，存储了我们抓取的数据，存储格式为JSON。<br>小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 <a href=\"http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline\">Item Pipeline</a></p>"},{"title":"flask restul 使用体会","date":"2016-11-24T02:41:08.000Z","_content":"\n最近开发的项目里使用 flask restful 作为接口框架，统一的编写格式方便于代码的可读性，和可维护性提高。\n\n# 请求参数解析\n\n## 基本参数解析\n\n这里有个关于请求解析的简单例子，看起来像[flask.Request.values]字典里的两个参数：一个 integer 和 一个 string\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser()\nparser.add_argument('rate', type=int, help='Rate cannot be converted')\nparser.add_argument('name')\nargs = parser.parse_args()\n```\n<!--more-->\n\n> 注意：\n默认的参数类型(type)是一个 unicode string，在 python2 里面是 unicode，在 python3 里面是 str\n\n如果指定 help 值，当解析出现错误的时候，将会返回 help 内容。如果你不指定 help 信息，默认行为将会返回 type error 本身的错误信息。\n\n默认的，参数(arguments)是非必需的(required)。同样的请求中出现的没有在 RequestParser 中指定的参数将会被忽略掉。\n\n同样的，参数(arguments) 在你的 request parser 中声明，但是并未出现在实际的请求中的会被设置为 None。\n\n## 必需参数(Required Arguments)\n\n声明必需参数，只需将 `required=True` 加入到 [add_argument()]\n\n```py\nparser.add_argument('name', required=True,\nhelp=\"Name cannot be blank!\")\n```\n\n## 多值和列表（Multiple Values & Lists）\n\n如果你希望接受多个值作为一个列表关联到一个 key 上，你可以传入 `action='append'`\n\n```py\nparser.add_argument('name', action='append')\n```\n像这样请求\n```\ncurl http://api.example.com -d \"name=bob\" -d \"name=sue\" -d \"name=joe\"\n```\n将会返回如下参数\n```py\nargs = parser.parse_args()\nargs['name']    # ['bob', 'sue', 'joe']\n```\n## Other Destinations\n如果你希望你的参数经过解析后存储在一个不同的名字下，你可以传入`dest`参数。\n\n```py\nparser.add_argument('name', dest='public_name')\n\nargs = parser.parse_args()\nargs['public_name']\n```\n\n## 参数位置(Argument Locations)\n\n默认的，[RequestParser] 会试着从[flask.Request.values]和[flask.Request.json]解析参数。\n在[add_argument()]中使用`location`参数可以指定从其他位置拉取数据。任何[flask.Request]中的变量都可以使用，例如：\n\n```py\n# Look only in the POST body\nparser.add_argument('name', type=int, location='form')\n\n# Look only in the querystring\nparser.add_argument('PageSize', type=int, location='args')\n\n# From the request headers\nparser.add_argument('User-Agent', location='headers')\n\n# From http cookies\nparser.add_argument('session_id', location='cookies')\n\n# From file uploads\nparser.add_argument('picture', type=werkzeug.datastructures.FileStorage, location='files')\n```\n\n> 注意\n> 只有 location='json' 时使用， type=list。[See this issue for more details](https://github.com/flask-restful/flask-restful/issues/380)\n\n## Multiple Locations\n\n可以通过传入一个 list 制定多个 location:\n```py\nparser.add_argument('text', location=['headers', 'values'])\n```\n当指定了多个 location 时，从所有 locations 里面取出的参数将会合并到一个[MultiDict](http://werkzeug.pocoo.org/docs/0.11/datastructures/#werkzeug.datastructures.MultiDict)里，location 列出了最终结果集里面的取值顺序。\n\n如果参数 location 列表里面包括了 [headers](http://flask.pocoo.org/docs/0.11/api/#flask.Request.headers) location, 则参数名字将不再大小写敏感，将必需和它们的 title case 名字相匹配（[str.title()](https://docs.python.org/3/library/stdtypes.html#str.title)), 指定 `location='headers'`(非 list)将会保持大小写敏感。\n\n## 解析继承(Parser Inheritance)\n\n你经常会对每一个资源使用不同的解析器。问题在于很多的解析器需要解析相同的参数。相比于每次重新写相同的参数，你可以写一个父解析器包含所有的共享参数，通过 [copy()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.copy) 方法来扩展它。你可以通过 [replace_argument()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.replace_argument) 来替换任意参数。或者通过 [remove_argument()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.remove_argument) 来删除参数， 例如：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser()\nparser.add_argument('foo', type=int)\n\nparser_copy = parser.copy()\nparser_copy.add_argument('bar', type=int)\n\n# parser_copy has both 'foo' and 'bar'\n\nparser_copy.replace_argument('foo', required=True, location='json')\n# 'foo' is now a required str located in json, not an int as defined\n#  by original parser\n\nparser_copy.remove_argument('foo')\n# parser_copy no longer has 'foo' argument\n```\n## 错误处理(Error Handling)\n\nRequestParser 提供的默认处理错误的方式是在第一次错误发生的地方终止程序，这在你需要处理很多参数比较耗时的情况下是有益处的。然而，将错误捆绑在一起返回给客户端总是好的。这个行为可以在 Flask 层面或者在 RequestParser 实例上指定。在 RequestParser 上绑定错误信息，需要传入 bundle_errors，例如：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser(bundle_errors=True)\nparser.add_argument('foo', type=int, required=True)\nparser.add_argument('bar', type=int, required=True)\n\n# If a request comes in not containing both 'foo' and 'bar', the error that\n# will come back will look something like this.\n\n{\n    \"message\":  {\n        \"foo\": \"foo error message\",\n        \"bar\": \"bar error message\"\n    }\n}\n\n# The default behavior would only return the first error\n\nparser = RequestParser()\nparser.add_argument('foo', type=int, required=True)\nparser.add_argument('bar', type=int, required=True)\n\n{\n    \"message\":  {\n        \"foo\": \"foo error message\"\n    }\n}\n```\n在 Flask 层面配置入下：\n```py\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['BUNDLE_ERRORS'] = True\n```\n> 警告 \n> BUNDLE_ERRORS 是 global 设置，会覆盖 [RequestParser] 的 bundle_errors 设置。\n\n## 错误信息(Error Messages)\n\n每个参数对应的错误信息可以通过 help 参数指定。\n\n如果没有指定 help 参数，则这个参数对应的错误信息将会是它本身的 type error 的字符串表示。如果指定 help，则错误信息就是 help 的值。\n\nhelp 可以包含一个插入的 token，{error_msg}，它会被替换为 type error 的字符串。这种方式允许了自定义化的显示原始错误信息：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser() parser.add_argument(\n\n‘foo’, choices=(‘one’, ‘two’), help=’Bad choice: {error_msg}’\n)\n\n# If a request comes in with a value of “three” for foo:\n\n{\n“message”: {\n“foo”: “Bad choice: three is not a valid choice”,\n}\n\n}\n```\n\n\n[flask.Request.values]: http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\n[add_argument()]: http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\n[RequestParser]: http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\n[flask.Request.json]: http://flask.pocoo.org/docs/0.11/api/#flask.Request.json\n[flask.Request]: http://flask.pocoo.org/docs/0.11/api/#flask.Request","source":"_posts/flask-restul-使用体会.md","raw":"---\ntitle: flask restul 使用体会\ndate: 2016-11-24 10:41:08\ntags: flask restful\ncategories: 技术相关\n---\n\n最近开发的项目里使用 flask restful 作为接口框架，统一的编写格式方便于代码的可读性，和可维护性提高。\n\n# 请求参数解析\n\n## 基本参数解析\n\n这里有个关于请求解析的简单例子，看起来像[flask.Request.values]字典里的两个参数：一个 integer 和 一个 string\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser()\nparser.add_argument('rate', type=int, help='Rate cannot be converted')\nparser.add_argument('name')\nargs = parser.parse_args()\n```\n<!--more-->\n\n> 注意：\n默认的参数类型(type)是一个 unicode string，在 python2 里面是 unicode，在 python3 里面是 str\n\n如果指定 help 值，当解析出现错误的时候，将会返回 help 内容。如果你不指定 help 信息，默认行为将会返回 type error 本身的错误信息。\n\n默认的，参数(arguments)是非必需的(required)。同样的请求中出现的没有在 RequestParser 中指定的参数将会被忽略掉。\n\n同样的，参数(arguments) 在你的 request parser 中声明，但是并未出现在实际的请求中的会被设置为 None。\n\n## 必需参数(Required Arguments)\n\n声明必需参数，只需将 `required=True` 加入到 [add_argument()]\n\n```py\nparser.add_argument('name', required=True,\nhelp=\"Name cannot be blank!\")\n```\n\n## 多值和列表（Multiple Values & Lists）\n\n如果你希望接受多个值作为一个列表关联到一个 key 上，你可以传入 `action='append'`\n\n```py\nparser.add_argument('name', action='append')\n```\n像这样请求\n```\ncurl http://api.example.com -d \"name=bob\" -d \"name=sue\" -d \"name=joe\"\n```\n将会返回如下参数\n```py\nargs = parser.parse_args()\nargs['name']    # ['bob', 'sue', 'joe']\n```\n## Other Destinations\n如果你希望你的参数经过解析后存储在一个不同的名字下，你可以传入`dest`参数。\n\n```py\nparser.add_argument('name', dest='public_name')\n\nargs = parser.parse_args()\nargs['public_name']\n```\n\n## 参数位置(Argument Locations)\n\n默认的，[RequestParser] 会试着从[flask.Request.values]和[flask.Request.json]解析参数。\n在[add_argument()]中使用`location`参数可以指定从其他位置拉取数据。任何[flask.Request]中的变量都可以使用，例如：\n\n```py\n# Look only in the POST body\nparser.add_argument('name', type=int, location='form')\n\n# Look only in the querystring\nparser.add_argument('PageSize', type=int, location='args')\n\n# From the request headers\nparser.add_argument('User-Agent', location='headers')\n\n# From http cookies\nparser.add_argument('session_id', location='cookies')\n\n# From file uploads\nparser.add_argument('picture', type=werkzeug.datastructures.FileStorage, location='files')\n```\n\n> 注意\n> 只有 location='json' 时使用， type=list。[See this issue for more details](https://github.com/flask-restful/flask-restful/issues/380)\n\n## Multiple Locations\n\n可以通过传入一个 list 制定多个 location:\n```py\nparser.add_argument('text', location=['headers', 'values'])\n```\n当指定了多个 location 时，从所有 locations 里面取出的参数将会合并到一个[MultiDict](http://werkzeug.pocoo.org/docs/0.11/datastructures/#werkzeug.datastructures.MultiDict)里，location 列出了最终结果集里面的取值顺序。\n\n如果参数 location 列表里面包括了 [headers](http://flask.pocoo.org/docs/0.11/api/#flask.Request.headers) location, 则参数名字将不再大小写敏感，将必需和它们的 title case 名字相匹配（[str.title()](https://docs.python.org/3/library/stdtypes.html#str.title)), 指定 `location='headers'`(非 list)将会保持大小写敏感。\n\n## 解析继承(Parser Inheritance)\n\n你经常会对每一个资源使用不同的解析器。问题在于很多的解析器需要解析相同的参数。相比于每次重新写相同的参数，你可以写一个父解析器包含所有的共享参数，通过 [copy()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.copy) 方法来扩展它。你可以通过 [replace_argument()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.replace_argument) 来替换任意参数。或者通过 [remove_argument()](http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.remove_argument) 来删除参数， 例如：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser()\nparser.add_argument('foo', type=int)\n\nparser_copy = parser.copy()\nparser_copy.add_argument('bar', type=int)\n\n# parser_copy has both 'foo' and 'bar'\n\nparser_copy.replace_argument('foo', required=True, location='json')\n# 'foo' is now a required str located in json, not an int as defined\n#  by original parser\n\nparser_copy.remove_argument('foo')\n# parser_copy no longer has 'foo' argument\n```\n## 错误处理(Error Handling)\n\nRequestParser 提供的默认处理错误的方式是在第一次错误发生的地方终止程序，这在你需要处理很多参数比较耗时的情况下是有益处的。然而，将错误捆绑在一起返回给客户端总是好的。这个行为可以在 Flask 层面或者在 RequestParser 实例上指定。在 RequestParser 上绑定错误信息，需要传入 bundle_errors，例如：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser(bundle_errors=True)\nparser.add_argument('foo', type=int, required=True)\nparser.add_argument('bar', type=int, required=True)\n\n# If a request comes in not containing both 'foo' and 'bar', the error that\n# will come back will look something like this.\n\n{\n    \"message\":  {\n        \"foo\": \"foo error message\",\n        \"bar\": \"bar error message\"\n    }\n}\n\n# The default behavior would only return the first error\n\nparser = RequestParser()\nparser.add_argument('foo', type=int, required=True)\nparser.add_argument('bar', type=int, required=True)\n\n{\n    \"message\":  {\n        \"foo\": \"foo error message\"\n    }\n}\n```\n在 Flask 层面配置入下：\n```py\nfrom flask import Flask\n\napp = Flask(__name__)\napp.config['BUNDLE_ERRORS'] = True\n```\n> 警告 \n> BUNDLE_ERRORS 是 global 设置，会覆盖 [RequestParser] 的 bundle_errors 设置。\n\n## 错误信息(Error Messages)\n\n每个参数对应的错误信息可以通过 help 参数指定。\n\n如果没有指定 help 参数，则这个参数对应的错误信息将会是它本身的 type error 的字符串表示。如果指定 help，则错误信息就是 help 的值。\n\nhelp 可以包含一个插入的 token，{error_msg}，它会被替换为 type error 的字符串。这种方式允许了自定义化的显示原始错误信息：\n\n```py\nfrom flask_restful import reqparse\n\nparser = reqparse.RequestParser() parser.add_argument(\n\n‘foo’, choices=(‘one’, ‘two’), help=’Bad choice: {error_msg}’\n)\n\n# If a request comes in with a value of “three” for foo:\n\n{\n“message”: {\n“foo”: “Bad choice: three is not a valid choice”,\n}\n\n}\n```\n\n\n[flask.Request.values]: http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\n[add_argument()]: http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\n[RequestParser]: http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\n[flask.Request.json]: http://flask.pocoo.org/docs/0.11/api/#flask.Request.json\n[flask.Request]: http://flask.pocoo.org/docs/0.11/api/#flask.Request","slug":"flask-restul-使用体会","published":1,"updated":"2016-11-24T06:22:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55v2001ok4rnywltjy18","content":"<p>最近开发的项目里使用 flask restful 作为接口框架，统一的编写格式方便于代码的可读性，和可维护性提高。</p>\n<h1 id=\"请求参数解析\"><a href=\"#请求参数解析\" class=\"headerlink\" title=\"请求参数解析\"></a>请求参数解析</h1><h2 id=\"基本参数解析\"><a href=\"#基本参数解析\" class=\"headerlink\" title=\"基本参数解析\"></a>基本参数解析</h2><p>这里有个关于请求解析的简单例子，看起来像<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\" target=\"_blank\" rel=\"external\">flask.Request.values</a>字典里的两个参数：一个 integer 和 一个 string</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'rate'</span>, type=int, help=<span class=\"string\">'Rate cannot be converted'</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>)</div><div class=\"line\">args = parser.parse_args()</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>注意：<br>默认的参数类型(type)是一个 unicode string，在 python2 里面是 unicode，在 python3 里面是 str</p>\n</blockquote>\n<p>如果指定 help 值，当解析出现错误的时候，将会返回 help 内容。如果你不指定 help 信息，默认行为将会返回 type error 本身的错误信息。</p>\n<p>默认的，参数(arguments)是非必需的(required)。同样的请求中出现的没有在 RequestParser 中指定的参数将会被忽略掉。</p>\n<p>同样的，参数(arguments) 在你的 request parser 中声明，但是并未出现在实际的请求中的会被设置为 None。</p>\n<h2 id=\"必需参数-Required-Arguments\"><a href=\"#必需参数-Required-Arguments\" class=\"headerlink\" title=\"必需参数(Required Arguments)\"></a>必需参数(Required Arguments)</h2><p>声明必需参数，只需将 <code>required=True</code> 加入到 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\" target=\"_blank\" rel=\"external\">add_argument()</a></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">help=<span class=\"string\">\"Name cannot be blank!\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"多值和列表（Multiple-Values-amp-Lists）\"><a href=\"#多值和列表（Multiple-Values-amp-Lists）\" class=\"headerlink\" title=\"多值和列表（Multiple Values &amp; Lists）\"></a>多值和列表（Multiple Values &amp; Lists）</h2><p>如果你希望接受多个值作为一个列表关联到一个 key 上，你可以传入 <code>action=&#39;append&#39;</code></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, action=<span class=\"string\">'append'</span>)</div></pre></td></tr></table></figure>\n<p>像这样请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://api.example.com -d &quot;name=bob&quot; -d &quot;name=sue&quot; -d &quot;name=joe&quot;</div></pre></td></tr></table></figure></p>\n<p>将会返回如下参数<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">args = parser.parse_args()</div><div class=\"line\">args[<span class=\"string\">'name'</span>]    <span class=\"comment\"># ['bob', 'sue', 'joe']</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Other-Destinations\"><a href=\"#Other-Destinations\" class=\"headerlink\" title=\"Other Destinations\"></a>Other Destinations</h2><p>如果你希望你的参数经过解析后存储在一个不同的名字下，你可以传入<code>dest</code>参数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, dest=<span class=\"string\">'public_name'</span>)</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()</div><div class=\"line\">args[<span class=\"string\">'public_name'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"参数位置-Argument-Locations\"><a href=\"#参数位置-Argument-Locations\" class=\"headerlink\" title=\"参数位置(Argument Locations)\"></a>参数位置(Argument Locations)</h2><p>默认的，<a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\" target=\"_blank\" rel=\"external\">RequestParser</a> 会试着从<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\" target=\"_blank\" rel=\"external\">flask.Request.values</a>和<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.json\" target=\"_blank\" rel=\"external\">flask.Request.json</a>解析参数。<br>在<a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\" target=\"_blank\" rel=\"external\">add_argument()</a>中使用<code>location</code>参数可以指定从其他位置拉取数据。任何<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request\" target=\"_blank\" rel=\"external\">flask.Request</a>中的变量都可以使用，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Look only in the POST body</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, type=int, location=<span class=\"string\">'form'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Look only in the querystring</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'PageSize'</span>, type=int, location=<span class=\"string\">'args'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From the request headers</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'User-Agent'</span>, location=<span class=\"string\">'headers'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From http cookies</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'session_id'</span>, location=<span class=\"string\">'cookies'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From file uploads</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'picture'</span>, type=werkzeug.datastructures.FileStorage, location=<span class=\"string\">'files'</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br>只有 location=’json’ 时使用， type=list。<a href=\"https://github.com/flask-restful/flask-restful/issues/380\" target=\"_blank\" rel=\"external\">See this issue for more details</a></p>\n</blockquote>\n<h2 id=\"Multiple-Locations\"><a href=\"#Multiple-Locations\" class=\"headerlink\" title=\"Multiple Locations\"></a>Multiple Locations</h2><p>可以通过传入一个 list 制定多个 location:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'text'</span>, location=[<span class=\"string\">'headers'</span>, <span class=\"string\">'values'</span>])</div></pre></td></tr></table></figure></p>\n<p>当指定了多个 location 时，从所有 locations 里面取出的参数将会合并到一个<a href=\"http://werkzeug.pocoo.org/docs/0.11/datastructures/#werkzeug.datastructures.MultiDict\" target=\"_blank\" rel=\"external\">MultiDict</a>里，location 列出了最终结果集里面的取值顺序。</p>\n<p>如果参数 location 列表里面包括了 <a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.headers\" target=\"_blank\" rel=\"external\">headers</a> location, 则参数名字将不再大小写敏感，将必需和它们的 title case 名字相匹配（<a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\" target=\"_blank\" rel=\"external\">str.title()</a>), 指定 <code>location=&#39;headers&#39;</code>(非 list)将会保持大小写敏感。</p>\n<h2 id=\"解析继承-Parser-Inheritance\"><a href=\"#解析继承-Parser-Inheritance\" class=\"headerlink\" title=\"解析继承(Parser Inheritance)\"></a>解析继承(Parser Inheritance)</h2><p>你经常会对每一个资源使用不同的解析器。问题在于很多的解析器需要解析相同的参数。相比于每次重新写相同的参数，你可以写一个父解析器包含所有的共享参数，通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.copy\" target=\"_blank\" rel=\"external\">copy()</a> 方法来扩展它。你可以通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.replace_argument\" target=\"_blank\" rel=\"external\">replace_argument()</a> 来替换任意参数。或者通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.remove_argument\" target=\"_blank\" rel=\"external\">remove_argument()</a> 来删除参数， 例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"></div><div class=\"line\">parser_copy = parser.copy()</div><div class=\"line\">parser_copy.add_argument(<span class=\"string\">'bar'</span>, type=int)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># parser_copy has both 'foo' and 'bar'</span></div><div class=\"line\"></div><div class=\"line\">parser_copy.replace_argument(<span class=\"string\">'foo'</span>, required=<span class=\"keyword\">True</span>, location=<span class=\"string\">'json'</span>)</div><div class=\"line\"><span class=\"comment\"># 'foo' is now a required str located in json, not an int as defined</span></div><div class=\"line\"><span class=\"comment\">#  by original parser</span></div><div class=\"line\"></div><div class=\"line\">parser_copy.remove_argument(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\"># parser_copy no longer has 'foo' argument</span></div></pre></td></tr></table></figure>\n<h2 id=\"错误处理-Error-Handling\"><a href=\"#错误处理-Error-Handling\" class=\"headerlink\" title=\"错误处理(Error Handling)\"></a>错误处理(Error Handling)</h2><p>RequestParser 提供的默认处理错误的方式是在第一次错误发生的地方终止程序，这在你需要处理很多参数比较耗时的情况下是有益处的。然而，将错误捆绑在一起返回给客户端总是好的。这个行为可以在 Flask 层面或者在 RequestParser 实例上指定。在 RequestParser 上绑定错误信息，需要传入 bundle_errors，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser(bundle_errors=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'bar'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If a request comes in not containing both 'foo' and 'bar', the error that</span></div><div class=\"line\"><span class=\"comment\"># will come back will look something like this.</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"message\"</span>:  &#123;</div><div class=\"line\">        <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"foo error message\"</span>,</div><div class=\"line\">        <span class=\"string\">\"bar\"</span>: <span class=\"string\">\"bar error message\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The default behavior would only return the first error</span></div><div class=\"line\"></div><div class=\"line\">parser = RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'bar'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"message\"</span>:  &#123;</div><div class=\"line\">        <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"foo error message\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 Flask 层面配置入下：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">app.config[<span class=\"string\">'BUNDLE_ERRORS'</span>] = <span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>警告<br>BUNDLE_ERRORS 是 global 设置，会覆盖 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\" target=\"_blank\" rel=\"external\">RequestParser</a> 的 bundle_errors 设置。</p>\n</blockquote>\n<h2 id=\"错误信息-Error-Messages\"><a href=\"#错误信息-Error-Messages\" class=\"headerlink\" title=\"错误信息(Error Messages)\"></a>错误信息(Error Messages)</h2><p>每个参数对应的错误信息可以通过 help 参数指定。</p>\n<p>如果没有指定 help 参数，则这个参数对应的错误信息将会是它本身的 type error 的字符串表示。如果指定 help，则错误信息就是 help 的值。</p>\n<p>help 可以包含一个插入的 token，{error_msg}，它会被替换为 type error 的字符串。这种方式允许了自定义化的显示原始错误信息：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser() parser.add_argument(</div><div class=\"line\"></div><div class=\"line\">‘foo’, choices=(‘one’, ‘two’), help=’Bad choice: &#123;error_msg&#125;’</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If a request comes in with a value of “three” for foo:</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">“message”: &#123;</div><div class=\"line\">“foo”: “Bad choice: three <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a valid choice”,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>最近开发的项目里使用 flask restful 作为接口框架，统一的编写格式方便于代码的可读性，和可维护性提高。</p>\n<h1 id=\"请求参数解析\"><a href=\"#请求参数解析\" class=\"headerlink\" title=\"请求参数解析\"></a>请求参数解析</h1><h2 id=\"基本参数解析\"><a href=\"#基本参数解析\" class=\"headerlink\" title=\"基本参数解析\"></a>基本参数解析</h2><p>这里有个关于请求解析的简单例子，看起来像<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\">flask.Request.values</a>字典里的两个参数：一个 integer 和 一个 string</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'rate'</span>, type=int, help=<span class=\"string\">'Rate cannot be converted'</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>)</div><div class=\"line\">args = parser.parse_args()</div></pre></td></tr></table></figure>","more":"<blockquote>\n<p>注意：<br>默认的参数类型(type)是一个 unicode string，在 python2 里面是 unicode，在 python3 里面是 str</p>\n</blockquote>\n<p>如果指定 help 值，当解析出现错误的时候，将会返回 help 内容。如果你不指定 help 信息，默认行为将会返回 type error 本身的错误信息。</p>\n<p>默认的，参数(arguments)是非必需的(required)。同样的请求中出现的没有在 RequestParser 中指定的参数将会被忽略掉。</p>\n<p>同样的，参数(arguments) 在你的 request parser 中声明，但是并未出现在实际的请求中的会被设置为 None。</p>\n<h2 id=\"必需参数-Required-Arguments\"><a href=\"#必需参数-Required-Arguments\" class=\"headerlink\" title=\"必需参数(Required Arguments)\"></a>必需参数(Required Arguments)</h2><p>声明必需参数，只需将 <code>required=True</code> 加入到 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\">add_argument()</a></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, required=<span class=\"keyword\">True</span>,</div><div class=\"line\">help=<span class=\"string\">\"Name cannot be blank!\"</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"多值和列表（Multiple-Values-amp-Lists）\"><a href=\"#多值和列表（Multiple-Values-amp-Lists）\" class=\"headerlink\" title=\"多值和列表（Multiple Values &amp; Lists）\"></a>多值和列表（Multiple Values &amp; Lists）</h2><p>如果你希望接受多个值作为一个列表关联到一个 key 上，你可以传入 <code>action=&#39;append&#39;</code></p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, action=<span class=\"string\">'append'</span>)</div></pre></td></tr></table></figure>\n<p>像这样请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://api.example.com -d &quot;name=bob&quot; -d &quot;name=sue&quot; -d &quot;name=joe&quot;</div></pre></td></tr></table></figure></p>\n<p>将会返回如下参数<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">args = parser.parse_args()</div><div class=\"line\">args[<span class=\"string\">'name'</span>]    <span class=\"comment\"># ['bob', 'sue', 'joe']</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Other-Destinations\"><a href=\"#Other-Destinations\" class=\"headerlink\" title=\"Other Destinations\"></a>Other Destinations</h2><p>如果你希望你的参数经过解析后存储在一个不同的名字下，你可以传入<code>dest</code>参数。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, dest=<span class=\"string\">'public_name'</span>)</div><div class=\"line\"></div><div class=\"line\">args = parser.parse_args()</div><div class=\"line\">args[<span class=\"string\">'public_name'</span>]</div></pre></td></tr></table></figure>\n<h2 id=\"参数位置-Argument-Locations\"><a href=\"#参数位置-Argument-Locations\" class=\"headerlink\" title=\"参数位置(Argument Locations)\"></a>参数位置(Argument Locations)</h2><p>默认的，<a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\">RequestParser</a> 会试着从<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.values\">flask.Request.values</a>和<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.json\">flask.Request.json</a>解析参数。<br>在<a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.add_argument\">add_argument()</a>中使用<code>location</code>参数可以指定从其他位置拉取数据。任何<a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request\">flask.Request</a>中的变量都可以使用，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Look only in the POST body</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'name'</span>, type=int, location=<span class=\"string\">'form'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Look only in the querystring</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'PageSize'</span>, type=int, location=<span class=\"string\">'args'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From the request headers</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'User-Agent'</span>, location=<span class=\"string\">'headers'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From http cookies</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'session_id'</span>, location=<span class=\"string\">'cookies'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># From file uploads</span></div><div class=\"line\">parser.add_argument(<span class=\"string\">'picture'</span>, type=werkzeug.datastructures.FileStorage, location=<span class=\"string\">'files'</span>)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意<br>只有 location=’json’ 时使用， type=list。<a href=\"https://github.com/flask-restful/flask-restful/issues/380\">See this issue for more details</a></p>\n</blockquote>\n<h2 id=\"Multiple-Locations\"><a href=\"#Multiple-Locations\" class=\"headerlink\" title=\"Multiple Locations\"></a>Multiple Locations</h2><p>可以通过传入一个 list 制定多个 location:<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">parser.add_argument(<span class=\"string\">'text'</span>, location=[<span class=\"string\">'headers'</span>, <span class=\"string\">'values'</span>])</div></pre></td></tr></table></figure></p>\n<p>当指定了多个 location 时，从所有 locations 里面取出的参数将会合并到一个<a href=\"http://werkzeug.pocoo.org/docs/0.11/datastructures/#werkzeug.datastructures.MultiDict\">MultiDict</a>里，location 列出了最终结果集里面的取值顺序。</p>\n<p>如果参数 location 列表里面包括了 <a href=\"http://flask.pocoo.org/docs/0.11/api/#flask.Request.headers\">headers</a> location, 则参数名字将不再大小写敏感，将必需和它们的 title case 名字相匹配（<a href=\"https://docs.python.org/3/library/stdtypes.html#str.title\">str.title()</a>), 指定 <code>location=&#39;headers&#39;</code>(非 list)将会保持大小写敏感。</p>\n<h2 id=\"解析继承-Parser-Inheritance\"><a href=\"#解析继承-Parser-Inheritance\" class=\"headerlink\" title=\"解析继承(Parser Inheritance)\"></a>解析继承(Parser Inheritance)</h2><p>你经常会对每一个资源使用不同的解析器。问题在于很多的解析器需要解析相同的参数。相比于每次重新写相同的参数，你可以写一个父解析器包含所有的共享参数，通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.copy\">copy()</a> 方法来扩展它。你可以通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.replace_argument\">replace_argument()</a> 来替换任意参数。或者通过 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser.remove_argument\">remove_argument()</a> 来删除参数， 例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int)</div><div class=\"line\"></div><div class=\"line\">parser_copy = parser.copy()</div><div class=\"line\">parser_copy.add_argument(<span class=\"string\">'bar'</span>, type=int)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># parser_copy has both 'foo' and 'bar'</span></div><div class=\"line\"></div><div class=\"line\">parser_copy.replace_argument(<span class=\"string\">'foo'</span>, required=<span class=\"keyword\">True</span>, location=<span class=\"string\">'json'</span>)</div><div class=\"line\"><span class=\"comment\"># 'foo' is now a required str located in json, not an int as defined</span></div><div class=\"line\"><span class=\"comment\">#  by original parser</span></div><div class=\"line\"></div><div class=\"line\">parser_copy.remove_argument(<span class=\"string\">'foo'</span>)</div><div class=\"line\"><span class=\"comment\"># parser_copy no longer has 'foo' argument</span></div></pre></td></tr></table></figure>\n<h2 id=\"错误处理-Error-Handling\"><a href=\"#错误处理-Error-Handling\" class=\"headerlink\" title=\"错误处理(Error Handling)\"></a>错误处理(Error Handling)</h2><p>RequestParser 提供的默认处理错误的方式是在第一次错误发生的地方终止程序，这在你需要处理很多参数比较耗时的情况下是有益处的。然而，将错误捆绑在一起返回给客户端总是好的。这个行为可以在 Flask 层面或者在 RequestParser 实例上指定。在 RequestParser 上绑定错误信息，需要传入 bundle_errors，例如：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser(bundle_errors=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'bar'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If a request comes in not containing both 'foo' and 'bar', the error that</span></div><div class=\"line\"><span class=\"comment\"># will come back will look something like this.</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"message\"</span>:  &#123;</div><div class=\"line\">        <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"foo error message\"</span>,</div><div class=\"line\">        <span class=\"string\">\"bar\"</span>: <span class=\"string\">\"bar error message\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The default behavior would only return the first error</span></div><div class=\"line\"></div><div class=\"line\">parser = RequestParser()</div><div class=\"line\">parser.add_argument(<span class=\"string\">'foo'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\">parser.add_argument(<span class=\"string\">'bar'</span>, type=int, required=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"message\"</span>:  &#123;</div><div class=\"line\">        <span class=\"string\">\"foo\"</span>: <span class=\"string\">\"foo error message\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 Flask 层面配置入下：<br><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</div><div class=\"line\"></div><div class=\"line\">app = Flask(__name__)</div><div class=\"line\">app.config[<span class=\"string\">'BUNDLE_ERRORS'</span>] = <span class=\"keyword\">True</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>警告<br>BUNDLE_ERRORS 是 global 设置，会覆盖 <a href=\"http://flask-restful.readthedocs.io/en/0.3.5/api.html#reqparse.RequestParser\">RequestParser</a> 的 bundle_errors 设置。</p>\n</blockquote>\n<h2 id=\"错误信息-Error-Messages\"><a href=\"#错误信息-Error-Messages\" class=\"headerlink\" title=\"错误信息(Error Messages)\"></a>错误信息(Error Messages)</h2><p>每个参数对应的错误信息可以通过 help 参数指定。</p>\n<p>如果没有指定 help 参数，则这个参数对应的错误信息将会是它本身的 type error 的字符串表示。如果指定 help，则错误信息就是 help 的值。</p>\n<p>help 可以包含一个插入的 token，{error_msg}，它会被替换为 type error 的字符串。这种方式允许了自定义化的显示原始错误信息：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> flask_restful <span class=\"keyword\">import</span> reqparse</div><div class=\"line\"></div><div class=\"line\">parser = reqparse.RequestParser() parser.add_argument(</div><div class=\"line\"></div><div class=\"line\">‘foo’, choices=(‘one’, ‘two’), help=’Bad choice: &#123;error_msg&#125;’</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># If a request comes in with a value of “three” for foo:</span></div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">“message”: &#123;</div><div class=\"line\">“foo”: “Bad choice: three <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> a valid choice”,</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"flask session 的坑","date":"2016-12-02T10:33:45.000Z","_content":"\n最近将 token 授权改为 session-cookie 方式，后期搭建 https 配合，提高网站安全级别。\n移动端的 API 请求采用 Authorization 中加入时限 token 的方式。\n\n<!--more-->\n\n# session cookie 简介\n\ncookie 是浏览器存储在本地用于和服务器进行交互的凭证，由于 http 是无状态的，当我们需要持续与用户交互时，就有必要采用一种方式来产生一种持续的“会话”。而 cookie 就是实现这种会话的必备要素\n\n当用户第一次向服务器发送（需要交互）的请求时，比如登陆操作，服务器的返回 response header 中会加入 set-cookie 字段，对应的值即为具有时效性的经过哈希的长文本。浏览器将这个值保存在本地，以后每次请求都将这个值加入 request header 中，key 名称即为 cookie。之后服务器程序会从 request header 中提取这个值，并判断是否过期或者无效。如果值有效且在有效期内，表明当前用户登录权限仍然有效，则继续进行其他逻辑处理。否则返回需要重新授权。\n\nsession 是服务器端用来保存用户信息的一种数据结构，session 可以借助很多方式来存储数据，比如文件系统，数据库等。flask 使用 python 字典来实现 session，数据存储在内存当中，核心功能就是判断session 是否有效，轻量简单。如果使用文件系统或者数据库实现 session 则还可以存储其他相关数据。\n\n\n# flask session\n\nflask 默认每次请求，都会在 response header 中，加入 set-cookie 字段，这样在设定的实效期内，只要用户向服务器发送请求，实效期就会向后推，导致授权一直有效。\n而我们希望，当第一次授权后，用户正常使用，过了时效期用户需要重新授权。\n\n通过设定 `SESSION_REFRESH_EACH_REQUEST = False ` 来将这种行为取消。同时需要将 session 变量的 permanent 属性设置为 True。 使用 `PERMANENT_SESSION_LIFETIME` 来设定时效期，默认为31天。\n\n基本上通过设定这些变量就可以控制 seesion 行为。\n\n遇到的坑就是在本地运行都是符合预期的，但上传到服务器就会出现错误，服务器返回 response 一直有 set-cookie header。折腾了半天，源码看了好几遍就是没发现原因，最后发现是 flask 版本不一致出的问题。心碎。。。","source":"_posts/flask-session-的坑.md","raw":"---\ntitle: flask session 的坑\ndate: 2016-12-02 18:33:45\ntags: \n\t\t- flask\n\t\t- session\n\t\t- python\ncategories: 技术相关\n---\n\n最近将 token 授权改为 session-cookie 方式，后期搭建 https 配合，提高网站安全级别。\n移动端的 API 请求采用 Authorization 中加入时限 token 的方式。\n\n<!--more-->\n\n# session cookie 简介\n\ncookie 是浏览器存储在本地用于和服务器进行交互的凭证，由于 http 是无状态的，当我们需要持续与用户交互时，就有必要采用一种方式来产生一种持续的“会话”。而 cookie 就是实现这种会话的必备要素\n\n当用户第一次向服务器发送（需要交互）的请求时，比如登陆操作，服务器的返回 response header 中会加入 set-cookie 字段，对应的值即为具有时效性的经过哈希的长文本。浏览器将这个值保存在本地，以后每次请求都将这个值加入 request header 中，key 名称即为 cookie。之后服务器程序会从 request header 中提取这个值，并判断是否过期或者无效。如果值有效且在有效期内，表明当前用户登录权限仍然有效，则继续进行其他逻辑处理。否则返回需要重新授权。\n\nsession 是服务器端用来保存用户信息的一种数据结构，session 可以借助很多方式来存储数据，比如文件系统，数据库等。flask 使用 python 字典来实现 session，数据存储在内存当中，核心功能就是判断session 是否有效，轻量简单。如果使用文件系统或者数据库实现 session 则还可以存储其他相关数据。\n\n\n# flask session\n\nflask 默认每次请求，都会在 response header 中，加入 set-cookie 字段，这样在设定的实效期内，只要用户向服务器发送请求，实效期就会向后推，导致授权一直有效。\n而我们希望，当第一次授权后，用户正常使用，过了时效期用户需要重新授权。\n\n通过设定 `SESSION_REFRESH_EACH_REQUEST = False ` 来将这种行为取消。同时需要将 session 变量的 permanent 属性设置为 True。 使用 `PERMANENT_SESSION_LIFETIME` 来设定时效期，默认为31天。\n\n基本上通过设定这些变量就可以控制 seesion 行为。\n\n遇到的坑就是在本地运行都是符合预期的，但上传到服务器就会出现错误，服务器返回 response 一直有 set-cookie header。折腾了半天，源码看了好几遍就是没发现原因，最后发现是 flask 版本不一致出的问题。心碎。。。","slug":"flask-session-的坑","published":1,"updated":"2016-12-02T11:33:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55v4001qk4rnwnysffdu","content":"<p>最近将 token 授权改为 session-cookie 方式，后期搭建 https 配合，提高网站安全级别。<br>移动端的 API 请求采用 Authorization 中加入时限 token 的方式。</p>\n<a id=\"more\"></a>\n<h1 id=\"session-cookie-简介\"><a href=\"#session-cookie-简介\" class=\"headerlink\" title=\"session cookie 简介\"></a>session cookie 简介</h1><p>cookie 是浏览器存储在本地用于和服务器进行交互的凭证，由于 http 是无状态的，当我们需要持续与用户交互时，就有必要采用一种方式来产生一种持续的“会话”。而 cookie 就是实现这种会话的必备要素</p>\n<p>当用户第一次向服务器发送（需要交互）的请求时，比如登陆操作，服务器的返回 response header 中会加入 set-cookie 字段，对应的值即为具有时效性的经过哈希的长文本。浏览器将这个值保存在本地，以后每次请求都将这个值加入 request header 中，key 名称即为 cookie。之后服务器程序会从 request header 中提取这个值，并判断是否过期或者无效。如果值有效且在有效期内，表明当前用户登录权限仍然有效，则继续进行其他逻辑处理。否则返回需要重新授权。</p>\n<p>session 是服务器端用来保存用户信息的一种数据结构，session 可以借助很多方式来存储数据，比如文件系统，数据库等。flask 使用 python 字典来实现 session，数据存储在内存当中，核心功能就是判断session 是否有效，轻量简单。如果使用文件系统或者数据库实现 session 则还可以存储其他相关数据。</p>\n<h1 id=\"flask-session\"><a href=\"#flask-session\" class=\"headerlink\" title=\"flask session\"></a>flask session</h1><p>flask 默认每次请求，都会在 response header 中，加入 set-cookie 字段，这样在设定的实效期内，只要用户向服务器发送请求，实效期就会向后推，导致授权一直有效。<br>而我们希望，当第一次授权后，用户正常使用，过了时效期用户需要重新授权。</p>\n<p>通过设定 <code>SESSION_REFRESH_EACH_REQUEST = False</code> 来将这种行为取消。同时需要将 session 变量的 permanent 属性设置为 True。 使用 <code>PERMANENT_SESSION_LIFETIME</code> 来设定时效期，默认为31天。</p>\n<p>基本上通过设定这些变量就可以控制 seesion 行为。</p>\n<p>遇到的坑就是在本地运行都是符合预期的，但上传到服务器就会出现错误，服务器返回 response 一直有 set-cookie header。折腾了半天，源码看了好几遍就是没发现原因，最后发现是 flask 版本不一致出的问题。心碎。。。</p>\n","excerpt":"<p>最近将 token 授权改为 session-cookie 方式，后期搭建 https 配合，提高网站安全级别。<br>移动端的 API 请求采用 Authorization 中加入时限 token 的方式。</p>","more":"<h1 id=\"session-cookie-简介\"><a href=\"#session-cookie-简介\" class=\"headerlink\" title=\"session cookie 简介\"></a>session cookie 简介</h1><p>cookie 是浏览器存储在本地用于和服务器进行交互的凭证，由于 http 是无状态的，当我们需要持续与用户交互时，就有必要采用一种方式来产生一种持续的“会话”。而 cookie 就是实现这种会话的必备要素</p>\n<p>当用户第一次向服务器发送（需要交互）的请求时，比如登陆操作，服务器的返回 response header 中会加入 set-cookie 字段，对应的值即为具有时效性的经过哈希的长文本。浏览器将这个值保存在本地，以后每次请求都将这个值加入 request header 中，key 名称即为 cookie。之后服务器程序会从 request header 中提取这个值，并判断是否过期或者无效。如果值有效且在有效期内，表明当前用户登录权限仍然有效，则继续进行其他逻辑处理。否则返回需要重新授权。</p>\n<p>session 是服务器端用来保存用户信息的一种数据结构，session 可以借助很多方式来存储数据，比如文件系统，数据库等。flask 使用 python 字典来实现 session，数据存储在内存当中，核心功能就是判断session 是否有效，轻量简单。如果使用文件系统或者数据库实现 session 则还可以存储其他相关数据。</p>\n<h1 id=\"flask-session\"><a href=\"#flask-session\" class=\"headerlink\" title=\"flask session\"></a>flask session</h1><p>flask 默认每次请求，都会在 response header 中，加入 set-cookie 字段，这样在设定的实效期内，只要用户向服务器发送请求，实效期就会向后推，导致授权一直有效。<br>而我们希望，当第一次授权后，用户正常使用，过了时效期用户需要重新授权。</p>\n<p>通过设定 <code>SESSION_REFRESH_EACH_REQUEST = False</code> 来将这种行为取消。同时需要将 session 变量的 permanent 属性设置为 True。 使用 <code>PERMANENT_SESSION_LIFETIME</code> 来设定时效期，默认为31天。</p>\n<p>基本上通过设定这些变量就可以控制 seesion 行为。</p>\n<p>遇到的坑就是在本地运行都是符合预期的，但上传到服务器就会出现错误，服务器返回 response 一直有 set-cookie header。折腾了半天，源码看了好几遍就是没发现原因，最后发现是 flask 版本不一致出的问题。心碎。。。</p>"},{"title":"增加 python 包搜索路径(Mac系统，或类Unix系统)","date":"2016-04-20T08:42:11.000Z","_content":"\n## 描述\n\n有的时候我们需要引用某一个目录下的某些 py 文件，但是又不希望将该目录放入 site-packages 下面。\n可以通过下面方法将目录加入 python 搜索路径\n\n\tcd ~\n\n切换到 home 目录下，查看当前目录下的文件， 应该会看到一个 .bashrc 文件(根据所使用的 shell 不同名称会有不同，比如我使用的是 zash，下面的文件是 .zshrc)\n\n<!--more-->\n\n修改此文件\n\n\tvim .bashrc\n\n\n在里面加上如下行：\n\n\texport PYTHONPATH=\"${PYTHONPATH}:/your/path\"\n\n退出 vim 后运行，使其生效\n\n\tsource .bashrc\n\n\n","source":"_posts/增加-python-包搜索路径.md","raw":"---\ntitle: 增加 python 包搜索路径(Mac系统，或类Unix系统)\ndate: 2016-04-20 16:42:11\ntags:\n\t- python\n\t- 小问题\ncategories: 技术相关\n---\n\n## 描述\n\n有的时候我们需要引用某一个目录下的某些 py 文件，但是又不希望将该目录放入 site-packages 下面。\n可以通过下面方法将目录加入 python 搜索路径\n\n\tcd ~\n\n切换到 home 目录下，查看当前目录下的文件， 应该会看到一个 .bashrc 文件(根据所使用的 shell 不同名称会有不同，比如我使用的是 zash，下面的文件是 .zshrc)\n\n<!--more-->\n\n修改此文件\n\n\tvim .bashrc\n\n\n在里面加上如下行：\n\n\texport PYTHONPATH=\"${PYTHONPATH}:/your/path\"\n\n退出 vim 后运行，使其生效\n\n\tsource .bashrc\n\n\n","slug":"增加-python-包搜索路径","published":1,"updated":"2016-09-19T05:52:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vc001uk4rn3ydhb0w9","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>有的时候我们需要引用某一个目录下的某些 py 文件，但是又不希望将该目录放入 site-packages 下面。<br>可以通过下面方法将目录加入 python 搜索路径</p>\n<pre><code>cd ~\n</code></pre><p>切换到 home 目录下，查看当前目录下的文件， 应该会看到一个 .bashrc 文件(根据所使用的 shell 不同名称会有不同，比如我使用的是 zash，下面的文件是 .zshrc)</p>\n<a id=\"more\"></a>\n<p>修改此文件</p>\n<pre><code>vim .bashrc\n</code></pre><p>在里面加上如下行：</p>\n<pre><code>export PYTHONPATH=&quot;${PYTHONPATH}:/your/path&quot;\n</code></pre><p>退出 vim 后运行，使其生效</p>\n<pre><code>source .bashrc\n</code></pre>","excerpt":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>有的时候我们需要引用某一个目录下的某些 py 文件，但是又不希望将该目录放入 site-packages 下面。<br>可以通过下面方法将目录加入 python 搜索路径</p>\n<pre><code>cd ~\n</code></pre><p>切换到 home 目录下，查看当前目录下的文件， 应该会看到一个 .bashrc 文件(根据所使用的 shell 不同名称会有不同，比如我使用的是 zash，下面的文件是 .zshrc)</p>","more":"<p>修改此文件</p>\n<pre><code>vim .bashrc\n</code></pre><p>在里面加上如下行：</p>\n<pre><code>export PYTHONPATH=&quot;${PYTHONPATH}:/your/path&quot;\n</code></pre><p>退出 vim 后运行，使其生效</p>\n<pre><code>source .bashrc\n</code></pre>"},{"title":"what is WSGI","date":"2016-04-05T04:17:27.000Z","_content":"\n# Web Server Gateway Interface\n\nWeb Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python\nweb 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.\n\n<!--more -->\n## Idea\n\nPython web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。\n\nWSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。\n\n## 规范概览\n\nWSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。\n\n所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n* 重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。\n* 允许在一个进程中同时运行多个应用程序或应用框架。\n* 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n* 进行内容后处理，例如应用XSLT样式表。\n\n## 示例程序\n\n用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：\n\n```py\ndef app(environ, start_response):\n\tstart_response('200 OK', [('Content-Type', 'text/plain')])\n\tyield \"Hello world!\\n\"\n```\n\n其中\n\n* 第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。\n* 第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”\n* 第三行将响应消息的消息体返回。\n\n[原文链接](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface)\n\n\n","source":"_posts/what-is-WSGI.md","raw":"---\ntitle: what is WSGI\ndate: 2016-04-05 12:17:27\ntags: WSGI\ncategories: 技术相关\n---\n\n# Web Server Gateway Interface\n\nWeb Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python\nweb 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.\n\n<!--more -->\n## Idea\n\nPython web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。\n\nWSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。\n\n## 规范概览\n\nWSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。\n\n所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n* 重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。\n* 允许在一个进程中同时运行多个应用程序或应用框架。\n* 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n* 进行内容后处理，例如应用XSLT样式表。\n\n## 示例程序\n\n用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：\n\n```py\ndef app(environ, start_response):\n\tstart_response('200 OK', [('Content-Type', 'text/plain')])\n\tyield \"Hello world!\\n\"\n```\n\n其中\n\n* 第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。\n* 第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”\n* 第三行将响应消息的消息体返回。\n\n[原文链接](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface)\n\n\n","slug":"what-is-WSGI","published":1,"updated":"2016-04-17T09:48:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vf001wk4rnu36d13mj","content":"<h1 id=\"Web-Server-Gateway-Interface\"><a href=\"#Web-Server-Gateway-Interface\" class=\"headerlink\" title=\"Web Server Gateway Interface\"></a>Web Server Gateway Interface</h1><p>Web Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python<br>web 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.</p>\n<a id=\"more\"></a>\n<h2 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h2><p>Python web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。</p>\n<p>WSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。</p>\n<h2 id=\"规范概览\"><a href=\"#规范概览\" class=\"headerlink\" title=\"规范概览\"></a>规范概览</h2><p>WSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。</p>\n<p>所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p>\n<ul>\n<li>重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。</li>\n<li>允许在一个进程中同时运行多个应用程序或应用框架。</li>\n<li>负载均衡和远程处理，通过在网络上转发请求和响应消息。</li>\n<li>进行内容后处理，例如应用XSLT样式表。</li>\n</ul>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">app</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">\tstart_response(<span class=\"string\">'200 OK'</span>, [(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"string\">\"Hello world!\\n\"</span></div></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。</li>\n<li>第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”</li>\n<li>第三行将响应消息的消息体返回。</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","excerpt":"<h1 id=\"Web-Server-Gateway-Interface\"><a href=\"#Web-Server-Gateway-Interface\" class=\"headerlink\" title=\"Web Server Gateway Interface\"></a>Web Server Gateway Interface</h1><p>Web Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python<br>web 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.</p>","more":"<h2 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h2><p>Python web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。</p>\n<p>WSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。</p>\n<h2 id=\"规范概览\"><a href=\"#规范概览\" class=\"headerlink\" title=\"规范概览\"></a>规范概览</h2><p>WSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。</p>\n<p>所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p>\n<ul>\n<li>重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。</li>\n<li>允许在一个进程中同时运行多个应用程序或应用框架。</li>\n<li>负载均衡和远程处理，通过在网络上转发请求和响应消息。</li>\n<li>进行内容后处理，例如应用XSLT样式表。</li>\n</ul>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">app</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">\tstart_response(<span class=\"string\">'200 OK'</span>, [(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"string\">\"Hello world!\\n\"</span></div></pre></td></tr></table></figure>\n<p>其中</p>\n<ul>\n<li>第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。</li>\n<li>第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”</li>\n<li>第三行将响应消息的消息体返回。</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\">原文链接</a></p>"},{"title":"将python 脚本制作成命令","date":"2016-08-25T08:55:18.000Z","_content":"\n## 描述\n\n有时候写了一个 python 脚本来执行某些操作， 但又不希望每次都敲 python ... 来执行脚本，下面的方法就是将脚本制作成命令。这样就方便很多。\n\n\n<!--more-->\n\n## 步骤\n\n### 编写脚本\n\n以我写的统计代码行数的脚本为例\n\n```py\n#!/usr/bin/env python\nimport fnmatch\nimport os\nimport sys\n\n\ndef count_one_file(filename):\n       \twith open(filename, 'r') as f:\n       \t\treturn len(f.readlines())\n\n\n\ndef count_files(path, ftype):\n       \tres = {}\n       \tfor ft in ftype:\n       \t\tans = 0\n       \t\tfor root, dirnames, filenames in os.walk(path):\n       \t\t    for filename in fnmatch.filter(filenames, '*.'+ft):\n       \t\t        ans += count_one_file(os.path.join(root, filename))\n       \t\tres.update({ft: ans})\n       \treturn res\n\n\ndef usage():\n       \tprint 'ccode folder_name file_type(py, m, h.....)\\n'\n       \tprint 'example:\\n'\n       \tprint 'ccode examplefolder py'\n\nif __name__ == '__main__':\n       \ttry:\n       \t\tpath = sys.argv[1]\n       \t\tftype = sys.argv[2:]\n       \t\tprint count_files(path, ftype)\n       \texcept:\n       \t\tusage()\n```\n\n注意要在代码第一行加上 #!/usr/bin/env python，目的是为了告诉终端使用什么程序来执行代码。你可以在代码里面接受命令行参数，实现更复杂的操作。\n\n记得给脚本加上可执行权限\n\n       chmod +x 'yourscript_name'\n\n### 查看你的可执行路径\n\n运行以下命令：\n\n\techo $PATH\n\n即可查看你的 PATH 路径，在其中一个目录下运行\n\n\tln -s /path/to/yourscript command_name\n\n第一个路径参数是你的脚本的实际存储位置，command_name 是你自定义的命令名称，之后你就可以在任何目录下运行这个命令了:)\n\n\n\n\n\n","source":"_posts/将python-脚本制作成命令.md","raw":"---\ntitle: 将python 脚本制作成命令\ndate: 2016-08-25 16:55:18\ntags:\n\t- python\ncategories: 技术相关\n---\n\n## 描述\n\n有时候写了一个 python 脚本来执行某些操作， 但又不希望每次都敲 python ... 来执行脚本，下面的方法就是将脚本制作成命令。这样就方便很多。\n\n\n<!--more-->\n\n## 步骤\n\n### 编写脚本\n\n以我写的统计代码行数的脚本为例\n\n```py\n#!/usr/bin/env python\nimport fnmatch\nimport os\nimport sys\n\n\ndef count_one_file(filename):\n       \twith open(filename, 'r') as f:\n       \t\treturn len(f.readlines())\n\n\n\ndef count_files(path, ftype):\n       \tres = {}\n       \tfor ft in ftype:\n       \t\tans = 0\n       \t\tfor root, dirnames, filenames in os.walk(path):\n       \t\t    for filename in fnmatch.filter(filenames, '*.'+ft):\n       \t\t        ans += count_one_file(os.path.join(root, filename))\n       \t\tres.update({ft: ans})\n       \treturn res\n\n\ndef usage():\n       \tprint 'ccode folder_name file_type(py, m, h.....)\\n'\n       \tprint 'example:\\n'\n       \tprint 'ccode examplefolder py'\n\nif __name__ == '__main__':\n       \ttry:\n       \t\tpath = sys.argv[1]\n       \t\tftype = sys.argv[2:]\n       \t\tprint count_files(path, ftype)\n       \texcept:\n       \t\tusage()\n```\n\n注意要在代码第一行加上 #!/usr/bin/env python，目的是为了告诉终端使用什么程序来执行代码。你可以在代码里面接受命令行参数，实现更复杂的操作。\n\n记得给脚本加上可执行权限\n\n       chmod +x 'yourscript_name'\n\n### 查看你的可执行路径\n\n运行以下命令：\n\n\techo $PATH\n\n即可查看你的 PATH 路径，在其中一个目录下运行\n\n\tln -s /path/to/yourscript command_name\n\n第一个路径参数是你的脚本的实际存储位置，command_name 是你自定义的命令名称，之后你就可以在任何目录下运行这个命令了:)\n\n\n\n\n\n","slug":"将python-脚本制作成命令","published":1,"updated":"2016-09-17T01:25:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vh0020k4rndh62nd3d","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>有时候写了一个 python 脚本来执行某些操作， 但又不希望每次都敲 python … 来执行脚本，下面的方法就是将脚本制作成命令。这样就方便很多。</p>\n<a id=\"more\"></a>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h3><p>以我写的统计代码行数的脚本为例</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_one_file</span><span class=\"params\">(filename)</span>:</span></div><div class=\"line\">       \t<span class=\"keyword\">with</span> open(filename, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> len(f.readlines())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_files</span><span class=\"params\">(path, ftype)</span>:</span></div><div class=\"line\">       \tres = &#123;&#125;</div><div class=\"line\">       \t<span class=\"keyword\">for</span> ft <span class=\"keyword\">in</span> ftype:</div><div class=\"line\">       \t\tans = <span class=\"number\">0</span></div><div class=\"line\">       \t\t<span class=\"keyword\">for</span> root, dirnames, filenames <span class=\"keyword\">in</span> os.walk(path):</div><div class=\"line\">       \t\t    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> fnmatch.filter(filenames, <span class=\"string\">'*.'</span>+ft):</div><div class=\"line\">       \t\t        ans += count_one_file(os.path.join(root, filename))</div><div class=\"line\">       \t\tres.update(&#123;ft: ans&#125;)</div><div class=\"line\">       \t<span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">usage</span><span class=\"params\">()</span>:</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'ccode folder_name file_type(py, m, h.....)\\n'</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'example:\\n'</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'ccode examplefolder py'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">       \t<span class=\"keyword\">try</span>:</div><div class=\"line\">       \t\tpath = sys.argv[<span class=\"number\">1</span>]</div><div class=\"line\">       \t\tftype = sys.argv[<span class=\"number\">2</span>:]</div><div class=\"line\">       \t\t<span class=\"keyword\">print</span> count_files(path, ftype)</div><div class=\"line\">       \t<span class=\"keyword\">except</span>:</div><div class=\"line\">       \t\tusage()</div></pre></td></tr></table></figure>\n<p>注意要在代码第一行加上 #!/usr/bin/env python，目的是为了告诉终端使用什么程序来执行代码。你可以在代码里面接受命令行参数，实现更复杂的操作。</p>\n<p>记得给脚本加上可执行权限</p>\n<pre><code>chmod +x &apos;yourscript_name&apos;\n</code></pre><h3 id=\"查看你的可执行路径\"><a href=\"#查看你的可执行路径\" class=\"headerlink\" title=\"查看你的可执行路径\"></a>查看你的可执行路径</h3><p>运行以下命令：</p>\n<pre><code>echo $PATH\n</code></pre><p>即可查看你的 PATH 路径，在其中一个目录下运行</p>\n<pre><code>ln -s /path/to/yourscript command_name\n</code></pre><p>第一个路径参数是你的脚本的实际存储位置，command_name 是你自定义的命令名称，之后你就可以在任何目录下运行这个命令了:)</p>\n","excerpt":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>有时候写了一个 python 脚本来执行某些操作， 但又不希望每次都敲 python … 来执行脚本，下面的方法就是将脚本制作成命令。这样就方便很多。</p>","more":"<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h3><p>以我写的统计代码行数的脚本为例</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"keyword\">import</span> fnmatch</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_one_file</span><span class=\"params\">(filename)</span>:</span></div><div class=\"line\">       \t<span class=\"keyword\">with</span> open(filename, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">       \t\t<span class=\"keyword\">return</span> len(f.readlines())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_files</span><span class=\"params\">(path, ftype)</span>:</span></div><div class=\"line\">       \tres = &#123;&#125;</div><div class=\"line\">       \t<span class=\"keyword\">for</span> ft <span class=\"keyword\">in</span> ftype:</div><div class=\"line\">       \t\tans = <span class=\"number\">0</span></div><div class=\"line\">       \t\t<span class=\"keyword\">for</span> root, dirnames, filenames <span class=\"keyword\">in</span> os.walk(path):</div><div class=\"line\">       \t\t    <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> fnmatch.filter(filenames, <span class=\"string\">'*.'</span>+ft):</div><div class=\"line\">       \t\t        ans += count_one_file(os.path.join(root, filename))</div><div class=\"line\">       \t\tres.update(&#123;ft: ans&#125;)</div><div class=\"line\">       \t<span class=\"keyword\">return</span> res</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">usage</span><span class=\"params\">()</span>:</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'ccode folder_name file_type(py, m, h.....)\\n'</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'example:\\n'</span></div><div class=\"line\">       \t<span class=\"keyword\">print</span> <span class=\"string\">'ccode examplefolder py'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">       \t<span class=\"keyword\">try</span>:</div><div class=\"line\">       \t\tpath = sys.argv[<span class=\"number\">1</span>]</div><div class=\"line\">       \t\tftype = sys.argv[<span class=\"number\">2</span>:]</div><div class=\"line\">       \t\t<span class=\"keyword\">print</span> count_files(path, ftype)</div><div class=\"line\">       \t<span class=\"keyword\">except</span>:</div><div class=\"line\">       \t\tusage()</div></pre></td></tr></table></figure>\n<p>注意要在代码第一行加上 #!/usr/bin/env python，目的是为了告诉终端使用什么程序来执行代码。你可以在代码里面接受命令行参数，实现更复杂的操作。</p>\n<p>记得给脚本加上可执行权限</p>\n<pre><code>chmod +x &apos;yourscript_name&apos;\n</code></pre><h3 id=\"查看你的可执行路径\"><a href=\"#查看你的可执行路径\" class=\"headerlink\" title=\"查看你的可执行路径\"></a>查看你的可执行路径</h3><p>运行以下命令：</p>\n<pre><code>echo $PATH\n</code></pre><p>即可查看你的 PATH 路径，在其中一个目录下运行</p>\n<pre><code>ln -s /path/to/yourscript command_name\n</code></pre><p>第一个路径参数是你的脚本的实际存储位置，command_name 是你自定义的命令名称，之后你就可以在任何目录下运行这个命令了:)</p>"},{"title":"数据库连接占满504 error","date":"2016-10-25T02:12:02.000Z","_content":"\n一般情况下数据库的插入，删除，更新操作会做 exception handle, 很少想到查询也需要这种操作。我在后台使用 UUID 作为数据库 ID 主键，当前端使用非规范的 uuid 进行查询的时候会触发 StatementError: (exceptions.ValueError) 这时候数据库链接并不会自己断开，导致多次非规范查询后数据库连接池被占满，返回 504 timeout 错误码。\n\n所以不论什么时候都要保证一次请求过后相应的数据库 session 连接关闭。\n\n<!--more-->\n\n```py\ndef handle_exception(f):\n    @wraps(f)\n    def decoed(*args, **kwargs):\n        raise_e = kwargs.pop(\"raise_e\", True)\n        try:\n            return f(*args, **kwargs)\n        except Exception as e:\n            db_rollback()\n            if raise_e is True:\n                raise\n            elif isinstance(raise_e, type) and issubclass(raise_e, Exception):\n                if isinstance(e, raise_e):\n                    raise\n            db.session.close()          # 查询出错之后一定要保证数据库连接关闭，否则会占用连接导致504错误\n    return decoed\n```","source":"_posts/数据库连接占满504-error.md","raw":"---\ntitle: 数据库连接占满504 error\ndate: 2016-10-25 10:12:02\ntags: 数据库\ncategories: 技术相关\n---\n\n一般情况下数据库的插入，删除，更新操作会做 exception handle, 很少想到查询也需要这种操作。我在后台使用 UUID 作为数据库 ID 主键，当前端使用非规范的 uuid 进行查询的时候会触发 StatementError: (exceptions.ValueError) 这时候数据库链接并不会自己断开，导致多次非规范查询后数据库连接池被占满，返回 504 timeout 错误码。\n\n所以不论什么时候都要保证一次请求过后相应的数据库 session 连接关闭。\n\n<!--more-->\n\n```py\ndef handle_exception(f):\n    @wraps(f)\n    def decoed(*args, **kwargs):\n        raise_e = kwargs.pop(\"raise_e\", True)\n        try:\n            return f(*args, **kwargs)\n        except Exception as e:\n            db_rollback()\n            if raise_e is True:\n                raise\n            elif isinstance(raise_e, type) and issubclass(raise_e, Exception):\n                if isinstance(e, raise_e):\n                    raise\n            db.session.close()          # 查询出错之后一定要保证数据库连接关闭，否则会占用连接导致504错误\n    return decoed\n```","slug":"数据库连接占满504-error","published":1,"updated":"2016-10-25T02:21:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vi0023k4rnf5jq6thx","content":"<p>一般情况下数据库的插入，删除，更新操作会做 exception handle, 很少想到查询也需要这种操作。我在后台使用 UUID 作为数据库 ID 主键，当前端使用非规范的 uuid 进行查询的时候会触发 StatementError: (exceptions.ValueError) 这时候数据库链接并不会自己断开，导致多次非规范查询后数据库连接池被占满，返回 504 timeout 错误码。</p>\n<p>所以不论什么时候都要保证一次请求过后相应的数据库 session 连接关闭。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_exception</span><span class=\"params\">(f)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @wraps(f)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoed</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        raise_e = kwargs.pop(<span class=\"string\">\"raise_e\"</span>, <span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> f(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            db_rollback()</div><div class=\"line\">            <span class=\"keyword\">if</span> raise_e <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> isinstance(raise_e, type) <span class=\"keyword\">and</span> issubclass(raise_e, Exception):</div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(e, raise_e):</div><div class=\"line\">                    <span class=\"keyword\">raise</span></div><div class=\"line\">            db.session.close()          <span class=\"comment\"># 查询出错之后一定要保证数据库连接关闭，否则会占用连接导致504错误</span></div><div class=\"line\">    <span class=\"keyword\">return</span> decoed</div></pre></td></tr></table></figure>","excerpt":"<p>一般情况下数据库的插入，删除，更新操作会做 exception handle, 很少想到查询也需要这种操作。我在后台使用 UUID 作为数据库 ID 主键，当前端使用非规范的 uuid 进行查询的时候会触发 StatementError: (exceptions.ValueError) 这时候数据库链接并不会自己断开，导致多次非规范查询后数据库连接池被占满，返回 504 timeout 错误码。</p>\n<p>所以不论什么时候都要保证一次请求过后相应的数据库 session 连接关闭。</p>","more":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_exception</span><span class=\"params\">(f)</span>:</span></div><div class=\"line\"><span class=\"meta\">    @wraps(f)</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decoed</span><span class=\"params\">(*args, **kwargs)</span>:</span></div><div class=\"line\">        raise_e = kwargs.pop(<span class=\"string\">\"raise_e\"</span>, <span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> f(*args, **kwargs)</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            db_rollback()</div><div class=\"line\">            <span class=\"keyword\">if</span> raise_e <span class=\"keyword\">is</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\">            <span class=\"keyword\">elif</span> isinstance(raise_e, type) <span class=\"keyword\">and</span> issubclass(raise_e, Exception):</div><div class=\"line\">                <span class=\"keyword\">if</span> isinstance(e, raise_e):</div><div class=\"line\">                    <span class=\"keyword\">raise</span></div><div class=\"line\">            db.session.close()          <span class=\"comment\"># 查询出错之后一定要保证数据库连接关闭，否则会占用连接导致504错误</span></div><div class=\"line\">    <span class=\"keyword\">return</span> decoed</div></pre></td></tr></table></figure>"},{"title":"致优一周年，香山团建","date":"2016-04-01T13:41:51.000Z","_content":"\n今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)\n\n几张美美的景色图\n{% qnimg IMG_0037.JPG title:山道 %}\n{% qnimg IMG_0039.JPG title:花 extend:-basic %}\n<!-- more -->\n{% qnimg IMG_0041.JPG %}\n{% qnimg IMG_0043.JPG title:俯瞰北京城 %}\n{% qnimg IMG_0044.JPG title:技术部合影～ %}\n{% qnimg IMG_0045.JPG title:路边的花 extend:-basic %}\n{% qnimg IMG_0046.JPG extend:-basic %}\n{% qnimg IMG_0049.JPG title:小组合影 %}\n\n{% qnimg IMG_0052.JPG title:我们是第一组登顶哒！ %}\n{% qnimg IMG_0053.JPG %}\n{% qnimg IMG_0056.JPG title:登山途中 %}\n{% qnimg IMG_0057.JPG %}\n\n{% qnimg IMG_0061.JPG title:我和玉琪 %}\n{% qnimg IMG_0062.JPG title:刚刚上山 %}\n{% qnimg IMG_0063.JPG title:小亭子里简单装个逼 %}\n{% qnimg IMG_0064.JPG %}\n\n{% qnimg IMG_0067.JPG title:小游戏 %}\n{% qnimg IMG_0068.JPG title:虚心听讲 %}\n{% qnimg IMG_0070.JPG title:都是知识 %}\n{% qnimg IMG_0071.JPG title::) %}\n{% qnimg IMG_0072.JPG title:都是景点 %}\n{% qnimg IMG_0073.JPG %}\n{% qnimg IMG_0074.JPG %}","source":"_posts/致优一周年，香山团建.md","raw":"---\ntitle: 致优一周年，香山团建\ndate: 2016-04-01 21:41:51\ntags: 致优团建\ncategories: 旅行\n---\n\n今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)\n\n几张美美的景色图\n{% qnimg IMG_0037.JPG title:山道 %}\n{% qnimg IMG_0039.JPG title:花 extend:-basic %}\n<!-- more -->\n{% qnimg IMG_0041.JPG %}\n{% qnimg IMG_0043.JPG title:俯瞰北京城 %}\n{% qnimg IMG_0044.JPG title:技术部合影～ %}\n{% qnimg IMG_0045.JPG title:路边的花 extend:-basic %}\n{% qnimg IMG_0046.JPG extend:-basic %}\n{% qnimg IMG_0049.JPG title:小组合影 %}\n\n{% qnimg IMG_0052.JPG title:我们是第一组登顶哒！ %}\n{% qnimg IMG_0053.JPG %}\n{% qnimg IMG_0056.JPG title:登山途中 %}\n{% qnimg IMG_0057.JPG %}\n\n{% qnimg IMG_0061.JPG title:我和玉琪 %}\n{% qnimg IMG_0062.JPG title:刚刚上山 %}\n{% qnimg IMG_0063.JPG title:小亭子里简单装个逼 %}\n{% qnimg IMG_0064.JPG %}\n\n{% qnimg IMG_0067.JPG title:小游戏 %}\n{% qnimg IMG_0068.JPG title:虚心听讲 %}\n{% qnimg IMG_0070.JPG title:都是知识 %}\n{% qnimg IMG_0071.JPG title::) %}\n{% qnimg IMG_0072.JPG title:都是景点 %}\n{% qnimg IMG_0073.JPG %}\n{% qnimg IMG_0074.JPG %}","slug":"致优一周年，香山团建","published":1,"updated":"2016-04-01T15:25:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vm0027k4rnqne1kqev","content":"<p>今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)</p>\n<p>几张美美的景色图<br><img title=\"山道\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0037.JPG\"><br><img title=\"花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0039.JPG-basic\"><br><a id=\"more\"></a><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0041.JPG\"><br><img title=\"俯瞰北京城\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0043.JPG\"><br><img title=\"技术部合影～\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0044.JPG\"><br><img title=\"路边的花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0045.JPG-basic\"><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0046.JPG-basic\"><br><img title=\"小组合影\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0049.JPG\"></p>\n<img title=\"我们是第一组登顶哒！\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0052.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0053.JPG\">\n<img title=\"登山途中\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0056.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0057.JPG\">\n<img title=\"我和玉琪\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0061.JPG\">\n<img title=\"刚刚上山\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0062.JPG\">\n<img title=\"小亭子里简单装个逼\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0063.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0064.JPG\">\n<img title=\"小游戏\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0067.JPG\">\n<img title=\"虚心听讲\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0068.JPG\">\n<img title=\"都是知识\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0070.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0071.JPG\">\n<img title=\"都是景点\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0072.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0073.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0074.JPG\">","excerpt":"<p>今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)</p>\n<p>几张美美的景色图<br><img title=\"山道\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0037.JPG\"><br><img title=\"花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0039.JPG-basic\"><br>","more":"<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0041.JPG\"><br><img title=\"俯瞰北京城\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0043.JPG\"><br><img title=\"技术部合影～\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0044.JPG\"><br><img title=\"路边的花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0045.JPG-basic\"><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0046.JPG-basic\"><br><img title=\"小组合影\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0049.JPG\"></p>\n<img title=\"我们是第一组登顶哒！\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0052.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0053.JPG\">\n<img title=\"登山途中\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0056.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0057.JPG\">\n<img title=\"我和玉琪\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0061.JPG\">\n<img title=\"刚刚上山\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0062.JPG\">\n<img title=\"小亭子里简单装个逼\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0063.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0064.JPG\">\n<img title=\"小游戏\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0067.JPG\">\n<img title=\"虚心听讲\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0068.JPG\">\n<img title=\"都是知识\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0070.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0071.JPG\">\n<img title=\"都是景点\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0072.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0073.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0074.JPG\">"},{"title":"开发工具","date":"2016-10-28T03:42:05.000Z","_content":"\n# 开发工具\n\n类型          | 推荐\n--------------|-------------\n包管理器      | [HomeBrew] 和 [HomeBrew-Cask]\n终端          | [iTerm2]\n终端编辑器    | Vim、NeoVim 和 Emacs\nGUI 编辑器    | Sublime Text 和 Mac Vim\nIDE 编辑器    | PycharmCE\nPython REPL   | ptpython + IPython\nShell         | zsh + [oh-my-zsh] + [zsh-completions] + [tmux]\n\n\n<!--more-->\n\n# 部署及运维相关技术\n\n## [Docker]\n\n### Docker Hub\n\n支持 Docker 镜像服务，用来存储管理你的 Docker 镜像，有点像 GitHub。\n\n### Docker Toolbox\n\n将多个 Docker 工具如，Engine，Machine，Compose，Kitematic 安装在你的笔记本上，Mac 平台或者 Windows 平台。\n\n更多信息参见 [Docker Quickstart](https://docs.docker.com/engine/quickstart/)\n\n### Docker 加速服务\n\n\techo \"DOCKER_OPTS=\\\"--registry-mirror=https://3ebtlmp4.mirror.aliyuncs.com\\\"\" | sudo tee -a /etc/default/docker\n\tsudo service docker restart\n\n\n## 运维工具 Fabric\n\n中文文档：[Fabric](http://fabric-chs.readthedocs.org/zh_CN/chs/)\n\nFabric 是什么？\n如 README 所说：\n\nFabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。\n\n更具体地说，Fabric 是：\n\n- 一个让你通过 命令行 执行 无参数 Python 函数 的工具；\n\n- 一个让通过 SSH 执行 Shell 命令更加 容易 、 更符合 Python 风格 的命令库（建立于一个更低层次的库）。\n\n自然而然地，大部分用户把这两件事结合着用，使用 Fabric 来写和执行 Python 函数或 task ，以实现与远程服务器的自动化交互。\n\n\n## 错误收集工具 [Sentry]\n\n[Sentry] 作为错误收集工具。debug 利器\n\n\n\n[Docker]:https://www.docker.com/\n[Sentry]:https://getsentry.com/welcome/\n[HomeBrew]: https://github.com/Homebrew/homebrew\n[HomeBrew-Cask]: https://github.com/caskroom/homebrew-cask\n[iTerm2]: https://www.iterm2.com\n[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[zsh-completions]: https://github.com/zsh-users/zsh-completions\n[tmux]: https://tmux.github.io/\n[Flask]:http://flask.pocoo.org/\n[Mkdocs]:http://www.mkdocs.org/","source":"_posts/开发工具.md","raw":"---\ntitle: 开发工具\ndate: 2016-10-28 11:42:05\ntags:\ncategories: 技术相关\n---\n\n# 开发工具\n\n类型          | 推荐\n--------------|-------------\n包管理器      | [HomeBrew] 和 [HomeBrew-Cask]\n终端          | [iTerm2]\n终端编辑器    | Vim、NeoVim 和 Emacs\nGUI 编辑器    | Sublime Text 和 Mac Vim\nIDE 编辑器    | PycharmCE\nPython REPL   | ptpython + IPython\nShell         | zsh + [oh-my-zsh] + [zsh-completions] + [tmux]\n\n\n<!--more-->\n\n# 部署及运维相关技术\n\n## [Docker]\n\n### Docker Hub\n\n支持 Docker 镜像服务，用来存储管理你的 Docker 镜像，有点像 GitHub。\n\n### Docker Toolbox\n\n将多个 Docker 工具如，Engine，Machine，Compose，Kitematic 安装在你的笔记本上，Mac 平台或者 Windows 平台。\n\n更多信息参见 [Docker Quickstart](https://docs.docker.com/engine/quickstart/)\n\n### Docker 加速服务\n\n\techo \"DOCKER_OPTS=\\\"--registry-mirror=https://3ebtlmp4.mirror.aliyuncs.com\\\"\" | sudo tee -a /etc/default/docker\n\tsudo service docker restart\n\n\n## 运维工具 Fabric\n\n中文文档：[Fabric](http://fabric-chs.readthedocs.org/zh_CN/chs/)\n\nFabric 是什么？\n如 README 所说：\n\nFabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。\n\n更具体地说，Fabric 是：\n\n- 一个让你通过 命令行 执行 无参数 Python 函数 的工具；\n\n- 一个让通过 SSH 执行 Shell 命令更加 容易 、 更符合 Python 风格 的命令库（建立于一个更低层次的库）。\n\n自然而然地，大部分用户把这两件事结合着用，使用 Fabric 来写和执行 Python 函数或 task ，以实现与远程服务器的自动化交互。\n\n\n## 错误收集工具 [Sentry]\n\n[Sentry] 作为错误收集工具。debug 利器\n\n\n\n[Docker]:https://www.docker.com/\n[Sentry]:https://getsentry.com/welcome/\n[HomeBrew]: https://github.com/Homebrew/homebrew\n[HomeBrew-Cask]: https://github.com/caskroom/homebrew-cask\n[iTerm2]: https://www.iterm2.com\n[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[zsh-completions]: https://github.com/zsh-users/zsh-completions\n[tmux]: https://tmux.github.io/\n[Flask]:http://flask.pocoo.org/\n[Mkdocs]:http://www.mkdocs.org/","slug":"开发工具","published":1,"updated":"2016-10-28T03:50:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55vn002ak4rnf3mhxogk","content":"<h1 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h1><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>推荐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>包管理器</td>\n<td><a href=\"https://github.com/Homebrew/homebrew\" target=\"_blank\" rel=\"external\">HomeBrew</a> 和 <a href=\"https://github.com/caskroom/homebrew-cask\" target=\"_blank\" rel=\"external\">HomeBrew-Cask</a></td>\n</tr>\n<tr>\n<td>终端</td>\n<td><a href=\"https://www.iterm2.com\" target=\"_blank\" rel=\"external\">iTerm2</a></td>\n</tr>\n<tr>\n<td>终端编辑器</td>\n<td>Vim、NeoVim 和 Emacs</td>\n</tr>\n<tr>\n<td>GUI 编辑器</td>\n<td>Sublime Text 和 Mac Vim</td>\n</tr>\n<tr>\n<td>IDE 编辑器</td>\n<td>PycharmCE</td>\n</tr>\n<tr>\n<td>Python REPL</td>\n<td>ptpython + IPython</td>\n</tr>\n<tr>\n<td>Shell</td>\n<td>zsh + <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a> + <a href=\"https://github.com/zsh-users/zsh-completions\" target=\"_blank\" rel=\"external\">zsh-completions</a> + <a href=\"https://tmux.github.io/\" target=\"_blank\" rel=\"external\">tmux</a></td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h1 id=\"部署及运维相关技术\"><a href=\"#部署及运维相关技术\" class=\"headerlink\" title=\"部署及运维相关技术\"></a>部署及运维相关技术</h1><h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a></h2><h3 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h3><p>支持 Docker 镜像服务，用来存储管理你的 Docker 镜像，有点像 GitHub。</p>\n<h3 id=\"Docker-Toolbox\"><a href=\"#Docker-Toolbox\" class=\"headerlink\" title=\"Docker Toolbox\"></a>Docker Toolbox</h3><p>将多个 Docker 工具如，Engine，Machine，Compose，Kitematic 安装在你的笔记本上，Mac 平台或者 Windows 平台。</p>\n<p>更多信息参见 <a href=\"https://docs.docker.com/engine/quickstart/\" target=\"_blank\" rel=\"external\">Docker Quickstart</a></p>\n<h3 id=\"Docker-加速服务\"><a href=\"#Docker-加速服务\" class=\"headerlink\" title=\"Docker 加速服务\"></a>Docker 加速服务</h3><pre><code>echo &quot;DOCKER_OPTS=\\&quot;--registry-mirror=https://3ebtlmp4.mirror.aliyuncs.com\\&quot;&quot; | sudo tee -a /etc/default/docker\nsudo service docker restart\n</code></pre><h2 id=\"运维工具-Fabric\"><a href=\"#运维工具-Fabric\" class=\"headerlink\" title=\"运维工具 Fabric\"></a>运维工具 Fabric</h2><p>中文文档：<a href=\"http://fabric-chs.readthedocs.org/zh_CN/chs/\" target=\"_blank\" rel=\"external\">Fabric</a></p>\n<p>Fabric 是什么？<br>如 README 所说：</p>\n<p>Fabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。</p>\n<p>更具体地说，Fabric 是：</p>\n<ul>\n<li><p>一个让你通过 命令行 执行 无参数 Python 函数 的工具；</p>\n</li>\n<li><p>一个让通过 SSH 执行 Shell 命令更加 容易 、 更符合 Python 风格 的命令库（建立于一个更低层次的库）。</p>\n</li>\n</ul>\n<p>自然而然地，大部分用户把这两件事结合着用，使用 Fabric 来写和执行 Python 函数或 task ，以实现与远程服务器的自动化交互。</p>\n<h2 id=\"错误收集工具-Sentry\"><a href=\"#错误收集工具-Sentry\" class=\"headerlink\" title=\"错误收集工具 Sentry\"></a>错误收集工具 <a href=\"https://getsentry.com/welcome/\" target=\"_blank\" rel=\"external\">Sentry</a></h2><p><a href=\"https://getsentry.com/welcome/\" target=\"_blank\" rel=\"external\">Sentry</a> 作为错误收集工具。debug 利器</p>\n","excerpt":"<h1 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h1><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>推荐</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>包管理器</td>\n<td><a href=\"https://github.com/Homebrew/homebrew\">HomeBrew</a> 和 <a href=\"https://github.com/caskroom/homebrew-cask\">HomeBrew-Cask</a></td>\n</tr>\n<tr>\n<td>终端</td>\n<td><a href=\"https://www.iterm2.com\">iTerm2</a></td>\n</tr>\n<tr>\n<td>终端编辑器</td>\n<td>Vim、NeoVim 和 Emacs</td>\n</tr>\n<tr>\n<td>GUI 编辑器</td>\n<td>Sublime Text 和 Mac Vim</td>\n</tr>\n<tr>\n<td>IDE 编辑器</td>\n<td>PycharmCE</td>\n</tr>\n<tr>\n<td>Python REPL</td>\n<td>ptpython + IPython</td>\n</tr>\n<tr>\n<td>Shell</td>\n<td>zsh + <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a> + <a href=\"https://github.com/zsh-users/zsh-completions\">zsh-completions</a> + <a href=\"https://tmux.github.io/\">tmux</a></td>\n</tr>\n</tbody>\n</table>","more":"<h1 id=\"部署及运维相关技术\"><a href=\"#部署及运维相关技术\" class=\"headerlink\" title=\"部署及运维相关技术\"></a>部署及运维相关技术</h1><h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a><a href=\"https://www.docker.com/\">Docker</a></h2><h3 id=\"Docker-Hub\"><a href=\"#Docker-Hub\" class=\"headerlink\" title=\"Docker Hub\"></a>Docker Hub</h3><p>支持 Docker 镜像服务，用来存储管理你的 Docker 镜像，有点像 GitHub。</p>\n<h3 id=\"Docker-Toolbox\"><a href=\"#Docker-Toolbox\" class=\"headerlink\" title=\"Docker Toolbox\"></a>Docker Toolbox</h3><p>将多个 Docker 工具如，Engine，Machine，Compose，Kitematic 安装在你的笔记本上，Mac 平台或者 Windows 平台。</p>\n<p>更多信息参见 <a href=\"https://docs.docker.com/engine/quickstart/\">Docker Quickstart</a></p>\n<h3 id=\"Docker-加速服务\"><a href=\"#Docker-加速服务\" class=\"headerlink\" title=\"Docker 加速服务\"></a>Docker 加速服务</h3><pre><code>echo &quot;DOCKER_OPTS=\\&quot;--registry-mirror=https://3ebtlmp4.mirror.aliyuncs.com\\&quot;&quot; | sudo tee -a /etc/default/docker\nsudo service docker restart\n</code></pre><h2 id=\"运维工具-Fabric\"><a href=\"#运维工具-Fabric\" class=\"headerlink\" title=\"运维工具 Fabric\"></a>运维工具 Fabric</h2><p>中文文档：<a href=\"http://fabric-chs.readthedocs.org/zh_CN/chs/\">Fabric</a></p>\n<p>Fabric 是什么？<br>如 README 所说：</p>\n<p>Fabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。</p>\n<p>更具体地说，Fabric 是：</p>\n<ul>\n<li><p>一个让你通过 命令行 执行 无参数 Python 函数 的工具；</p>\n</li>\n<li><p>一个让通过 SSH 执行 Shell 命令更加 容易 、 更符合 Python 风格 的命令库（建立于一个更低层次的库）。</p>\n</li>\n</ul>\n<p>自然而然地，大部分用户把这两件事结合着用，使用 Fabric 来写和执行 Python 函数或 task ，以实现与远程服务器的自动化交互。</p>\n<h2 id=\"错误收集工具-Sentry\"><a href=\"#错误收集工具-Sentry\" class=\"headerlink\" title=\"错误收集工具 Sentry\"></a>错误收集工具 <a href=\"https://getsentry.com/welcome/\">Sentry</a></h2><p><a href=\"https://getsentry.com/welcome/\">Sentry</a> 作为错误收集工具。debug 利器</p>"},{"title":"跨域问题解决方法","date":"2016-04-17T09:33:25.000Z","_content":"\n# 介绍\n\n前端请求非本地域名下的资源，会出现 not allow access 问题\n\n\tXMLHttpRequest cannot load http://127.0.0.1:9100/cc/myprojects/?mobile. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://127.0.0.1:8080' is therefore not allowed access.\n\n# 解决方法\n后端在返回 response 时，在 response hear 增加 'Access-Control-Allow-Origin': '*':\n\n<!--more-->\n```py\nclass JSONResponse(HttpResponse):\n    \"\"\"\n    An HttpResponse that renders its content into JSON.\n    \"\"\"\n    def __init__(self, data, **kwargs):\n        content = json.dumps(data)\n        kwargs['content_type'] = 'application/json'\n        super(JSONResponse, self).__init__(content, **kwargs)\n        self['Access-Control-Allow-Origin'] = '*'\n        self['Cache-Control'] = 'no-cache'\n```\n在初始化父类之后，再在实例上增加如上 header 值。\n","source":"_posts/跨域问题解决方法.md","raw":"---\ntitle: 跨域问题解决方法\ndate: 2016-04-17 17:33:25\ntags: \n    - 跨域问题\n    - 小问题\ncategories: 技术相关\n---\n\n# 介绍\n\n前端请求非本地域名下的资源，会出现 not allow access 问题\n\n\tXMLHttpRequest cannot load http://127.0.0.1:9100/cc/myprojects/?mobile. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://127.0.0.1:8080' is therefore not allowed access.\n\n# 解决方法\n后端在返回 response 时，在 response hear 增加 'Access-Control-Allow-Origin': '*':\n\n<!--more-->\n```py\nclass JSONResponse(HttpResponse):\n    \"\"\"\n    An HttpResponse that renders its content into JSON.\n    \"\"\"\n    def __init__(self, data, **kwargs):\n        content = json.dumps(data)\n        kwargs['content_type'] = 'application/json'\n        super(JSONResponse, self).__init__(content, **kwargs)\n        self['Access-Control-Allow-Origin'] = '*'\n        self['Cache-Control'] = 'no-cache'\n```\n在初始化父类之后，再在实例上增加如上 header 值。\n","slug":"跨域问题解决方法","published":1,"updated":"2016-04-20T09:28:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwbg55yj002qk4rnkwueadp6","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>前端请求非本地域名下的资源，会出现 not allow access 问题</p>\n<pre><code>XMLHttpRequest cannot load http://127.0.0.1:9100/cc/myprojects/?mobile. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://127.0.0.1:8080&apos; is therefore not allowed access.\n</code></pre><h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>后端在返回 response 时，在 response hear 增加 ‘Access-Control-Allow-Origin’: ‘*’:</p>\n<a id=\"more\"></a>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONResponse</span><span class=\"params\">(HttpResponse)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    An HttpResponse that renders its content into JSON.</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, **kwargs)</span>:</span></div><div class=\"line\">        content = json.dumps(data)</div><div class=\"line\">        kwargs[<span class=\"string\">'content_type'</span>] = <span class=\"string\">'application/json'</span></div><div class=\"line\">        super(JSONResponse, self).__init__(content, **kwargs)</div><div class=\"line\">        self[<span class=\"string\">'Access-Control-Allow-Origin'</span>] = <span class=\"string\">'*'</span></div><div class=\"line\">        self[<span class=\"string\">'Cache-Control'</span>] = <span class=\"string\">'no-cache'</span></div></pre></td></tr></table></figure>\n<p>在初始化父类之后，再在实例上增加如上 header 值。</p>\n","excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>前端请求非本地域名下的资源，会出现 not allow access 问题</p>\n<pre><code>XMLHttpRequest cannot load http://127.0.0.1:9100/cc/myprojects/?mobile. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://127.0.0.1:8080&apos; is therefore not allowed access.\n</code></pre><h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p>后端在返回 response 时，在 response hear 增加 ‘Access-Control-Allow-Origin’: ‘*’:</p>","more":"<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONResponse</span><span class=\"params\">(HttpResponse)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    An HttpResponse that renders its content into JSON.</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, **kwargs)</span>:</span></div><div class=\"line\">        content = json.dumps(data)</div><div class=\"line\">        kwargs[<span class=\"string\">'content_type'</span>] = <span class=\"string\">'application/json'</span></div><div class=\"line\">        super(JSONResponse, self).__init__(content, **kwargs)</div><div class=\"line\">        self[<span class=\"string\">'Access-Control-Allow-Origin'</span>] = <span class=\"string\">'*'</span></div><div class=\"line\">        self[<span class=\"string\">'Cache-Control'</span>] = <span class=\"string\">'no-cache'</span></div></pre></td></tr></table></figure>\n<p>在初始化父类之后，再在实例上增加如上 header 值。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwbg55td0005k4rnq0r717c8","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55tq000ak4rnyb6ezjs7"},{"post_id":"ciwbg55t20000k4rnzclskvqb","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55tw000ek4rnuff3r517"},{"post_id":"ciwbg55ti0006k4rnb6591gy2","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55ty000hk4rn4y2dgy80"},{"post_id":"ciwbg55t60001k4rne4dcc3qb","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55u0000mk4rnhwpxoos0"},{"post_id":"ciwbg55tr000bk4rnhyafwvz1","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55u1000nk4rn6wgltzy6"},{"post_id":"ciwbg55tx000fk4rnr0ai3g3c","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55u1000ok4rnrxxaapj7"},{"post_id":"ciwbg55tc0004k4rnxj8lmulc","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55u2000rk4rnoh9odjx8"},{"post_id":"ciwbg55ty000ik4rn6hfa9h4n","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55u2000tk4rnzdiuqmf9"},{"post_id":"ciwbg55tm0009k4rnk1ayfhxo","category_id":"ciwbg55tz000jk4rnf3yee8qp","_id":"ciwbg55u3000vk4rntrrl1uy7"},{"post_id":"ciwbg55uv001ik4rnkegme8ct","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55v1001nk4rnbr7k2707"},{"post_id":"ciwbg55ux001jk4rnog3kra8a","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55v3001pk4rnfk4rke8u"},{"post_id":"ciwbg55v0001lk4rn1r109kkn","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55va001sk4rncgg29fn5"},{"post_id":"ciwbg55v2001ok4rnywltjy18","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vd001vk4rnsch93mkn"},{"post_id":"ciwbg55v4001qk4rnwnysffdu","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vh001zk4rnl39j8gyb"},{"post_id":"ciwbg55vc001uk4rn3ydhb0w9","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vi0022k4rn24mi6w09"},{"post_id":"ciwbg55vf001wk4rnu36d13mj","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vm0026k4rnr9jeunwj"},{"post_id":"ciwbg55vh0020k4rndh62nd3d","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vn0029k4rng509q2pd"},{"post_id":"ciwbg55vi0023k4rnf5jq6thx","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vo002ck4rnwl0d1heg"},{"post_id":"ciwbg55vm0027k4rnqne1kqev","category_id":"ciwbg55tz000jk4rnf3yee8qp","_id":"ciwbg55vq002ek4rnwdx4sd8b"},{"post_id":"ciwbg55vn002ak4rnf3mhxogk","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55vr002fk4rn27t7nybe"},{"post_id":"ciwbg55yj002qk4rnkwueadp6","category_id":"ciwbg55t80002k4rnxrpfa5q3","_id":"ciwbg55yn002uk4rnjmbi055p"}],"PostTag":[{"post_id":"ciwbg55t20000k4rnzclskvqb","tag_id":"ciwbg55tb0003k4rn3471w8yj","_id":"ciwbg55ty000gk4rn8wvjl7de"},{"post_id":"ciwbg55t20000k4rnzclskvqb","tag_id":"ciwbg55tk0008k4rn17hcwpt7","_id":"ciwbg55u0000kk4rnlbigobbb"},{"post_id":"ciwbg55t60001k4rne4dcc3qb","tag_id":"ciwbg55tw000dk4rnjep9dtl0","_id":"ciwbg55u2000qk4rn0lwksqig"},{"post_id":"ciwbg55t60001k4rne4dcc3qb","tag_id":"ciwbg55u0000lk4rnjo3e4m6h","_id":"ciwbg55u2000sk4rn1btlk84b"},{"post_id":"ciwbg55tc0004k4rnxj8lmulc","tag_id":"ciwbg55u1000pk4rnm6mpwojc","_id":"ciwbg55u4000xk4rn7w6xt87t"},{"post_id":"ciwbg55tc0004k4rnxj8lmulc","tag_id":"ciwbg55u2000uk4rnp8frqr08","_id":"ciwbg55u4000yk4rn4kc1o7zi"},{"post_id":"ciwbg55td0005k4rnq0r717c8","tag_id":"ciwbg55u3000wk4rnohir8qe2","_id":"ciwbg55u60012k4rn2kj27met"},{"post_id":"ciwbg55td0005k4rnq0r717c8","tag_id":"ciwbg55u4000zk4rnk42yxp5f","_id":"ciwbg55u60013k4rnstqa4q05"},{"post_id":"ciwbg55td0005k4rnq0r717c8","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55u60015k4rnm6aiwffe"},{"post_id":"ciwbg55ti0006k4rnb6591gy2","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55u60016k4rnzxjxk2b2"},{"post_id":"ciwbg55tm0009k4rnk1ayfhxo","tag_id":"ciwbg55u60014k4rnc2iwhh21","_id":"ciwbg55u70019k4rn5d43b982"},{"post_id":"ciwbg55tm0009k4rnk1ayfhxo","tag_id":"ciwbg55u70017k4rnj2pngeb4","_id":"ciwbg55u7001ak4rnxe2uh91f"},{"post_id":"ciwbg55tr000bk4rnhyafwvz1","tag_id":"ciwbg55u3000wk4rnohir8qe2","_id":"ciwbg55u7001ck4rnn6h9jadu"},{"post_id":"ciwbg55tx000fk4rnr0ai3g3c","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55u8001ek4rnsyzcjdxt"},{"post_id":"ciwbg55ty000ik4rn6hfa9h4n","tag_id":"ciwbg55u8001dk4rn9eo79hr6","_id":"ciwbg55u9001gk4rnwsslkazt"},{"post_id":"ciwbg55ty000ik4rn6hfa9h4n","tag_id":"ciwbg55u9001fk4rn2f6vftuv","_id":"ciwbg55u9001hk4rnz2rxzi99"},{"post_id":"ciwbg55ux001jk4rnog3kra8a","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55v1001mk4rnnerenyob"},{"post_id":"ciwbg55uv001ik4rnkegme8ct","tag_id":"ciwbg55v0001kk4rnlf7xdj38","_id":"ciwbg55va001tk4rnzduequtz"},{"post_id":"ciwbg55vc001uk4rn3ydhb0w9","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55vg001yk4rn4r1x07b2"},{"post_id":"ciwbg55vc001uk4rn3ydhb0w9","tag_id":"ciwbg55u0000lk4rnjo3e4m6h","_id":"ciwbg55vi0021k4rn11pz2vph"},{"post_id":"ciwbg55v0001lk4rn1r109kkn","tag_id":"ciwbg55v8001rk4rnav69359v","_id":"ciwbg55vl0025k4rnhrxbijfe"},{"post_id":"ciwbg55vh0020k4rndh62nd3d","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55vn0028k4rnuji4y5mn"},{"post_id":"ciwbg55v2001ok4rnywltjy18","tag_id":"ciwbg55vg001xk4rny6p1vzyh","_id":"ciwbg55vo002bk4rncw2kfbys"},{"post_id":"ciwbg55v4001qk4rnwnysffdu","tag_id":"ciwbg55vl0024k4rn2ih310kq","_id":"ciwbg55vs002hk4rnc7p9fxq2"},{"post_id":"ciwbg55v4001qk4rnwnysffdu","tag_id":"ciwbg55vo002dk4rn9yku65nn","_id":"ciwbg55vs002ik4rnfhjlrzje"},{"post_id":"ciwbg55v4001qk4rnwnysffdu","tag_id":"ciwbg55u40010k4rnr536i638","_id":"ciwbg55vt002kk4rn7nac53nh"},{"post_id":"ciwbg55vf001wk4rnu36d13mj","tag_id":"ciwbg55vr002gk4rnad655pba","_id":"ciwbg55vt002lk4rnlv5jcqp4"},{"post_id":"ciwbg55vi0023k4rnf5jq6thx","tag_id":"ciwbg55vs002jk4rnt3tsxvh6","_id":"ciwbg55vu002nk4rngnjftrej"},{"post_id":"ciwbg55vm0027k4rnqne1kqev","tag_id":"ciwbg55vt002mk4rnt2obzfov","_id":"ciwbg55vu002ok4rnb0o499pp"},{"post_id":"ciwbg55yj002qk4rnkwueadp6","tag_id":"ciwbg55ym002sk4rnd138plec","_id":"ciwbg55yn002vk4rnazwyy6jn"},{"post_id":"ciwbg55yj002qk4rnkwueadp6","tag_id":"ciwbg55u0000lk4rnjo3e4m6h","_id":"ciwbg55yo002wk4rn8vdemufo"}],"Tag":[{"name":"https","_id":"ciwbg55tb0003k4rn3471w8yj"},{"name":"nginx","_id":"ciwbg55tk0008k4rn17hcwpt7"},{"name":"MySqldb","_id":"ciwbg55tw000dk4rnjep9dtl0"},{"name":"小问题","_id":"ciwbg55u0000lk4rnjo3e4m6h"},{"name":"github","_id":"ciwbg55u1000pk4rnm6mpwojc"},{"name":"Hexo","_id":"ciwbg55u2000uk4rnp8frqr08"},{"name":"Nginx","_id":"ciwbg55u3000wk4rnohir8qe2"},{"name":"uwsgi","_id":"ciwbg55u4000zk4rnk42yxp5f"},{"name":"python","_id":"ciwbg55u40010k4rnr536i638"},{"name":"垦丁","_id":"ciwbg55u60014k4rnc2iwhh21"},{"name":"台湾","_id":"ciwbg55u70017k4rnj2pngeb4"},{"name":"运维","_id":"ciwbg55u8001dk4rn9eo79hr6"},{"name":"Supervisor","_id":"ciwbg55u9001fk4rn2f6vftuv"},{"name":"vim","_id":"ciwbg55v0001kk4rnlf7xdj38"},{"name":"Scrapy","_id":"ciwbg55v8001rk4rnav69359v"},{"name":"flask restful","_id":"ciwbg55vg001xk4rny6p1vzyh"},{"name":"flask","_id":"ciwbg55vl0024k4rn2ih310kq"},{"name":"session","_id":"ciwbg55vo002dk4rn9yku65nn"},{"name":"WSGI","_id":"ciwbg55vr002gk4rnad655pba"},{"name":"数据库","_id":"ciwbg55vs002jk4rnt3tsxvh6"},{"name":"致优团建","_id":"ciwbg55vt002mk4rnt2obzfov"},{"name":"跨域问题","_id":"ciwbg55ym002sk4rnd138plec"}]}}