{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/media/profile_photo.jpg","path":"media/profile_photo.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5201797d9445985f1049fafebaffddbc9421591e","modified":1459155734000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1459154380000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1459154380000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1459154380000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1459154380000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1459154380000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1459154380000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1459154380000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1459154380000},{"_id":"themes/next/_config.yml","hash":"c1b8ef29212064e297fdccd4858ad4ac27ded724","modified":1459410532000},{"_id":"themes/next/bower.json","hash":"d7f8d4eb7c6ac1bb8d642112601005f93e3da49b","modified":1459154380000},{"_id":"themes/next/gulpfile.coffee","hash":"b3d53f36460119c741a98c0dc494b1c65d3ec943","modified":1459154380000},{"_id":"themes/next/package.json","hash":"bd016b54983b7e06a649ee915b2e13a60d47553e","modified":1459154380000},{"_id":"source/_posts/Nginx-服务器处理一次请求的流程.md","hash":"fb36e7e33e82474abdda19b2d238412ef8daf8ea","modified":1460456505000},{"_id":"source/_posts/Python-property-decorator.md","hash":"54ab25d99cbddad56a963363450be014930a7460","modified":1460446071000},{"_id":"source/_posts/Hexo-GitHub-搭建博客备忘.md","hash":"a034ae55762253193b152e6ffae1d48478f757bc","modified":1459398073000},{"_id":"source/_posts/Scrapy-框架简介.md","hash":"84d04fac4f3a652dfb943c59b47d929ee9c39b27","modified":1459420620000},{"_id":"source/_posts/Travel-Image.md","hash":"76e32a1afc324724bbfa11fe821c01c251f80490","modified":1459411688000},{"_id":"source/_posts/what-is-WSGI.md","hash":"d2d9c8462e0d0825adf6375029fc4b056280ce48","modified":1459843035000},{"_id":"source/_posts/致优一周年，香山团建.md","hash":"ca75cbdf90f83f4cb02888ad162fe8740d89f5d9","modified":1459524324000},{"_id":"source/about/index.md","hash":"8f40b6631c760a85675c9eeb9c835295f0495542","modified":1459174164000},{"_id":"source/categories/index.md","hash":"76f4f357f82137419dfee982957796e878ef0d9d","modified":1459164210000},{"_id":"source/media/.DS_Store","hash":"f9baf722b2e2128931bf0795d5977437dcd03987","modified":1459155768000},{"_id":"source/tags/index.md","hash":"48fd1f1fda66efe5906d492fc2e3396585048817","modified":1459164214000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1459154380000},{"_id":"themes/next/.git/config","hash":"fbc6b5fd3f8e5a1b779ad63c5ea505a765a07a51","modified":1459154380000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1459154233000},{"_id":"themes/next/.git/index","hash":"c7377c91d6e6996e95de8679c357ef777c1391b2","modified":1459398628000},{"_id":"themes/next/.git/packed-refs","hash":"803de91c997fa2ebce5790b082a140e770a68b4a","modified":1459154380000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1459154380000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"d6047c2afeabe9a329d92eb2a03490ff181616c2","modified":1459154380000},{"_id":"themes/next/layout/_layout.swig","hash":"993df74467835eeb223d92206f36ecd6cfe5119e","modified":1459154380000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1459154380000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1459154380000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1459154380000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1459154380000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1459154380000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1459154380000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1459154380000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1459154380000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1459154380000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1459154380000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1459154380000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1459154380000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1459154380000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1459154380000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1459154380000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1459154380000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1459154380000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1459154380000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1459154380000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1459154380000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1459154233000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1459154233000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1459154233000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1459154233000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1459154233000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1459154233000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1459154233000},{"_id":"themes/next/.git/logs/HEAD","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1459154380000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"e8e9c986ce1a0b370afd36703d49f1818492cb64","modified":1459154380000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1459154380000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1459154380000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3003fda5a8af553451f7945f4e1ce006ca72e4c4","modified":1459154380000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a7084dcef03fa0d0c97962ec9828b77c9a73592f","modified":1459154380000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1459154380000},{"_id":"themes/next/layout/_macro/post.swig","hash":"379737761f44fb71de997a73192f35b8e568ac58","modified":1459154380000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1459154380000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1459154380000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1459154380000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1459154380000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1459154380000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0ff291b272808fd471747f66b621822ed1dc8abd","modified":1459154380000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b055278a74f190571af67cfae03ae6c3fb295c","modified":1459154380000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1459154380000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1459154380000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1459154380000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1459154380000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459154380000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1459154380000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1459154380000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1459154380000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1459154380000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1459154380000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1459154380000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1459154380000},{"_id":"source/media/profile_photo.jpg","hash":"664295a42e2ea8dd9dc93884c848fb69d1acfa47","modified":1456547406000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1459154380000},{"_id":"themes/next/.git/refs/heads/master","hash":"72c2882b376e8bf62558e30133866c7828860633","modified":1459154380000},{"_id":"themes/next/.git/objects/ae/c49958a1b651716f708a21f3f10352553e3da8","hash":"80cdd08b8875919dcc92b1c722dc36a378932d24","modified":1459156475000},{"_id":"themes/next/.git/objects/f7/1533d863c78a5b9f43dff3b775814d8f8f2412","hash":"31165b333627602f81bc5a4c8d2b9255ca75afbc","modified":1459398628000},{"_id":"themes/next/.git/objects/f9/b71b52ebd381af5a87f5937a82a4d947e5adb6","hash":"41b36896f4f472dd1099317e69a236d74ed3bfb1","modified":1459398628000},{"_id":"themes/next/.git/objects/68/917bfc263a7ce60252751274d315daaafc9c29","hash":"92ef18565fb7b64ac9bc3612946470653c80105c","modified":1459398628000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1459154380000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1459154380000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"b9f9211d7dcc32e0232c404eab39de75c8106b4f","modified":1459166317000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c83ef088e3dfee5f1eeb0640e271859426ec044c","modified":1459165613000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1459154380000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1459154380000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"ce88ec0557b6d765ae38dd5984b178c7fc4d376e","modified":1459154380000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1459154380000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"df03220eb8526e17dc9c9f17780c2d6699367181","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1459154380000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1459154380000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"bcf8238cf842bbfc8f3ea733889bc4dacf59d3c4","modified":1459154380000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"23df0070bef4952cc0e669f20fc78a8abba9676e","modified":1459154380000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1459154380000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1459154380000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1459154380000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1459154380000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1459154380000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1459154380000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1459154380000},{"_id":"themes/next/source/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1459154380000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1459154380000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1459154380000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.idx","hash":"86cfb55c71aeec9c6caf28c25df915e940da2639","modified":1459154380000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"fa2b7a0006b6c447fa025474f8e0af4e4e569a36","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1459154380000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"2e829b0a7b6cbc4318672f3eeb7b26249038132d","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1459154380000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"04e6c5257814c65e638ab70c53030e8dfdb3f37d","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"8aca5d9f1df157ab27e699c1b3ba9438b9e039ad","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"9658d09de4fcc809a29d4b706a9621adfb3090ad","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5522ddf7df5c150d97804584840976daa0e12d63","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"6cc10d943d92eac953e6978e46d27ae55584482c","modified":1459154380000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1459154380000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1459154380000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1459154380000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1459154380000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1459154380000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"d7bb8bafb20798f4d55965df3307a5fe12ee0da5","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"61763d236029d2a4414be499d0e65d7dfb34605b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"ae19721ceee5ba460e131cb2427dae3c1ff39d6f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4c0be672d977ef793c72cf838f1d920f2749dda0","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"23dd966324937deeccc8f5fa16a6d32e4e46243b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"fe71e9be08cb418cf68352fd6212ddd0d7150579","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330a2ce52c5a5fefc1e85c473113a3bc58210c76","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4677ae612ff9c593ee17ab2ea82dbb995432d301","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"6533563b34241e5c73da68156aba89e880b93f53","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"12f703e5fea9d8a7ba65c8cea93a5cf5c2b78457","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1459154380000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"f7ebd428f3058ec3ecc7648788712617bea520ba","modified":1459154380000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1459154380000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1459154380000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1459154380000},{"_id":"themes/next/.git/objects/pack/pack-c963d6e6e91e93764dd65d10429fe19c2d4af59f.pack","hash":"4f3c8d939a608914a64e822e3df8e2cc2b00acac","modified":1459154380000},{"_id":"public/about/index.html","hash":"03672172cd692e8857e0786a46a7860be7856f51","modified":1460456564812},{"_id":"public/categories/index.html","hash":"38344f0cafd1121493f641ce9511edba3f8ddad5","modified":1460456564812},{"_id":"public/tags/index.html","hash":"ecb8cfdc88e6682e0b25308b9773463dfa8dd5f8","modified":1460456564812},{"_id":"public/archives/index.html","hash":"f151b75677cf8c2ce998ca32ec3583b4e1ccbfb6","modified":1460456564812},{"_id":"public/archives/2016/index.html","hash":"36ac97f37896fa217677deb5ccf3d56fbf321be8","modified":1460456564812},{"_id":"public/archives/2016/03/index.html","hash":"0bbc4bc878f0693b8dd07c6aa28af2e8f9a1b4ae","modified":1460456564813},{"_id":"public/archives/2016/04/index.html","hash":"037a81c4084839061521147624c550e77b7116e3","modified":1460456564813},{"_id":"public/categories/技术相关/index.html","hash":"8d4c30b5ab1ff523bd02a4623b3a223eb0442ef2","modified":1460456564813},{"_id":"public/categories/旅行/index.html","hash":"d2943d77d8dff97b05767cf6d224f0457b31087b","modified":1460456564813},{"_id":"public/tags/Nginx/index.html","hash":"3dea197ae9bc9947d3534ec2e0c5286d799b0392","modified":1460456564813},{"_id":"public/tags/python/index.html","hash":"16f895d82b00ef80a5ab25bd855a9c689c89cfb4","modified":1460456564813},{"_id":"public/tags/github/index.html","hash":"cbbb8c847e37e191bfadd902a75df6f65eebcece","modified":1460456564813},{"_id":"public/tags/Hexo/index.html","hash":"9d8e45dea747f924f433af50f15552fb29e87d87","modified":1460456564813},{"_id":"public/tags/Scrapy/index.html","hash":"9701658202dd34ef0f1c1dbb7a2ec37f2d0ac456","modified":1460456564813},{"_id":"public/tags/垦丁/index.html","hash":"4b92cd1bfa5b052140c76b3b8ac500de68e67e6d","modified":1460456564813},{"_id":"public/tags/台湾/index.html","hash":"cd72e4852a27a6966bf708fffce677d3071aa2aa","modified":1460456564813},{"_id":"public/tags/WSGI/index.html","hash":"096029050aab3695c1fb9bb980cba965e4ba519a","modified":1460456564813},{"_id":"public/tags/致优团建/index.html","hash":"fb8a7423a0c14220588e61591409b98483f81cec","modified":1460456564813},{"_id":"public/2016/04/12/Nginx-服务器处理一次请求的流程/index.html","hash":"1bce2dc4dc0af9591038ce8bc29c1821b53ac26f","modified":1460456564813},{"_id":"public/2016/04/12/Python-property-decorator/index.html","hash":"82e61cc77164218909d3546a387454579c1a8c00","modified":1460456564813},{"_id":"public/2016/04/05/what-is-WSGI/index.html","hash":"18a3ce02a6e675fdee4ef6fa335802cf6969b87b","modified":1460456564813},{"_id":"public/2016/04/01/致优一周年，香山团建/index.html","hash":"6fde2b0d321681aa2c83b95c7131c1b849bfb4bf","modified":1460456564813},{"_id":"public/2016/03/31/Scrapy-框架简介/index.html","hash":"7ec94b3e69526b4ebbbd7085a2853baab1e4c7f8","modified":1460456564813},{"_id":"public/2016/03/31/Travel-Image/index.html","hash":"9d86c31344a5920f50662a8ba7997c885021bba7","modified":1460456564813},{"_id":"public/2016/03/28/Hexo-GitHub-搭建博客备忘/index.html","hash":"a216a5012801ec4d4cf847b6039a5567f53c2c6d","modified":1460456564813},{"_id":"public/index.html","hash":"37ab4221990ff653811a3d11fd40f319dda5536e","modified":1460456564813},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1460456564828},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1460456564828},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1460456564828},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1460456564828},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1460456564828},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1460456564828},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460456564828},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1460456564828},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1460456564828},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1460456564828},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1460456564829},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1460456564829},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1460456564829},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1460456564829},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460456564829},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460456564829},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460456564829},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460456564829},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460456564829},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460456564829},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1460456564829},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1460456564829},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460456564829},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1460456565852},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1460456565858},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1460456565859},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1460456565929},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1460456565929},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1460456565929},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1460456565929},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1460456565929},{"_id":"public/js/src/utils.js","hash":"19d36fa3874b088bc3514a15c2360b2d06318047","modified":1460456565929},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1460456565929},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1460456565929},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1460456565929},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1460456565929},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1460456565929},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1460456565929},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1460456565929},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1460456565929},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1460456565929},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1460456565929},{"_id":"public/js/src/schemes/pisces.js","hash":"94f935331995bfeadf1084fb8f0665ab39fd1c8d","modified":1460456565929},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1460456565929},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1460456565929},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1460456565930},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1460456565930},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1460456565930},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1460456565930},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1460456565930},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1460456565930},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1460456565930},{"_id":"public/css/main.css","hash":"367645a9bc94d6f403ca578cc425e7796bc7c44c","modified":1460456565930},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1460456565930},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1460456565930},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1460456565930},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1460456565930},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1460456565930},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1460456565930},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1460456565930},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1460456565930},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1460456565930},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1460456565930},{"_id":"public/media/profile_photo.jpg","hash":"664295a42e2ea8dd9dc93884c848fb69d1acfa47","modified":1460456565996},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1460456566001}],"Category":[{"name":"技术相关","_id":"cimxa4obc0005a3rnootp26mu"},{"name":"旅行","_id":"cimxa4obv000ka3rnpsn4gt5g"}],"Data":[],"Page":[{"title":"关于我","date":"2016-03-28T09:36:10.000Z","type":"about","comments":0,"_content":"\n## 初入江湖小码农一枚\n\n\n10-14 赛季 华东理工大学计算机科学与技术专业\n14-15 赛季 Chinese University of Hong Kong Computer Science master\n15 年下半年开始工作\n目前主要从事 web 后端开发（python 相关）\n\n爱旅行，爱音乐，热篮球，爱健身，爱妹子～\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2016-03-28 17:36:10\ntype: \"about\"\ncomments: false\n---\n\n## 初入江湖小码农一枚\n\n\n10-14 赛季 华东理工大学计算机科学与技术专业\n14-15 赛季 Chinese University of Hong Kong Computer Science master\n15 年下半年开始工作\n目前主要从事 web 后端开发（python 相关）\n\n爱旅行，爱音乐，热篮球，爱健身，爱妹子～\n","updated":"2016-03-28T14:09:24.000Z","path":"about/index.html","layout":"page","_id":"cimxa4ob60001a3rnmof08n9l","content":"<h2 id=\"初入江湖小码农一枚\"><a href=\"#初入江湖小码农一枚\" class=\"headerlink\" title=\"初入江湖小码农一枚\"></a>初入江湖小码农一枚</h2><p>10-14 赛季 华东理工大学计算机科学与技术专业<br>14-15 赛季 Chinese University of Hong Kong Computer Science master<br>15 年下半年开始工作<br>目前主要从事 web 后端开发（python 相关）</p>\n<p>爱旅行，爱音乐，热篮球，爱健身，爱妹子～</p>\n","excerpt":"","more":"<h2 id=\"初入江湖小码农一枚\"><a href=\"#初入江湖小码农一枚\" class=\"headerlink\" title=\"初入江湖小码农一枚\"></a>初入江湖小码农一枚</h2><p>10-14 赛季 华东理工大学计算机科学与技术专业<br>14-15 赛季 Chinese University of Hong Kong Computer Science master<br>15 年下半年开始工作<br>目前主要从事 web 后端开发（python 相关）</p>\n<p>爱旅行，爱音乐，热篮球，爱健身，爱妹子～</p>\n"},{"title":"分类","date":"2016-03-28T09:37:11.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-03-28 17:37:11\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-03-28T11:23:30.000Z","path":"categories/index.html","layout":"page","_id":"cimxa4ob90003a3rn07bk7qv1","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-03-28T09:36:59.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-03-28 17:36:59\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-03-28T11:23:34.000Z","path":"tags/index.html","layout":"page","_id":"cimxa4ocp0013a3rnsyxiqurx","content":"","excerpt":"","more":""}],"Post":[{"title":"Nginx 服务器处理一次请求的流程","date":"2016-04-12T09:51:04.000Z","_content":"\n# 基于名字的虚拟主机\n\nNginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n<!--more-->\n\n在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在\"listen\"指令中设置\"default_server\"参数：\n\n\tserver {\n\t    listen      80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\"default_server\"参数从0.8.21版开始可用。在之前的版本中，应该使用\"default\"参数代替。\n请注意\"default_server\"是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。\n\n# 如何防止处理未定义主机名的请求\n\n如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：\n\n\tserver {\n\t    listen       80;\n\t    server_name  \"\";\n\t    return       444;\n\t}\n\n在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。\n\n> 从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name\n\"\"。而之前的版本使用机器的hostname作为主机名的默认值。\n\n＃ 基于域名和IP混合的虚拟主机\n\n下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。\n\n默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80 default_server;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n# 一个简单PHP站点配置\n\n现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    root        /data/www;\n\n\t    location / {\n\t        index   index.html index.php;\n\t    }\n\n\t    location ~* \\.(gif|jpg|png)$ {\n\t        expires 30d;\n\t    }\n\n\t    location ~ \\.php$ {\n\t        fastcgi_pass  localhost:9000;\n\t        fastcgi_param SCRIPT_FILENAME\n\t                      $document_root$fastcgi_script_name;\n\t        include       fastcgi_params;\n\t    }\n\t}\n\n首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是\"/\"，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。\n\n请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：\n\n\t/index.php?user=john&page=1\n\t/index.php?page=1&user=john\n\n除此以外，任何人在请求串中都可以随意添加字符串：\n\n\t/index.php?page=1&something+else&user=john\n\n现在让我们来看使用上面的配置，请求是怎样被处理的：\n\n\t请求\"/logo.gif\"首先匹配上location \"/\"，然后匹配上正则表达式\"\\.(gif|jpg|png)$\"。因此，它将被后者处理。根据\"root /data/www\"指令，nginx将请求映射到文件/data/www/logo.gif\"，并发送这个文件到客户端。\n\t请求\"/index.php\"首先也匹配上location \"/\"，然后匹配上正则表达式\"\\.(php)$\"。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为\"/data/www/index.php\"，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，\"/index.php\"。\n\t请求\"/about.html\"仅能匹配上location \"/\"，因此，它将使用此location进行处理。根据\"root /data/www\"指令，nginx将请求映射到文件\"/data/www/about.html\"，并发送这个文件到客户端。\n\t请求\"/\"的处理更为复杂。它仅能匹配上location \"/\"，因此，它将使用此location进行处理。然后，index指令使用它的参数和\"root /data/www\"指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到\"/index.php\"，接着nginx将重新寻找匹配\"/index.php\"的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n\n[原文链接](http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names)","source":"_posts/Nginx-服务器处理一次请求的流程.md","raw":"---\ntitle: Nginx 服务器处理一次请求的流程\ndate: 2016-04-12 17:51:04\ntags: Nginx\ncategories: 技术相关\n---\n\n# 基于名字的虚拟主机\n\nNginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n<!--more-->\n\n在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在\"listen\"指令中设置\"default_server\"参数：\n\n\tserver {\n\t    listen      80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\"default_server\"参数从0.8.21版开始可用。在之前的版本中，应该使用\"default\"参数代替。\n请注意\"default_server\"是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。\n\n# 如何防止处理未定义主机名的请求\n\n如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：\n\n\tserver {\n\t    listen       80;\n\t    server_name  \"\";\n\t    return       444;\n\t}\n\n在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。\n\n> 从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name\n\"\"。而之前的版本使用机器的hostname作为主机名的默认值。\n\n＃ 基于域名和IP混合的虚拟主机\n\n下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。\n\n默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：\n\n\tserver {\n\t    listen      192.168.1.1:80;\n\t    server_name example.org www.example.org;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.1:80 default_server;\n\t    server_name example.net www.example.net;\n\t    ...\n\t}\n\n\tserver {\n\t    listen      192.168.1.2:80 default_server;\n\t    server_name example.com www.example.com;\n\t    ...\n\t}\n\n# 一个简单PHP站点配置\n\n现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：\n\n\tserver {\n\t    listen      80;\n\t    server_name example.org www.example.org;\n\t    root        /data/www;\n\n\t    location / {\n\t        index   index.html index.php;\n\t    }\n\n\t    location ~* \\.(gif|jpg|png)$ {\n\t        expires 30d;\n\t    }\n\n\t    location ~ \\.php$ {\n\t        fastcgi_pass  localhost:9000;\n\t        fastcgi_param SCRIPT_FILENAME\n\t                      $document_root$fastcgi_script_name;\n\t        include       fastcgi_params;\n\t    }\n\t}\n\n首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是\"/\"，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。\n\n请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：\n\n\t/index.php?user=john&page=1\n\t/index.php?page=1&user=john\n\n除此以外，任何人在请求串中都可以随意添加字符串：\n\n\t/index.php?page=1&something+else&user=john\n\n现在让我们来看使用上面的配置，请求是怎样被处理的：\n\n\t请求\"/logo.gif\"首先匹配上location \"/\"，然后匹配上正则表达式\"\\.(gif|jpg|png)$\"。因此，它将被后者处理。根据\"root /data/www\"指令，nginx将请求映射到文件/data/www/logo.gif\"，并发送这个文件到客户端。\n\t请求\"/index.php\"首先也匹配上location \"/\"，然后匹配上正则表达式\"\\.(php)$\"。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为\"/data/www/index.php\"，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，\"/index.php\"。\n\t请求\"/about.html\"仅能匹配上location \"/\"，因此，它将使用此location进行处理。根据\"root /data/www\"指令，nginx将请求映射到文件\"/data/www/about.html\"，并发送这个文件到客户端。\n\t请求\"/\"的处理更为复杂。它仅能匹配上location \"/\"，因此，它将使用此location进行处理。然后，index指令使用它的参数和\"root /data/www\"指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到\"/index.php\"，接着nginx将重新寻找匹配\"/index.php\"的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n\n[原文链接](http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names)","slug":"Nginx-服务器处理一次请求的流程","published":1,"updated":"2016-04-12T10:21:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4ob10000a3rn53wbzo24","content":"<h1 id=\"基于名字的虚拟主机\"><a href=\"#基于名字的虚拟主机\" class=\"headerlink\" title=\"基于名字的虚拟主机\"></a>基于名字的虚拟主机</h1><p>Nginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><a id=\"more\"></a>\n<p>在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在”listen”指令中设置”default_server”参数：</p>\n<pre><code>server {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n</code></pre><p>“default_server”参数从0.8.21版开始可用。在之前的版本中，应该使用”default”参数代替。<br>请注意”default_server”是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。</p>\n<h1 id=\"如何防止处理未定义主机名的请求\"><a href=\"#如何防止处理未定义主机名的请求\" class=\"headerlink\" title=\"如何防止处理未定义主机名的请求\"></a>如何防止处理未定义主机名的请求</h1><p>如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：</p>\n<pre><code>server {\n    listen       80;\n    server_name  &quot;&quot;;\n    return       444;\n}\n</code></pre><p>在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。</p>\n<blockquote>\n<p>从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name<br>“”。而之前的版本使用机器的hostname作为主机名的默认值。</p>\n</blockquote>\n<p>＃ 基于域名和IP混合的虚拟主机</p>\n<p>下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><p>这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。</p>\n<p>默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><h1 id=\"一个简单PHP站点配置\"><a href=\"#一个简单PHP站点配置\" class=\"headerlink\" title=\"一个简单PHP站点配置\"></a>一个简单PHP站点配置</h1><p>现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n</code></pre><p>首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是”/“，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。</p>\n<p>请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：</p>\n<pre><code>/index.php?user=john&amp;page=1\n/index.php?page=1&amp;user=john\n</code></pre><p>除此以外，任何人在请求串中都可以随意添加字符串：</p>\n<pre><code>/index.php?page=1&amp;something+else&amp;user=john\n</code></pre><p>现在让我们来看使用上面的配置，请求是怎样被处理的：</p>\n<pre><code>请求&quot;/logo.gif&quot;首先匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(gif|jpg|png)$&quot;。因此，它将被后者处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件/data/www/logo.gif&quot;，并发送这个文件到客户端。\n请求&quot;/index.php&quot;首先也匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(php)$&quot;。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为&quot;/data/www/index.php&quot;，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，&quot;/index.php&quot;。\n请求&quot;/about.html&quot;仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件&quot;/data/www/about.html&quot;，并发送这个文件到客户端。\n请求&quot;/&quot;的处理更为复杂。它仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。然后，index指令使用它的参数和&quot;root /data/www&quot;指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到&quot;/index.php&quot;，接着nginx将重新寻找匹配&quot;/index.php&quot;的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n</code></pre><p><a href=\"http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","excerpt":"<h1 id=\"基于名字的虚拟主机\"><a href=\"#基于名字的虚拟主机\" class=\"headerlink\" title=\"基于名字的虚拟主机\"></a>基于名字的虚拟主机</h1><p>Nginx首先选定由哪一个虚拟主机来处理请求。让我们从一个简单的配置（其中全部3个虚拟主机都在端口*：80上监听）开始：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre>","more":"<p>在这个配置中，nginx仅仅检查请求的“Host”头以决定该请求应由哪个虚拟主机来处理。如果Host头没有匹配任意一个虚拟主机，或者请求中根本没有包含Host头，那nginx会将请求分发到定义在此端口上的默认虚拟主机。在以上配置中，第一个被列出的虚拟主机即nginx的默认虚拟主机——这是nginx的默认行为。而且，可以显式地设置某个主机为默认虚拟主机，即在”listen”指令中设置”default_server”参数：</p>\n<pre><code>server {\n    listen      80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n</code></pre><p>“default_server”参数从0.8.21版开始可用。在之前的版本中，应该使用”default”参数代替。<br>请注意”default_server”是监听端口的属性，而不是主机名的属性。后面会对此有更多介绍。</p>\n<h1 id=\"如何防止处理未定义主机名的请求\"><a href=\"#如何防止处理未定义主机名的请求\" class=\"headerlink\" title=\"如何防止处理未定义主机名的请求\"></a>如何防止处理未定义主机名的请求</h1><p>如果不允许请求中缺少“Host”头，可以定义如下主机，丢弃这些请求：</p>\n<pre><code>server {\n    listen       80;\n    server_name  &quot;&quot;;\n    return       444;\n}\n</code></pre><p>在这里，我们设置主机名为空字符串以匹配未定义“Host”头的请求，而且返回了一个nginx特有的，非http标准的返回码444，它可以用来关闭连接。</p>\n<blockquote>\n<p>从0.8.48版本开始，这已成为主机名的默认设置，所以可以省略server_name<br>“”。而之前的版本使用机器的hostname作为主机名的默认值。</p>\n</blockquote>\n<p>＃ 基于域名和IP混合的虚拟主机</p>\n<p>下面让我们来看一个复杂点的配置，在这个配置里，有几个虚拟主机在不同的地址上监听：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><p>这个配置中，nginx首先测试请求的IP地址和端口是否匹配某个server配置块中的listen指令配置。接着nginx继续测试请求的Host头是否匹配这个server块中的某个server_name的值。如果主机名没有找到，nginx将把这个请求交给默认虚拟主机处理。例如，一个从192.168.1.1:80端口收到的访问www.example.com的请求将被监听192.168.1.1:80端口的默认虚拟主机处理，本例中就是第一个服务器，因为这个端口上没有定义名为www.example.com的虚拟主机。</p>\n<p>默认服务器是监听端口的属性，所以不同的监听端口可以设置不同的默认服务器：</p>\n<pre><code>server {\n    listen      192.168.1.1:80;\n    server_name example.org www.example.org;\n    ...\n}\n\nserver {\n    listen      192.168.1.1:80 default_server;\n    server_name example.net www.example.net;\n    ...\n}\n\nserver {\n    listen      192.168.1.2:80 default_server;\n    server_name example.com www.example.com;\n    ...\n}\n</code></pre><h1 id=\"一个简单PHP站点配置\"><a href=\"#一个简单PHP站点配置\" class=\"headerlink\" title=\"一个简单PHP站点配置\"></a>一个简单PHP站点配置</h1><p>现在我们来看在一个典型的，简单的PHP站点中，nginx怎样为一个请求选择location来处理：</p>\n<pre><code>server {\n    listen      80;\n    server_name example.org www.example.org;\n    root        /data/www;\n\n    location / {\n        index   index.html index.php;\n    }\n\n    location ~* \\.(gif|jpg|png)$ {\n        expires 30d;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass  localhost:9000;\n        fastcgi_param SCRIPT_FILENAME\n                      $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n</code></pre><p>首先，nginx使用前缀匹配找出最准确的location，这一步nginx会忽略location在配置文件出现的顺序。上面的配置中，唯一的前缀匹配location是”/“，而且因为它可以匹配任意的请求，所以被作为最后一个选择。接着，nginx继续按照配置中的顺序依次匹配正则表达式的location，匹配到第一个正则表达式后停止搜索。匹配到的location将被使用。如果没有匹配到正则表达式的location，则使用刚刚找到的最准确的前缀匹配的location。</p>\n<p>请注意所有location匹配测试只使用请求的URI部分，而不使用参数部分。这是因为写参数的方法很多，比如：</p>\n<pre><code>/index.php?user=john&amp;page=1\n/index.php?page=1&amp;user=john\n</code></pre><p>除此以外，任何人在请求串中都可以随意添加字符串：</p>\n<pre><code>/index.php?page=1&amp;something+else&amp;user=john\n</code></pre><p>现在让我们来看使用上面的配置，请求是怎样被处理的：</p>\n<pre><code>请求&quot;/logo.gif&quot;首先匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(gif|jpg|png)$&quot;。因此，它将被后者处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件/data/www/logo.gif&quot;，并发送这个文件到客户端。\n请求&quot;/index.php&quot;首先也匹配上location &quot;/&quot;，然后匹配上正则表达式&quot;\\.(php)$&quot;。 因此，它将被后者处理，进而被发送到监听在localhost:9000的FastCGI服务器。fastcgi_param指令将FastCGI的参数SCRIPT_FILENAME的值设置为&quot;/data/www/index.php&quot;，接着FastCGI服务器执行这个文件。变量$document_root等于root指令设置的值，变量$fastcgi_script_name的值是请求的uri，&quot;/index.php&quot;。\n请求&quot;/about.html&quot;仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。根据&quot;root /data/www&quot;指令，nginx将请求映射到文件&quot;/data/www/about.html&quot;，并发送这个文件到客户端。\n请求&quot;/&quot;的处理更为复杂。它仅能匹配上location &quot;/&quot;，因此，它将使用此location进行处理。然后，index指令使用它的参数和&quot;root /data/www&quot;指令所组成的文件路径来检测对应的文件是否存在。如果文件/data/www/index.html不存在，而/data/www/index.php存在，此指令将执行一次内部重定向到&quot;/index.php&quot;，接着nginx将重新寻找匹配&quot;/index.php&quot;的location，就好像这次请求是从客户端发过来一样。正如我们之前看到的那样，这个重定向的请求最终交给FastCGI服务器来处理。\n</code></pre><p><a href=\"http://tengine.taobao.org/nginx_docs/cn/docs/http/request_processing.html#how_to_prevent_undefined_server_names\">原文链接</a></p>"},{"title":"Python property decorator","date":"2016-04-12T06:12:23.000Z","_content":"\n# property() 方法\n\nproperty() 方法返回了一个特殊的 [descriptor object](https://docs.python.org/2/howto/descriptor.html)， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。\n\n操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。\n\n创建一个新式类 C，以及一个 p 属性：\n\n\tclass C(...):\n\t    def R(self):\n\t        ...read method...\n\t    def W(self, value):\n\t        ...write method...\n\t    def D(self):\n\t        ...delete method...\n\t    p = property(R, W, D, doc)\n\t    ...\n\n<!--more-->\n* R 是一个不带参数的 `getter` 方法，返回属性的值，如果不提供此方法，任何读操作都会引起`AttributeError`\n* W 是一个接受一个参数的 `setter` 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起`AttributeError`\n* D 是一个 `deleter` 方法，会删除这个属性，如果不提供此方法，删除操作会引起`AttributeError`\n* doc 是一个文档字符串用来描述这个属性，调用方法\n\t\n\t\tC.p.__doc__\n\n以下是一个小的类带有属性 x:\n\n\tclass C(object):\n\t    def __init__(self):\n\t        self.__x=None\n\t    def getx(self):\n\t        print \"+++ getx()\"\n\t        return self.__x\n\t    def setx(self, v):\n\t        print \"+++ setx({0})\".format(v)\n\t        self.__x  =  v\n\t    def delx(self):\n\t        print \"+++ delx()\"\n\t        del self.__x\n\t    x=property(getx, setx, delx, \"Me property 'x'.\")\n\n在 python 解释器中执行：\n\n\t>>> c=C()\n\t>>> print c.x\n\t+++ getx()\n\tNone\n\t>>> print C.x.__doc__\n\tMe property 'x'.\n\t>>> c.x=15\n\t+++ setx(15)\n\t>>> c.x\n\t+++ getx()\n\t15\n\t>>> del c.x\n\t+++ delx()\n\t>>> c.x\n\t+++ getx()\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<stdin>\", line 6, in getx\n\tAttributeError: 'C' object has no attribute '_C__x'\n\n# property decorator\n从 Python 2.6 开始这个方法支持装饰器用法 `@property` ，使用这个装饰器装饰一个函数，和用 `getter` 装饰它效果是一样的。另外这个装饰器本身又带有 `deleter` 和 `setter` 两个装饰器。可以使用被 `@property` 装饰过的函数去定义自己的 `setter` 和 `deleter` 方法。\n\n比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：\n\n\t@property\n    def state(self):\n        '''The internal state property.'''\n        return self._state\n\n这样 .state 将会是这个属性的 getter 方法，而且 文档字符串'''The internal state property.''' 也会被存储在属性中。\n\n如果你需要 setter 和 deleter 方法：\n\n\t@state.setter\n    def state(self, k):\n        if not (0 <= k <= 2):\n            raise ValueError(\"Must be 0 through 2 inclusive!\")\n        else:\n            self._state = k\n            \n    @state.deleter\n    def state(self):\n        del self._state\n\n    ","source":"_posts/Python-property-decorator.md","raw":"---\ntitle: Python property decorator\ndate: 2016-04-12 14:12:23\ntags: python\ncategories: 技术相关\n---\n\n# property() 方法\n\nproperty() 方法返回了一个特殊的 [descriptor object](https://docs.python.org/2/howto/descriptor.html)， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。\n\n操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。\n\n创建一个新式类 C，以及一个 p 属性：\n\n\tclass C(...):\n\t    def R(self):\n\t        ...read method...\n\t    def W(self, value):\n\t        ...write method...\n\t    def D(self):\n\t        ...delete method...\n\t    p = property(R, W, D, doc)\n\t    ...\n\n<!--more-->\n* R 是一个不带参数的 `getter` 方法，返回属性的值，如果不提供此方法，任何读操作都会引起`AttributeError`\n* W 是一个接受一个参数的 `setter` 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起`AttributeError`\n* D 是一个 `deleter` 方法，会删除这个属性，如果不提供此方法，删除操作会引起`AttributeError`\n* doc 是一个文档字符串用来描述这个属性，调用方法\n\t\n\t\tC.p.__doc__\n\n以下是一个小的类带有属性 x:\n\n\tclass C(object):\n\t    def __init__(self):\n\t        self.__x=None\n\t    def getx(self):\n\t        print \"+++ getx()\"\n\t        return self.__x\n\t    def setx(self, v):\n\t        print \"+++ setx({0})\".format(v)\n\t        self.__x  =  v\n\t    def delx(self):\n\t        print \"+++ delx()\"\n\t        del self.__x\n\t    x=property(getx, setx, delx, \"Me property 'x'.\")\n\n在 python 解释器中执行：\n\n\t>>> c=C()\n\t>>> print c.x\n\t+++ getx()\n\tNone\n\t>>> print C.x.__doc__\n\tMe property 'x'.\n\t>>> c.x=15\n\t+++ setx(15)\n\t>>> c.x\n\t+++ getx()\n\t15\n\t>>> del c.x\n\t+++ delx()\n\t>>> c.x\n\t+++ getx()\n\tTraceback (most recent call last):\n\t  File \"<stdin>\", line 1, in <module>\n\t  File \"<stdin>\", line 6, in getx\n\tAttributeError: 'C' object has no attribute '_C__x'\n\n# property decorator\n从 Python 2.6 开始这个方法支持装饰器用法 `@property` ，使用这个装饰器装饰一个函数，和用 `getter` 装饰它效果是一样的。另外这个装饰器本身又带有 `deleter` 和 `setter` 两个装饰器。可以使用被 `@property` 装饰过的函数去定义自己的 `setter` 和 `deleter` 方法。\n\n比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：\n\n\t@property\n    def state(self):\n        '''The internal state property.'''\n        return self._state\n\n这样 .state 将会是这个属性的 getter 方法，而且 文档字符串'''The internal state property.''' 也会被存储在属性中。\n\n如果你需要 setter 和 deleter 方法：\n\n\t@state.setter\n    def state(self, k):\n        if not (0 <= k <= 2):\n            raise ValueError(\"Must be 0 through 2 inclusive!\")\n        else:\n            self._state = k\n            \n    @state.deleter\n    def state(self):\n        del self._state\n\n    ","slug":"Python-property-decorator","published":1,"updated":"2016-04-12T07:27:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4ob70002a3rnv2kj6hyo","content":"<h1 id=\"property-方法\"><a href=\"#property-方法\" class=\"headerlink\" title=\"property() 方法\"></a>property() 方法</h1><p>property() 方法返回了一个特殊的 <a href=\"https://docs.python.org/2/howto/descriptor.html\" target=\"_blank\" rel=\"external\">descriptor object</a>， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。</p>\n<p>操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。</p>\n<p>创建一个新式类 C，以及一个 p 属性：</p>\n<pre><code>class C(...):\n    def R(self):\n        ...read method...\n    def W(self, value):\n        ...write method...\n    def D(self):\n        ...delete method...\n    p = property(R, W, D, doc)\n    ...\n</code></pre><a id=\"more\"></a>\n<ul>\n<li>R 是一个不带参数的 <code>getter</code> 方法，返回属性的值，如果不提供此方法，任何读操作都会引起<code>AttributeError</code></li>\n<li>W 是一个接受一个参数的 <code>setter</code> 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起<code>AttributeError</code></li>\n<li>D 是一个 <code>deleter</code> 方法，会删除这个属性，如果不提供此方法，删除操作会引起<code>AttributeError</code></li>\n<li><p>doc 是一个文档字符串用来描述这个属性，调用方法</p>\n<pre><code>C.p.__doc__\n</code></pre></li>\n</ul>\n<p>以下是一个小的类带有属性 x:</p>\n<pre><code>class C(object):\n    def __init__(self):\n        self.__x=None\n    def getx(self):\n        print &quot;+++ getx()&quot;\n        return self.__x\n    def setx(self, v):\n        print &quot;+++ setx({0})&quot;.format(v)\n        self.__x  =  v\n    def delx(self):\n        print &quot;+++ delx()&quot;\n        del self.__x\n    x=property(getx, setx, delx, &quot;Me property &apos;x&apos;.&quot;)\n</code></pre><p>在 python 解释器中执行：</p>\n<pre><code>&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; print c.x\n+++ getx()\nNone\n&gt;&gt;&gt; print C.x.__doc__\nMe property &apos;x&apos;.\n&gt;&gt;&gt; c.x=15\n+++ setx(15)\n&gt;&gt;&gt; c.x\n+++ getx()\n15\n&gt;&gt;&gt; del c.x\n+++ delx()\n&gt;&gt;&gt; c.x\n+++ getx()\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;&lt;stdin&gt;&quot;, line 6, in getx\nAttributeError: &apos;C&apos; object has no attribute &apos;_C__x&apos;\n</code></pre><h1 id=\"property-decorator\"><a href=\"#property-decorator\" class=\"headerlink\" title=\"property decorator\"></a>property decorator</h1><p>从 Python 2.6 开始这个方法支持装饰器用法 <code>@property</code> ，使用这个装饰器装饰一个函数，和用 <code>getter</code> 装饰它效果是一样的。另外这个装饰器本身又带有 <code>deleter</code> 和 <code>setter</code> 两个装饰器。可以使用被 <code>@property</code> 装饰过的函数去定义自己的 <code>setter</code> 和 <code>deleter</code> 方法。</p>\n<p>比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：</p>\n<pre><code>@property\ndef state(self):\n    &apos;&apos;&apos;The internal state property.&apos;&apos;&apos;\n    return self._state\n</code></pre><p>这样 .state 将会是这个属性的 getter 方法，而且 文档字符串’’’The internal state property.’’’ 也会被存储在属性中。</p>\n<p>如果你需要 setter 和 deleter 方法：</p>\n<pre><code>@state.setter\ndef state(self, k):\n    if not (0 &lt;= k &lt;= 2):\n        raise ValueError(&quot;Must be 0 through 2 inclusive!&quot;)\n    else:\n        self._state = k\n\n@state.deleter\ndef state(self):\n    del self._state\n</code></pre>","excerpt":"<h1 id=\"property-方法\"><a href=\"#property-方法\" class=\"headerlink\" title=\"property() 方法\"></a>property() 方法</h1><p>property() 方法返回了一个特殊的 <a href=\"https://docs.python.org/2/howto/descriptor.html\">descriptor object</a>， 它的目的就是创建一个类的属性，这个属性看起来用起来就像普通的属性一样，但是你可以提供自己的方法去控制它（设置它的值，获取它的值）。看起来就像一个操作定制化的属性。</p>\n<p>操作这个属性的方法有三种 read, write, delete。当你创建一个属性时，你可以提供任意个或者全部的方法。</p>\n<p>创建一个新式类 C，以及一个 p 属性：</p>\n<pre><code>class C(...):\n    def R(self):\n        ...read method...\n    def W(self, value):\n        ...write method...\n    def D(self):\n        ...delete method...\n    p = property(R, W, D, doc)\n    ...\n</code></pre>","more":"<ul>\n<li>R 是一个不带参数的 <code>getter</code> 方法，返回属性的值，如果不提供此方法，任何读操作都会引起<code>AttributeError</code></li>\n<li>W 是一个接受一个参数的 <code>setter</code> 方法，设置这个属性为这个参数的值，如果不提供此方法，任何写操作都会引起<code>AttributeError</code></li>\n<li>D 是一个 <code>deleter</code> 方法，会删除这个属性，如果不提供此方法，删除操作会引起<code>AttributeError</code></li>\n<li><p>doc 是一个文档字符串用来描述这个属性，调用方法</p>\n<pre><code>C.p.__doc__\n</code></pre></li>\n</ul>\n<p>以下是一个小的类带有属性 x:</p>\n<pre><code>class C(object):\n    def __init__(self):\n        self.__x=None\n    def getx(self):\n        print &quot;+++ getx()&quot;\n        return self.__x\n    def setx(self, v):\n        print &quot;+++ setx({0})&quot;.format(v)\n        self.__x  =  v\n    def delx(self):\n        print &quot;+++ delx()&quot;\n        del self.__x\n    x=property(getx, setx, delx, &quot;Me property &apos;x&apos;.&quot;)\n</code></pre><p>在 python 解释器中执行：</p>\n<pre><code>&gt;&gt;&gt; c=C()\n&gt;&gt;&gt; print c.x\n+++ getx()\nNone\n&gt;&gt;&gt; print C.x.__doc__\nMe property &apos;x&apos;.\n&gt;&gt;&gt; c.x=15\n+++ setx(15)\n&gt;&gt;&gt; c.x\n+++ getx()\n15\n&gt;&gt;&gt; del c.x\n+++ delx()\n&gt;&gt;&gt; c.x\n+++ getx()\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n  File &quot;&lt;stdin&gt;&quot;, line 6, in getx\nAttributeError: &apos;C&apos; object has no attribute &apos;_C__x&apos;\n</code></pre><h1 id=\"property-decorator\"><a href=\"#property-decorator\" class=\"headerlink\" title=\"property decorator\"></a>property decorator</h1><p>从 Python 2.6 开始这个方法支持装饰器用法 <code>@property</code> ，使用这个装饰器装饰一个函数，和用 <code>getter</code> 装饰它效果是一样的。另外这个装饰器本身又带有 <code>deleter</code> 和 <code>setter</code> 两个装饰器。可以使用被 <code>@property</code> 装饰过的函数去定义自己的 <code>setter</code> 和 <code>deleter</code> 方法。</p>\n<p>比如你需要给你的类提供一个 state 属性，而你的 getter 方法返回一个私有的属性 ._state。你可以这样定义：</p>\n<pre><code>@property\ndef state(self):\n    &apos;&apos;&apos;The internal state property.&apos;&apos;&apos;\n    return self._state\n</code></pre><p>这样 .state 将会是这个属性的 getter 方法，而且 文档字符串’’’The internal state property.’’’ 也会被存储在属性中。</p>\n<p>如果你需要 setter 和 deleter 方法：</p>\n<pre><code>@state.setter\ndef state(self, k):\n    if not (0 &lt;= k &lt;= 2):\n        raise ValueError(&quot;Must be 0 through 2 inclusive!&quot;)\n    else:\n        self._state = k\n\n@state.deleter\ndef state(self):\n    del self._state\n</code></pre>"},{"title":"Hexo + GitHub 搭建博客备忘(Mac)","date":"2016-03-28T14:11:00.000Z","_content":"\n## Hexo 安装\n---------------------------------\nhexo 依赖 [node.js](https://nodejs.org/en/), 首先下载安装node.js。然后运行以下命令：\n\n\tnpm install hexo-cli -g\n\thexo init blog\n\tcd blog\n\tnpm install\n\thexo server\n\n之后就可以在\n[http://localhost:4000/](http://localhost:4000/)查看效果了。\n\n<!-- more -->\nHexo 的实用[插件](https://hexo.io/plugins/)\n\n\tnpm install hexo-generator-index --save\n    npm install hexo-generator-archive --save\n    npm install hexo-generator-category --save\n    npm install hexo-generator-tag --save\n    npm install hexo-server --save\n    npm install hexo-deployer-git --save\n    npm install hexo-deployer-heroku --save\n    npm install hexo-deployer-rsync --save\n    npm install hexo-deployer-openshift --save\n    npm install hexo-renderer-marked@0.2 --save\n    npm install hexo-renderer-stylus@0.2 --save\n    npm install hexo-generator-feed@1 --save\n    npm install hexo-generator-sitemap@1 --save\n    npm install --save hexo-admin\n    \n其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在[这里](https://github.com/jaredly/hexo-admin)\n\n## GitHub 账号申请和新建项目\n----------------------------------\n* 登录到你的[GitHub](http://github.com/)账号\n* 选择新建醒目，项目名称需要设置为`your_username.github.io`\n* 首次创建需要10分钟左右的审核时间，之后就可以访问了`http://your_username.github.io` (现在访问可能会导致404，因为项目还是空的)\n\n## 部署到线上\n----------------------------------\n修改 hexo 项目根目录下的站点配置文件`_config.yml`，如果安装了`hexo-deployer-git`插件，这里之接修改如下配置：\n\n\tdeploy:\n    \ttype: git\n        repo: your-repository.git\n        branch: master\n\nHexo 生成命令：\n\t\n    hexo generate\n\n用于将目前项目生成静态文件\n\nHexo 部署命令\n\t\n    hexo deploy\n\n这条命令会根据你在`_config.yml`里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。\n\n这两条命令可以简写为: `hexo g -b` 或者 `hexo b -g` 效果相同。\n\n## Hexo主题\n----------------------------------\n+ Hexo Themes - http://hexo.io/themes/\n+ Jacman - http://wsgzao.github.io/post/hexo-jacman/\n+ iissnan - http://notes.iissnan.com\n\n## Markdown 教程及编写工具\n----------------------------------\n+ Markdown语法 - [http://wowubuntu.com/markdown/]( https://www.zybuluo.com/mdeditor)\n+ 在线工具 - [https://www.zybuluo.com/mdeditor]( https://www.zybuluo.com/mdeditor)\n","source":"_posts/Hexo-GitHub-搭建博客备忘.md","raw":"---\ntitle: Hexo + GitHub 搭建博客备忘(Mac)\ntags:\n  - github\n  - Hexo\ncategories: \n  - 技术相关\ndate: 2016-03-28 22:11:00\n---\n\n## Hexo 安装\n---------------------------------\nhexo 依赖 [node.js](https://nodejs.org/en/), 首先下载安装node.js。然后运行以下命令：\n\n\tnpm install hexo-cli -g\n\thexo init blog\n\tcd blog\n\tnpm install\n\thexo server\n\n之后就可以在\n[http://localhost:4000/](http://localhost:4000/)查看效果了。\n\n<!-- more -->\nHexo 的实用[插件](https://hexo.io/plugins/)\n\n\tnpm install hexo-generator-index --save\n    npm install hexo-generator-archive --save\n    npm install hexo-generator-category --save\n    npm install hexo-generator-tag --save\n    npm install hexo-server --save\n    npm install hexo-deployer-git --save\n    npm install hexo-deployer-heroku --save\n    npm install hexo-deployer-rsync --save\n    npm install hexo-deployer-openshift --save\n    npm install hexo-renderer-marked@0.2 --save\n    npm install hexo-renderer-stylus@0.2 --save\n    npm install hexo-generator-feed@1 --save\n    npm install hexo-generator-sitemap@1 --save\n    npm install --save hexo-admin\n    \n其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在[这里](https://github.com/jaredly/hexo-admin)\n\n## GitHub 账号申请和新建项目\n----------------------------------\n* 登录到你的[GitHub](http://github.com/)账号\n* 选择新建醒目，项目名称需要设置为`your_username.github.io`\n* 首次创建需要10分钟左右的审核时间，之后就可以访问了`http://your_username.github.io` (现在访问可能会导致404，因为项目还是空的)\n\n## 部署到线上\n----------------------------------\n修改 hexo 项目根目录下的站点配置文件`_config.yml`，如果安装了`hexo-deployer-git`插件，这里之接修改如下配置：\n\n\tdeploy:\n    \ttype: git\n        repo: your-repository.git\n        branch: master\n\nHexo 生成命令：\n\t\n    hexo generate\n\n用于将目前项目生成静态文件\n\nHexo 部署命令\n\t\n    hexo deploy\n\n这条命令会根据你在`_config.yml`里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。\n\n这两条命令可以简写为: `hexo g -b` 或者 `hexo b -g` 效果相同。\n\n## Hexo主题\n----------------------------------\n+ Hexo Themes - http://hexo.io/themes/\n+ Jacman - http://wsgzao.github.io/post/hexo-jacman/\n+ iissnan - http://notes.iissnan.com\n\n## Markdown 教程及编写工具\n----------------------------------\n+ Markdown语法 - [http://wowubuntu.com/markdown/]( https://www.zybuluo.com/mdeditor)\n+ 在线工具 - [https://www.zybuluo.com/mdeditor]( https://www.zybuluo.com/mdeditor)\n","slug":"Hexo-GitHub-搭建博客备忘","published":1,"updated":"2016-03-31T04:21:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4obc0006a3rnsm54ibpq","content":"<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><hr>\n<p>hexo 依赖 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>, 首先下载安装node.js。然后运行以下命令：</p>\n<pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n</code></pre><p>之后就可以在<br><a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>查看效果了。</p>\n<a id=\"more\"></a>\n<p>Hexo 的实用<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">插件</a></p>\n<pre><code>npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install --save hexo-admin\n</code></pre><p>其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在<a href=\"https://github.com/jaredly/hexo-admin\" target=\"_blank\" rel=\"external\">这里</a></p>\n<h2 id=\"GitHub-账号申请和新建项目\"><a href=\"#GitHub-账号申请和新建项目\" class=\"headerlink\" title=\"GitHub 账号申请和新建项目\"></a>GitHub 账号申请和新建项目</h2><hr>\n<ul>\n<li>登录到你的<a href=\"http://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a>账号</li>\n<li>选择新建醒目，项目名称需要设置为<code>your_username.github.io</code></li>\n<li>首次创建需要10分钟左右的审核时间，之后就可以访问了<code>http://your_username.github.io</code> (现在访问可能会导致404，因为项目还是空的)</li>\n</ul>\n<h2 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h2><hr>\n<p>修改 hexo 项目根目录下的站点配置文件<code>_config.yml</code>，如果安装了<code>hexo-deployer-git</code>插件，这里之接修改如下配置：</p>\n<pre><code>deploy:\n    type: git\n    repo: your-repository.git\n    branch: master\n</code></pre><p>Hexo 生成命令：</p>\n<pre><code>hexo generate\n</code></pre><p>用于将目前项目生成静态文件</p>\n<p>Hexo 部署命令</p>\n<pre><code>hexo deploy\n</code></pre><p>这条命令会根据你在<code>_config.yml</code>里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。</p>\n<p>这两条命令可以简写为: <code>hexo g -b</code> 或者 <code>hexo b -g</code> 效果相同。</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><hr>\n<ul>\n<li>Hexo Themes - <a href=\"http://hexo.io/themes/\" target=\"_blank\" rel=\"external\">http://hexo.io/themes/</a></li>\n<li>Jacman - <a href=\"http://wsgzao.github.io/post/hexo-jacman/\" target=\"_blank\" rel=\"external\">http://wsgzao.github.io/post/hexo-jacman/</a></li>\n<li>iissnan - <a href=\"http://notes.iissnan.com\" target=\"_blank\" rel=\"external\">http://notes.iissnan.com</a></li>\n</ul>\n<h2 id=\"Markdown-教程及编写工具\"><a href=\"#Markdown-教程及编写工具\" class=\"headerlink\" title=\"Markdown 教程及编写工具\"></a>Markdown 教程及编写工具</h2><hr>\n<ul>\n<li>Markdown语法 - <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">http://wowubuntu.com/markdown/</a></li>\n<li>在线工具 - <a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">https://www.zybuluo.com/mdeditor</a></li>\n</ul>\n","excerpt":"<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><hr>\n<p>hexo 依赖 <a href=\"https://nodejs.org/en/\">node.js</a>, 首先下载安装node.js。然后运行以下命令：</p>\n<pre><code>npm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n</code></pre><p>之后就可以在<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a>查看效果了。</p>","more":"<p>Hexo 的实用<a href=\"https://hexo.io/plugins/\">插件</a></p>\n<pre><code>npm install hexo-generator-index --save\nnpm install hexo-generator-archive --save\nnpm install hexo-generator-category --save\nnpm install hexo-generator-tag --save\nnpm install hexo-server --save\nnpm install hexo-deployer-git --save\nnpm install hexo-deployer-heroku --save\nnpm install hexo-deployer-rsync --save\nnpm install hexo-deployer-openshift --save\nnpm install hexo-renderer-marked@0.2 --save\nnpm install hexo-renderer-stylus@0.2 --save\nnpm install hexo-generator-feed@1 --save\nnpm install hexo-generator-sitemap@1 --save\nnpm install --save hexo-admin\n</code></pre><p>其中 hexo-admin 无法在线上使用，可以在本地编辑完之后部署即可，地址为根目录＋/admin/，具体配置在<a href=\"https://github.com/jaredly/hexo-admin\">这里</a></p>\n<h2 id=\"GitHub-账号申请和新建项目\"><a href=\"#GitHub-账号申请和新建项目\" class=\"headerlink\" title=\"GitHub 账号申请和新建项目\"></a>GitHub 账号申请和新建项目</h2><hr>\n<ul>\n<li>登录到你的<a href=\"http://github.com/\">GitHub</a>账号</li>\n<li>选择新建醒目，项目名称需要设置为<code>your_username.github.io</code></li>\n<li>首次创建需要10分钟左右的审核时间，之后就可以访问了<code>http://your_username.github.io</code> (现在访问可能会导致404，因为项目还是空的)</li>\n</ul>\n<h2 id=\"部署到线上\"><a href=\"#部署到线上\" class=\"headerlink\" title=\"部署到线上\"></a>部署到线上</h2><hr>\n<p>修改 hexo 项目根目录下的站点配置文件<code>_config.yml</code>，如果安装了<code>hexo-deployer-git</code>插件，这里之接修改如下配置：</p>\n<pre><code>deploy:\n    type: git\n    repo: your-repository.git\n    branch: master\n</code></pre><p>Hexo 生成命令：</p>\n<pre><code>hexo generate\n</code></pre><p>用于将目前项目生成静态文件</p>\n<p>Hexo 部署命令</p>\n<pre><code>hexo deploy\n</code></pre><p>这条命令会根据你在<code>_config.yml</code>里面的配置将生成的静态文件部署到线上，之后就可以通过之前的链接进行访问了。</p>\n<p>这两条命令可以简写为: <code>hexo g -b</code> 或者 <code>hexo b -g</code> 效果相同。</p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><hr>\n<ul>\n<li>Hexo Themes - <a href=\"http://hexo.io/themes/\">http://hexo.io/themes/</a></li>\n<li>Jacman - <a href=\"http://wsgzao.github.io/post/hexo-jacman/\">http://wsgzao.github.io/post/hexo-jacman/</a></li>\n<li>iissnan - <a href=\"http://notes.iissnan.com\">http://notes.iissnan.com</a></li>\n</ul>\n<h2 id=\"Markdown-教程及编写工具\"><a href=\"#Markdown-教程及编写工具\" class=\"headerlink\" title=\"Markdown 教程及编写工具\"></a>Markdown 教程及编写工具</h2><hr>\n<ul>\n<li>Markdown语法 - <a href=\"https://www.zybuluo.com/mdeditor\">http://wowubuntu.com/markdown/</a></li>\n<li>在线工具 - <a href=\"https://www.zybuluo.com/mdeditor\">https://www.zybuluo.com/mdeditor</a></li>\n</ul>"},{"title":"Scrapy 框架简介","date":"2016-03-31T07:29:07.000Z","_content":"\n# Scrapy 是？\n\nScrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。\n\n# Scrapy 安装\n\n以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：\n\t\n\tPython2.7\n\tpip 和 setuptools 包\n\tlxml. \n\tOpenSSL\n\t\n<!-- more -->\n你可以通过 pip 来进行安装。\n\n\tpip install scrapy\n\nPS: Mac OS X上需要安装 Xcode development tools.\n\n\txcode-select --install\n\n\n# Scrapy Tutorial\n\n这个教程将会涵盖以下内容：\n\n1. 创建一个 Scrapy 项目\n2. 定义你需要抓去的 Item\n3. 写一个爬虫去爬取一个网站并且提取出你的 Item\n4. 写一个 Item Pipeline 去存取数据\n\n我们爬取的目标是这个网站[Open directory project (dmoz)](http://www.dmoz.org/)\n\n## 创建 Scrapy 项目\n\n运行以下命令：\n\n\tscrapy startproject tutorial\n\n这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：\n\n\ttutorial/\n    scrapy.cfg            # deploy configuration file\n\n    tutorial/             # project's Python module, you'll import your code from here\n        __init__.py\n\n        items.py          # project items file\n\n        pipelines.py      # project pipelines file\n\n        settings.py       # project settings file\n\n        spiders/          # a directory where you'll later put your spiders\n            __init__.py\n            ...\n\n\n## 定义 Item\n\nItem 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。\n\n通过创建 `scrapy.Item` 类和相应的 `srapy.Field` 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。\n\n在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：\n\t\n\timport scrapy\n\n\tclass DmozItem(scrapy.Item):\n    \ttitle = scrapy.Field()\n    \tlink = scrapy.Field()\n    \tdesc = scrapy.Field()\n    \t\n## 第一个 Spider\n\nSpider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。\n\n创建一个 Spider 需要继承 `scrapy.Spider` 类，以下是类中定义的属性：\n\n* `name`: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider\n* `start_urls`: 一个包含开始爬取 URL 的列表\n* `parse()`: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL\n\n本教程中，在`tutorial/spiders`目录下保存`dmoz_spider.py` 作为第一个 spider 内容如下：\n\t\n\timport scrapy\n\n\tclass DmozSpider(scrapy.Spider):\n    \tname = \"dmoz\"\n    \tallowed_domains = [\"dmoz.org\"]\n    \tstart_urls = [\n        \t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n       \t\t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    \t]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2] + '.html'\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n\n### 爬取\n\n返回项目跟目录，运行：\n\n\tscrapy crawl dmoz\n\n这个命令会启动名字为`dmoz`的爬虫，就是我们刚刚写的。会有如下输出\n\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n\t2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/> (referer: None)\t\n\t2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/> (referer: None)\n\t2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n\n### 提取Items\n\n#### Selector\n\nScrapy Selector 使用两种机制 [CSS](https://www.w3.org/TR/selectors/) 和 [XPath](https://www.w3.org/TR/xpath/) 进行数据解析。\n更多信息参考 []Selector documentation](http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors)\n\n#### 在 Shell 里面尝试 Selector\n\n运行以下命令：\n\n\tscrapy shell \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"\n\n然后就可以尝试查看 response 的各种属性了\n\n\tIn [1]: response.xpath('//title')\n\tOut[1]: [<Selector xpath='//title' data=u'<title>Open Directory - Computers: Progr'>]\n\n\tIn [2]: response.xpath('//title').extract()\n\tOut[2]: [u'<title>Open Directory - Computers: Programming: Languages: Python: Books</title>']\n\n\tIn [3]: response.xpath('//title/text()')\n\tOut[3]: [<Selector xpath='//title/text()' data=u'Open Directory - Computers: Programming:'>]\n\n\tIn [4]: response.xpath('//title/text()').extract()\n\tOut[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']\n\n\tIn [5]: response.xpath('//title/text()').re('(\\w+):')\n\tOut[5]: [u'Computers', u'Programming', u'Languages', u'Python']\n\t\n#### 提取数据\n\n现在我们来提取一些真正的信息吧\n\n通过查看`response.body` 我们发现需要的信息在<ul>标签里面，\n\n在我们的 spider 里面加入以下代码：\n\t\n\timport scrapy\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        for sel in response.xpath('//ul/li'):\n            title = sel.xpath('a/text()').extract()\n            link = sel.xpath('a/@href').extract()\n            desc = sel.xpath('text()').extract()\n            print title, link, desc\n\n\n### 使用我们的Item\n\nItem objects 是一个 Python 字典，你可以像使用字典那样使用它。\n\n\t>>> item = DmozItem()\n\t>>> item['title'] = 'Example title'\n\t>>> item['title']\n\t'Example title'\n\n我们修改 spider 的代码：\n\n\timport scrapy\n\t\n\tfrom tutorial.items import DmozItem\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        for sel in response.xpath('//ul/li'):\n            item = DmozItem()\n            item['title'] = sel.xpath('a/text()').extract()\n            item['link'] = sel.xpath('a/@href').extract()\n            item['desc'] = sel.xpath('text()').extract()\n            yield item\n\n现在运行代码会得到`DmozItem` objects:\n\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n      'link': [u'http://gnosis.cx/TPiP/'],\n      'title': [u'Text Processing in Python']}\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n'],\n      'link': [u'http://www.informit.com/store/product.aspx?isbn=0130211192'],\n      'title': [u'XML Processing with Python']}\n\n## Following links\n\n仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。\n这里修改我们的代码：\n\n\timport scrapy\n\t\n\tfrom tutorial.items import DmozItem\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/\",\n    ]\n\n    def parse(self, response):\n        for href in response.css(\"ul.directory.dir-col > li > a::attr('href')\"):\n            url = response.urljoin(href.extract())\n            yield scrapy.Request(url, callback=self.parse_dir_contents)\n\n    def parse_dir_contents(self, response):\n        for sel in response.xpath('//ul/li'):\n            item = DmozItem()\n            item['title'] = sel.xpath('a/text()').extract()\n            item['link'] = sel.xpath('a/@href').extract()\n            item['desc'] = sel.xpath('text()').extract()\n            yield item\n\n现在 *parse()* 方法仅仅提取我们需要的URL，再用 *response.urljoin* 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 *parse_dir_contents()* callback 函数， 作为实际的内容提取。\n\nScrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。\n\n通过这个机制我们可以编写更为复杂的爬虫。\n\n## 存储爬取的数据\n\n最简单的方式是用 [Feed exports](http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports)，通过下面的命令：\n\n\tscrapy crawl dmoz -o items.json\n\t\n这会生成一个名为`item.json`的文件，存储了我们抓取的数据，存储格式为JSON。\n小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 [Item Pipeline](http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline)\n\n\n\t\n","source":"_posts/Scrapy-框架简介.md","raw":"---\ntitle: Scrapy 框架简介\ndate: 2016-03-31 15:29:07\ntags:\n\t- Scrapy\ncategories: \n\t- 技术相关\n---\n\n# Scrapy 是？\n\nScrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。\n\n# Scrapy 安装\n\n以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：\n\t\n\tPython2.7\n\tpip 和 setuptools 包\n\tlxml. \n\tOpenSSL\n\t\n<!-- more -->\n你可以通过 pip 来进行安装。\n\n\tpip install scrapy\n\nPS: Mac OS X上需要安装 Xcode development tools.\n\n\txcode-select --install\n\n\n# Scrapy Tutorial\n\n这个教程将会涵盖以下内容：\n\n1. 创建一个 Scrapy 项目\n2. 定义你需要抓去的 Item\n3. 写一个爬虫去爬取一个网站并且提取出你的 Item\n4. 写一个 Item Pipeline 去存取数据\n\n我们爬取的目标是这个网站[Open directory project (dmoz)](http://www.dmoz.org/)\n\n## 创建 Scrapy 项目\n\n运行以下命令：\n\n\tscrapy startproject tutorial\n\n这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：\n\n\ttutorial/\n    scrapy.cfg            # deploy configuration file\n\n    tutorial/             # project's Python module, you'll import your code from here\n        __init__.py\n\n        items.py          # project items file\n\n        pipelines.py      # project pipelines file\n\n        settings.py       # project settings file\n\n        spiders/          # a directory where you'll later put your spiders\n            __init__.py\n            ...\n\n\n## 定义 Item\n\nItem 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。\n\n通过创建 `scrapy.Item` 类和相应的 `srapy.Field` 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。\n\n在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：\n\t\n\timport scrapy\n\n\tclass DmozItem(scrapy.Item):\n    \ttitle = scrapy.Field()\n    \tlink = scrapy.Field()\n    \tdesc = scrapy.Field()\n    \t\n## 第一个 Spider\n\nSpider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。\n\n创建一个 Spider 需要继承 `scrapy.Spider` 类，以下是类中定义的属性：\n\n* `name`: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider\n* `start_urls`: 一个包含开始爬取 URL 的列表\n* `parse()`: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL\n\n本教程中，在`tutorial/spiders`目录下保存`dmoz_spider.py` 作为第一个 spider 内容如下：\n\t\n\timport scrapy\n\n\tclass DmozSpider(scrapy.Spider):\n    \tname = \"dmoz\"\n    \tallowed_domains = [\"dmoz.org\"]\n    \tstart_urls = [\n        \t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n       \t\t\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    \t]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2] + '.html'\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n\n### 爬取\n\n返回项目跟目录，运行：\n\n\tscrapy crawl dmoz\n\n这个命令会启动名字为`dmoz`的爬虫，就是我们刚刚写的。会有如下输出\n\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n\t2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n\t2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/> (referer: None)\t\n\t2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) <GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/> (referer: None)\n\t2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n\n### 提取Items\n\n#### Selector\n\nScrapy Selector 使用两种机制 [CSS](https://www.w3.org/TR/selectors/) 和 [XPath](https://www.w3.org/TR/xpath/) 进行数据解析。\n更多信息参考 []Selector documentation](http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors)\n\n#### 在 Shell 里面尝试 Selector\n\n运行以下命令：\n\n\tscrapy shell \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"\n\n然后就可以尝试查看 response 的各种属性了\n\n\tIn [1]: response.xpath('//title')\n\tOut[1]: [<Selector xpath='//title' data=u'<title>Open Directory - Computers: Progr'>]\n\n\tIn [2]: response.xpath('//title').extract()\n\tOut[2]: [u'<title>Open Directory - Computers: Programming: Languages: Python: Books</title>']\n\n\tIn [3]: response.xpath('//title/text()')\n\tOut[3]: [<Selector xpath='//title/text()' data=u'Open Directory - Computers: Programming:'>]\n\n\tIn [4]: response.xpath('//title/text()').extract()\n\tOut[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']\n\n\tIn [5]: response.xpath('//title/text()').re('(\\w+):')\n\tOut[5]: [u'Computers', u'Programming', u'Languages', u'Python']\n\t\n#### 提取数据\n\n现在我们来提取一些真正的信息吧\n\n通过查看`response.body` 我们发现需要的信息在<ul>标签里面，\n\n在我们的 spider 里面加入以下代码：\n\t\n\timport scrapy\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        for sel in response.xpath('//ul/li'):\n            title = sel.xpath('a/text()').extract()\n            link = sel.xpath('a/@href').extract()\n            desc = sel.xpath('text()').extract()\n            print title, link, desc\n\n\n### 使用我们的Item\n\nItem objects 是一个 Python 字典，你可以像使用字典那样使用它。\n\n\t>>> item = DmozItem()\n\t>>> item['title'] = 'Example title'\n\t>>> item['title']\n\t'Example title'\n\n我们修改 spider 的代码：\n\n\timport scrapy\n\t\n\tfrom tutorial.items import DmozItem\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        for sel in response.xpath('//ul/li'):\n            item = DmozItem()\n            item['title'] = sel.xpath('a/text()').extract()\n            item['link'] = sel.xpath('a/@href').extract()\n            item['desc'] = sel.xpath('text()').extract()\n            yield item\n\n现在运行代码会得到`DmozItem` objects:\n\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n      'link': [u'http://gnosis.cx/TPiP/'],\n      'title': [u'Text Processing in Python']}\n\t[scrapy] DEBUG: Scraped from <200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/>\n     {'desc': [u' - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n'],\n      'link': [u'http://www.informit.com/store/product.aspx?isbn=0130211192'],\n      'title': [u'XML Processing with Python']}\n\n## Following links\n\n仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。\n这里修改我们的代码：\n\n\timport scrapy\n\t\n\tfrom tutorial.items import DmozItem\n\t\n\tclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/\",\n    ]\n\n    def parse(self, response):\n        for href in response.css(\"ul.directory.dir-col > li > a::attr('href')\"):\n            url = response.urljoin(href.extract())\n            yield scrapy.Request(url, callback=self.parse_dir_contents)\n\n    def parse_dir_contents(self, response):\n        for sel in response.xpath('//ul/li'):\n            item = DmozItem()\n            item['title'] = sel.xpath('a/text()').extract()\n            item['link'] = sel.xpath('a/@href').extract()\n            item['desc'] = sel.xpath('text()').extract()\n            yield item\n\n现在 *parse()* 方法仅仅提取我们需要的URL，再用 *response.urljoin* 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 *parse_dir_contents()* callback 函数， 作为实际的内容提取。\n\nScrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。\n\n通过这个机制我们可以编写更为复杂的爬虫。\n\n## 存储爬取的数据\n\n最简单的方式是用 [Feed exports](http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports)，通过下面的命令：\n\n\tscrapy crawl dmoz -o items.json\n\t\n这会生成一个名为`item.json`的文件，存储了我们抓取的数据，存储格式为JSON。\n小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 [Item Pipeline](http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline)\n\n\n\t\n","slug":"Scrapy-框架简介","published":1,"updated":"2016-03-31T10:37:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4obf0007a3rns9tcnbrw","content":"<h1 id=\"Scrapy-是？\"><a href=\"#Scrapy-是？\" class=\"headerlink\" title=\"Scrapy 是？\"></a>Scrapy 是？</h1><p>Scrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。</p>\n<h1 id=\"Scrapy-安装\"><a href=\"#Scrapy-安装\" class=\"headerlink\" title=\"Scrapy 安装\"></a>Scrapy 安装</h1><p>以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：</p>\n<pre><code>Python2.7\npip 和 setuptools 包\nlxml. \nOpenSSL\n</code></pre><a id=\"more\"></a>\n<p>你可以通过 pip 来进行安装。</p>\n<pre><code>pip install scrapy\n</code></pre><p>PS: Mac OS X上需要安装 Xcode development tools.</p>\n<pre><code>xcode-select --install\n</code></pre><h1 id=\"Scrapy-Tutorial\"><a href=\"#Scrapy-Tutorial\" class=\"headerlink\" title=\"Scrapy Tutorial\"></a>Scrapy Tutorial</h1><p>这个教程将会涵盖以下内容：</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义你需要抓去的 Item</li>\n<li>写一个爬虫去爬取一个网站并且提取出你的 Item</li>\n<li>写一个 Item Pipeline 去存取数据</li>\n</ol>\n<p>我们爬取的目标是这个网站<a href=\"http://www.dmoz.org/\" target=\"_blank\" rel=\"external\">Open directory project (dmoz)</a></p>\n<h2 id=\"创建-Scrapy-项目\"><a href=\"#创建-Scrapy-项目\" class=\"headerlink\" title=\"创建 Scrapy 项目\"></a>创建 Scrapy 项目</h2><p>运行以下命令：</p>\n<pre><code>scrapy startproject tutorial\n</code></pre><p>这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：</p>\n<pre><code>tutorial/\nscrapy.cfg            # deploy configuration file\n\ntutorial/             # project&apos;s Python module, you&apos;ll import your code from here\n    __init__.py\n\n    items.py          # project items file\n\n    pipelines.py      # project pipelines file\n\n    settings.py       # project settings file\n\n    spiders/          # a directory where you&apos;ll later put your spiders\n        __init__.py\n        ...\n</code></pre><h2 id=\"定义-Item\"><a href=\"#定义-Item\" class=\"headerlink\" title=\"定义 Item\"></a>定义 Item</h2><p>Item 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。</p>\n<p>通过创建 <code>scrapy.Item</code> 类和相应的 <code>srapy.Field</code> 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。</p>\n<p>在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：</p>\n<pre><code>import scrapy\n\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n</code></pre><h2 id=\"第一个-Spider\"><a href=\"#第一个-Spider\" class=\"headerlink\" title=\"第一个 Spider\"></a>第一个 Spider</h2><p>Spider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。</p>\n<p>创建一个 Spider 需要继承 <code>scrapy.Spider</code> 类，以下是类中定义的属性：</p>\n<ul>\n<li><code>name</code>: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider</li>\n<li><code>start_urls</code>: 一个包含开始爬取 URL 的列表</li>\n<li><code>parse()</code>: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL</li>\n</ul>\n<p>本教程中，在<code>tutorial/spiders</code>目录下保存<code>dmoz_spider.py</code> 作为第一个 spider 内容如下：</p>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.Spider):\n    name = &quot;dmoz&quot;\n    allowed_domains = [&quot;dmoz.org&quot;]\n    start_urls = [\n        &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n           &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n    ]\n\ndef parse(self, response):\n    filename = response.url.split(&quot;/&quot;)[-2] + &apos;.html&apos;\n    with open(filename, &apos;wb&apos;) as f:\n        f.write(response.body)\n</code></pre><h3 id=\"爬取\"><a href=\"#爬取\" class=\"headerlink\" title=\"爬取\"></a>爬取</h3><p>返回项目跟目录，运行：</p>\n<pre><code>scrapy crawl dmoz\n</code></pre><p>这个命令会启动名字为<code>dmoz</code>的爬虫，就是我们刚刚写的。会有如下输出</p>\n<pre><code>2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&gt; (referer: None)    \n2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt; (referer: None)\n2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n</code></pre><h3 id=\"提取Items\"><a href=\"#提取Items\" class=\"headerlink\" title=\"提取Items\"></a>提取Items</h3><h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><p>Scrapy Selector 使用两种机制 <a href=\"https://www.w3.org/TR/selectors/\" target=\"_blank\" rel=\"external\">CSS</a> 和 <a href=\"https://www.w3.org/TR/xpath/\" target=\"_blank\" rel=\"external\">XPath</a> 进行数据解析。<br>更多信息参考 <a href=\"http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors\" target=\"_blank\" rel=\"external\">]Selector documentation</a></p>\n<h4 id=\"在-Shell-里面尝试-Selector\"><a href=\"#在-Shell-里面尝试-Selector\" class=\"headerlink\" title=\"在 Shell 里面尝试 Selector\"></a>在 Shell 里面尝试 Selector</h4><p>运行以下命令：</p>\n<pre><code>scrapy shell &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;\n</code></pre><p>然后就可以尝试查看 response 的各种属性了</p>\n<pre><code>In [1]: response.xpath(&apos;//title&apos;)\nOut[1]: [&lt;Selector xpath=&apos;//title&apos; data=u&apos;&lt;title&gt;Open Directory - Computers: Progr&apos;&gt;]\n\nIn [2]: response.xpath(&apos;//title&apos;).extract()\nOut[2]: [u&apos;&lt;title&gt;Open Directory - Computers: Programming: Languages: Python: Books&lt;/title&gt;&apos;]\n\nIn [3]: response.xpath(&apos;//title/text()&apos;)\nOut[3]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos;Open Directory - Computers: Programming:&apos;&gt;]\n\nIn [4]: response.xpath(&apos;//title/text()&apos;).extract()\nOut[4]: [u&apos;Open Directory - Computers: Programming: Languages: Python: Books&apos;]\n\nIn [5]: response.xpath(&apos;//title/text()&apos;).re(&apos;(\\w+):&apos;)\nOut[5]: [u&apos;Computers&apos;, u&apos;Programming&apos;, u&apos;Languages&apos;, u&apos;Python&apos;]\n</code></pre><h4 id=\"提取数据\"><a href=\"#提取数据\" class=\"headerlink\" title=\"提取数据\"></a>提取数据</h4><p>现在我们来提取一些真正的信息吧</p>\n<p>通过查看<code>response.body</code> 我们发现需要的信息在<ul>标签里面，</ul></p>\n<p>在我们的 spider 里面加入以下代码：</p>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n]\n\ndef parse(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        title = sel.xpath(&apos;a/text()&apos;).extract()\n        link = sel.xpath(&apos;a/@href&apos;).extract()\n        desc = sel.xpath(&apos;text()&apos;).extract()\n        print title, link, desc\n</code></pre><h3 id=\"使用我们的Item\"><a href=\"#使用我们的Item\" class=\"headerlink\" title=\"使用我们的Item\"></a>使用我们的Item</h3><p>Item objects 是一个 Python 字典，你可以像使用字典那样使用它。</p>\n<pre><code>&gt;&gt;&gt; item = DmozItem()\n&gt;&gt;&gt; item[&apos;title&apos;] = &apos;Example title&apos;\n&gt;&gt;&gt; item[&apos;title&apos;]\n&apos;Example title&apos;\n</code></pre><p>我们修改 spider 的代码：</p>\n<pre><code>import scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n]\n\ndef parse(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        item = DmozItem()\n        item[&apos;title&apos;] = sel.xpath(&apos;a/text()&apos;).extract()\n        item[&apos;link&apos;] = sel.xpath(&apos;a/@href&apos;).extract()\n        item[&apos;desc&apos;] = sel.xpath(&apos;text()&apos;).extract()\n        yield item\n</code></pre><p>现在运行代码会得到<code>DmozItem</code> objects:</p>\n<pre><code>[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n  &apos;link&apos;: [u&apos;http://gnosis.cx/TPiP/&apos;],\n  &apos;title&apos;: [u&apos;Text Processing in Python&apos;]}\n[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n&apos;],\n  &apos;link&apos;: [u&apos;http://www.informit.com/store/product.aspx?isbn=0130211192&apos;],\n  &apos;title&apos;: [u&apos;XML Processing with Python&apos;]}\n</code></pre><h2 id=\"Following-links\"><a href=\"#Following-links\" class=\"headerlink\" title=\"Following links\"></a>Following links</h2><p>仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。<br>这里修改我们的代码：</p>\n<pre><code>import scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/&quot;,\n]\n\ndef parse(self, response):\n    for href in response.css(&quot;ul.directory.dir-col &gt; li &gt; a::attr(&apos;href&apos;)&quot;):\n        url = response.urljoin(href.extract())\n        yield scrapy.Request(url, callback=self.parse_dir_contents)\n\ndef parse_dir_contents(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        item = DmozItem()\n        item[&apos;title&apos;] = sel.xpath(&apos;a/text()&apos;).extract()\n        item[&apos;link&apos;] = sel.xpath(&apos;a/@href&apos;).extract()\n        item[&apos;desc&apos;] = sel.xpath(&apos;text()&apos;).extract()\n        yield item\n</code></pre><p>现在 <em>parse()</em> 方法仅仅提取我们需要的URL，再用 <em>response.urljoin</em> 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 <em>parse_dir_contents()</em> callback 函数， 作为实际的内容提取。</p>\n<p>Scrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。</p>\n<p>通过这个机制我们可以编写更为复杂的爬虫。</p>\n<h2 id=\"存储爬取的数据\"><a href=\"#存储爬取的数据\" class=\"headerlink\" title=\"存储爬取的数据\"></a>存储爬取的数据</h2><p>最简单的方式是用 <a href=\"http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports\" target=\"_blank\" rel=\"external\">Feed exports</a>，通过下面的命令：</p>\n<pre><code>scrapy crawl dmoz -o items.json\n</code></pre><p>这会生成一个名为<code>item.json</code>的文件，存储了我们抓取的数据，存储格式为JSON。<br>小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 <a href=\"http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline\" target=\"_blank\" rel=\"external\">Item Pipeline</a></p>\n","excerpt":"<h1 id=\"Scrapy-是？\"><a href=\"#Scrapy-是？\" class=\"headerlink\" title=\"Scrapy 是？\"></a>Scrapy 是？</h1><p>Scrapy 是一个用于爬取网络内容的应用框架，可以提取结构化数据由于数据挖掘或者信息处理。</p>\n<h1 id=\"Scrapy-安装\"><a href=\"#Scrapy-安装\" class=\"headerlink\" title=\"Scrapy 安装\"></a>Scrapy 安装</h1><p>以下是 Scrapy 的一些依赖，安装 Scrapy 之前首先完成它们的安装配置：</p>\n<pre><code>Python2.7\npip 和 setuptools 包\nlxml. \nOpenSSL\n</code></pre>","more":"<p>你可以通过 pip 来进行安装。</p>\n<pre><code>pip install scrapy\n</code></pre><p>PS: Mac OS X上需要安装 Xcode development tools.</p>\n<pre><code>xcode-select --install\n</code></pre><h1 id=\"Scrapy-Tutorial\"><a href=\"#Scrapy-Tutorial\" class=\"headerlink\" title=\"Scrapy Tutorial\"></a>Scrapy Tutorial</h1><p>这个教程将会涵盖以下内容：</p>\n<ol>\n<li>创建一个 Scrapy 项目</li>\n<li>定义你需要抓去的 Item</li>\n<li>写一个爬虫去爬取一个网站并且提取出你的 Item</li>\n<li>写一个 Item Pipeline 去存取数据</li>\n</ol>\n<p>我们爬取的目标是这个网站<a href=\"http://www.dmoz.org/\">Open directory project (dmoz)</a></p>\n<h2 id=\"创建-Scrapy-项目\"><a href=\"#创建-Scrapy-项目\" class=\"headerlink\" title=\"创建 Scrapy 项目\"></a>创建 Scrapy 项目</h2><p>运行以下命令：</p>\n<pre><code>scrapy startproject tutorial\n</code></pre><p>这个命令用于创建 scrapy 项目，它会生成一个名为 tutorial 的目录包含以下内容：</p>\n<pre><code>tutorial/\nscrapy.cfg            # deploy configuration file\n\ntutorial/             # project&apos;s Python module, you&apos;ll import your code from here\n    __init__.py\n\n    items.py          # project items file\n\n    pipelines.py      # project pipelines file\n\n    settings.py       # project settings file\n\n    spiders/          # a directory where you&apos;ll later put your spiders\n        __init__.py\n        ...\n</code></pre><h2 id=\"定义-Item\"><a href=\"#定义-Item\" class=\"headerlink\" title=\"定义 Item\"></a>定义 Item</h2><p>Item 相当于一个包含抓取来的数据的一个容器，它们和 Python 中的字典很像，你可以像操作 Python 字典一样使用它。</p>\n<p>通过创建 <code>scrapy.Item</code> 类和相应的 <code>srapy.Field</code> 属性来定义它， 这有点像一个 ORM，（django ORM 或者 SQLAlchemy）。</p>\n<p>在本教程中我们希望抓取 title, 链接和描述，所以，修改 tutorial 目录下的  item.py 文件：</p>\n<pre><code>import scrapy\n\nclass DmozItem(scrapy.Item):\n    title = scrapy.Field()\n    link = scrapy.Field()\n    desc = scrapy.Field()\n</code></pre><h2 id=\"第一个-Spider\"><a href=\"#第一个-Spider\" class=\"headerlink\" title=\"第一个 Spider\"></a>第一个 Spider</h2><p>Spider 是一些你定义的类。用于让 Scrapy 去从一个 domain 或者 URL 来爬取你需要的数据。</p>\n<p>创建一个 Spider 需要继承 <code>scrapy.Spider</code> 类，以下是类中定义的属性：</p>\n<ul>\n<li><code>name</code>: Spider 的名字，每个 Spider 的名字都是不同的，你不能定义两个拥有同样名字的 Spider</li>\n<li><code>start_urls</code>: 一个包含开始爬取 URL 的列表</li>\n<li><code>parse()</code>: spider 的一个方法，每一个 response 都会调用这个方法，它负责解析 response 中的数据，提取更多的 URL</li>\n</ul>\n<p>本教程中，在<code>tutorial/spiders</code>目录下保存<code>dmoz_spider.py</code> 作为第一个 spider 内容如下：</p>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.Spider):\n    name = &quot;dmoz&quot;\n    allowed_domains = [&quot;dmoz.org&quot;]\n    start_urls = [\n        &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n           &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n    ]\n\ndef parse(self, response):\n    filename = response.url.split(&quot;/&quot;)[-2] + &apos;.html&apos;\n    with open(filename, &apos;wb&apos;) as f:\n        f.write(response.body)\n</code></pre><h3 id=\"爬取\"><a href=\"#爬取\" class=\"headerlink\" title=\"爬取\"></a>爬取</h3><p>返回项目跟目录，运行：</p>\n<pre><code>scrapy crawl dmoz\n</code></pre><p>这个命令会启动名字为<code>dmoz</code>的爬虫，就是我们刚刚写的。会有如下输出</p>\n<pre><code>2014-01-23 18:13:07-0400 [scrapy] INFO: Scrapy started (bot: tutorial)\n2014-01-23 18:13:07-0400 [scrapy] INFO: Optional features available: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Overridden settings: {}\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled extensions: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled downloader middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled spider middlewares: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Enabled item pipelines: ...\n2014-01-23 18:13:07-0400 [scrapy] INFO: Spider opened\n2014-01-23 18:13:08-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&gt; (referer: None)    \n2014-01-23 18:13:09-0400 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt; (referer: None)\n2014-01-23 18:13:09-0400 [scrapy] INFO: Closing spider (finished)\n</code></pre><h3 id=\"提取Items\"><a href=\"#提取Items\" class=\"headerlink\" title=\"提取Items\"></a>提取Items</h3><h4 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h4><p>Scrapy Selector 使用两种机制 <a href=\"https://www.w3.org/TR/selectors/\">CSS</a> 和 <a href=\"https://www.w3.org/TR/xpath/\">XPath</a> 进行数据解析。<br>更多信息参考 <a href=\"http://doc.scrapy.org/en/1.0/topics/selectors.html#topics-selectors\">]Selector documentation</a></p>\n<h4 id=\"在-Shell-里面尝试-Selector\"><a href=\"#在-Shell-里面尝试-Selector\" class=\"headerlink\" title=\"在 Shell 里面尝试 Selector\"></a>在 Shell 里面尝试 Selector</h4><p>运行以下命令：</p>\n<pre><code>scrapy shell &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;\n</code></pre><p>然后就可以尝试查看 response 的各种属性了</p>\n<pre><code>In [1]: response.xpath(&apos;//title&apos;)\nOut[1]: [&lt;Selector xpath=&apos;//title&apos; data=u&apos;&lt;title&gt;Open Directory - Computers: Progr&apos;&gt;]\n\nIn [2]: response.xpath(&apos;//title&apos;).extract()\nOut[2]: [u&apos;&lt;title&gt;Open Directory - Computers: Programming: Languages: Python: Books&lt;/title&gt;&apos;]\n\nIn [3]: response.xpath(&apos;//title/text()&apos;)\nOut[3]: [&lt;Selector xpath=&apos;//title/text()&apos; data=u&apos;Open Directory - Computers: Programming:&apos;&gt;]\n\nIn [4]: response.xpath(&apos;//title/text()&apos;).extract()\nOut[4]: [u&apos;Open Directory - Computers: Programming: Languages: Python: Books&apos;]\n\nIn [5]: response.xpath(&apos;//title/text()&apos;).re(&apos;(\\w+):&apos;)\nOut[5]: [u&apos;Computers&apos;, u&apos;Programming&apos;, u&apos;Languages&apos;, u&apos;Python&apos;]\n</code></pre><h4 id=\"提取数据\"><a href=\"#提取数据\" class=\"headerlink\" title=\"提取数据\"></a>提取数据</h4><p>现在我们来提取一些真正的信息吧</p>\n<p>通过查看<code>response.body</code> 我们发现需要的信息在<ul>标签里面，</p>\n<p>在我们的 spider 里面加入以下代码：</p>\n<pre><code>import scrapy\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n]\n\ndef parse(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        title = sel.xpath(&apos;a/text()&apos;).extract()\n        link = sel.xpath(&apos;a/@href&apos;).extract()\n        desc = sel.xpath(&apos;text()&apos;).extract()\n        print title, link, desc\n</code></pre><h3 id=\"使用我们的Item\"><a href=\"#使用我们的Item\" class=\"headerlink\" title=\"使用我们的Item\"></a>使用我们的Item</h3><p>Item objects 是一个 Python 字典，你可以像使用字典那样使用它。</p>\n<pre><code>&gt;&gt;&gt; item = DmozItem()\n&gt;&gt;&gt; item[&apos;title&apos;] = &apos;Example title&apos;\n&gt;&gt;&gt; item[&apos;title&apos;]\n&apos;Example title&apos;\n</code></pre><p>我们修改 spider 的代码：</p>\n<pre><code>import scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;,\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;\n]\n\ndef parse(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        item = DmozItem()\n        item[&apos;title&apos;] = sel.xpath(&apos;a/text()&apos;).extract()\n        item[&apos;link&apos;] = sel.xpath(&apos;a/@href&apos;).extract()\n        item[&apos;desc&apos;] = sel.xpath(&apos;text()&apos;).extract()\n        yield item\n</code></pre><p>现在运行代码会得到<code>DmozItem</code> objects:</p>\n<pre><code>[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By David Mertz; Addison Wesley. Book in progress, full text, ASCII format. Asks for feedback. [author website, Gnosis Software, Inc.\\n],\n  &apos;link&apos;: [u&apos;http://gnosis.cx/TPiP/&apos;],\n  &apos;title&apos;: [u&apos;Text Processing in Python&apos;]}\n[scrapy] DEBUG: Scraped from &lt;200 http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt;\n {&apos;desc&apos;: [u&apos; - By Sean McGrath; Prentice Hall PTR, 2000, ISBN 0130211192, has CD-ROM. Methods to build XML applications fast, Python tutorial, DOM and SAX, new Pyxie open source XML processing library. [Prentice Hall PTR]\\n&apos;],\n  &apos;link&apos;: [u&apos;http://www.informit.com/store/product.aspx?isbn=0130211192&apos;],\n  &apos;title&apos;: [u&apos;XML Processing with Python&apos;]}\n</code></pre><h2 id=\"Following-links\"><a href=\"#Following-links\" class=\"headerlink\" title=\"Following links\"></a>Following links</h2><p>仅仅提取两个页面的内容显然是不够的，如果我们需要提取链接在这两个页面上的链接以及它们的全部内容呢。<br>这里修改我们的代码：</p>\n<pre><code>import scrapy\n\nfrom tutorial.items import DmozItem\n\nclass DmozSpider(scrapy.Spider):\nname = &quot;dmoz&quot;\nallowed_domains = [&quot;dmoz.org&quot;]\nstart_urls = [\n    &quot;http://www.dmoz.org/Computers/Programming/Languages/Python/&quot;,\n]\n\ndef parse(self, response):\n    for href in response.css(&quot;ul.directory.dir-col &gt; li &gt; a::attr(&apos;href&apos;)&quot;):\n        url = response.urljoin(href.extract())\n        yield scrapy.Request(url, callback=self.parse_dir_contents)\n\ndef parse_dir_contents(self, response):\n    for sel in response.xpath(&apos;//ul/li&apos;):\n        item = DmozItem()\n        item[&apos;title&apos;] = sel.xpath(&apos;a/text()&apos;).extract()\n        item[&apos;link&apos;] = sel.xpath(&apos;a/@href&apos;).extract()\n        item[&apos;desc&apos;] = sel.xpath(&apos;text()&apos;).extract()\n        yield item\n</code></pre><p>现在 <em>parse()</em> 方法仅仅提取我们需要的URL，再用 <em>response.urljoin</em> 方法合成全局路径用以之后请求。在请求这些 URL 时，注册了一个 <em>parse_dir_contents()</em> callback 函数， 作为实际的内容提取。</p>\n<p>Scrapy 的 following links 机制：当你在一个 callback 函数中 yield 一个 Request 请求时，Scrapy 会安排发送 request 并且注册另一个 callback 函数用于当前 request 结束时执行。</p>\n<p>通过这个机制我们可以编写更为复杂的爬虫。</p>\n<h2 id=\"存储爬取的数据\"><a href=\"#存储爬取的数据\" class=\"headerlink\" title=\"存储爬取的数据\"></a>存储爬取的数据</h2><p>最简单的方式是用 <a href=\"http://doc.scrapy.org/en/1.0/topics/feed-exports.html#topics-feed-exports\">Feed exports</a>，通过下面的命令：</p>\n<pre><code>scrapy crawl dmoz -o items.json\n</code></pre><p>这会生成一个名为<code>item.json</code>的文件，存储了我们抓取的数据，存储格式为JSON。<br>小的项目可以使用这种存储方式，如果需要处理更加复杂的情况，则可以编写一个 <a href=\"http://doc.scrapy.org/en/1.0/topics/item-pipeline.html#topics-item-pipeline\">Item Pipeline</a></p>"},{"title":"Travel Image","date":"2016-03-31T02:48:44.000Z","_content":"\n{% qnimg kd1.jpg alt:垦丁海边 %}\n{% qnimg kd2.jpg alt:垦丁海边 %}\n<!-- more -->\n{% qnimg kd3.jpg alt:垦丁海边 %}\n{% qnimg kd4.jpg alt:垦丁海边 %}\n{% qnimg kd5.jpg alt:垦丁海边 %}\n","source":"_posts/Travel-Image.md","raw":"---\ntitle: Travel Image\ndate: 2016-03-31 10:48:44\ntags: \n\t- 垦丁\n\t- 台湾\ncategories: \n\t- 旅行\n---\n\n{% qnimg kd1.jpg alt:垦丁海边 %}\n{% qnimg kd2.jpg alt:垦丁海边 %}\n<!-- more -->\n{% qnimg kd3.jpg alt:垦丁海边 %}\n{% qnimg kd4.jpg alt:垦丁海边 %}\n{% qnimg kd5.jpg alt:垦丁海边 %}\n","slug":"Travel-Image","published":1,"updated":"2016-03-31T08:08:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4obi0009a3rnjhuhh29z","content":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd1.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd2.jpg\">\n<a id=\"more\"></a>\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd3.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd4.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd5.jpg\">\n","excerpt":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd1.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd2.jpg\">","more":"<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd3.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd4.jpg\">\n<img alt=\"垦丁海边\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/kd5.jpg\">"},{"title":"what is WSGI","date":"2016-04-05T04:17:27.000Z","_content":"\n# Web Server Gateway Interface\n\nWeb Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python\nweb 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.\n\n<!--more -->\n## Idea\n\nPython web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。\n\nWSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。\n\n## 规范概览\n\nWSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。\n\n所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n* 重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。\n* 允许在一个进程中同时运行多个应用程序或应用框架。\n* 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n* 进行内容后处理，例如应用XSLT样式表。\n\n## 示例程序\n\n用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：\n\n\tdef app(environ, start_response):\n    \tstart_response('200 OK', [('Content-Type', 'text/plain')])\n    \tyield \"Hello world!\\n\"\n \n其中\n\n* 第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。\n* 第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”\n* 第三行将响应消息的消息体返回。\n\n[原文链接](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface)\n\n\n","source":"_posts/what-is-WSGI.md","raw":"---\ntitle: what is WSGI\ndate: 2016-04-05 12:17:27\ntags: WSGI\ncategories: 技术相关\n---\n\n# Web Server Gateway Interface\n\nWeb Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python\nweb 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.\n\n<!--more -->\n## Idea\n\nPython web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。\n\nWSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。\n\n## 规范概览\n\nWSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。\n\n所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：\n\n* 重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。\n* 允许在一个进程中同时运行多个应用程序或应用框架。\n* 负载均衡和远程处理，通过在网络上转发请求和响应消息。\n* 进行内容后处理，例如应用XSLT样式表。\n\n## 示例程序\n\n用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：\n\n\tdef app(environ, start_response):\n    \tstart_response('200 OK', [('Content-Type', 'text/plain')])\n    \tyield \"Hello world!\\n\"\n \n其中\n\n* 第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。\n* 第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”\n* 第三行将响应消息的消息体返回。\n\n[原文链接](https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface)\n\n\n","slug":"what-is-WSGI","published":1,"updated":"2016-04-05T07:57:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4obm000ca3rn0561wfbi","content":"<h1 id=\"Web-Server-Gateway-Interface\"><a href=\"#Web-Server-Gateway-Interface\" class=\"headerlink\" title=\"Web Server Gateway Interface\"></a>Web Server Gateway Interface</h1><p>Web Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python<br>web 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.</p>\n<a id=\"more\"></a>\n<h2 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h2><p>Python web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。</p>\n<p>WSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。</p>\n<h2 id=\"规范概览\"><a href=\"#规范概览\" class=\"headerlink\" title=\"规范概览\"></a>规范概览</h2><p>WSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。</p>\n<p>所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p>\n<ul>\n<li>重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。</li>\n<li>允许在一个进程中同时运行多个应用程序或应用框架。</li>\n<li>负载均衡和远程处理，通过在网络上转发请求和响应消息。</li>\n<li>进行内容后处理，例如应用XSLT样式表。</li>\n</ul>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：</p>\n<pre><code>def app(environ, start_response):\n    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/plain&apos;)])\n    yield &quot;Hello world!\\n&quot;\n</code></pre><p>其中</p>\n<ul>\n<li>第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。</li>\n<li>第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”</li>\n<li>第三行将响应消息的消息体返回。</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\" target=\"_blank\" rel=\"external\">原文链接</a></p>\n","excerpt":"<h1 id=\"Web-Server-Gateway-Interface\"><a href=\"#Web-Server-Gateway-Interface\" class=\"headerlink\" title=\"Web Server Gateway Interface\"></a>Web Server Gateway Interface</h1><p>Web Server Gateway Interface(WSGI) 是一个简单通用的接口规范，介于 web 服务器和 Python web 应用或者框架之间。最初由 Phillip J. Eby 在2003.12.7 提出，编于 PEP 333。之后被接受作为 Python<br>web 应用开发的标准。最近一个版本是 v1.0.1，也就是 PEP 3333，发布于 2010.12.26.</p>","more":"<h2 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea\"></a>Idea</h2><p>Python web 框架对于 Python 新手来说一直是一个问题，因为 web 框架的选择被 web 服务器的选择所限制。Python 应用程序通常被设计适配 CGI， FastCGI，mod_python等 web 服务器中的一种。</p>\n<p>WSGI 作为一个底层接口被创建于 web 服务器和 web 应用程序或者框架之间，提升 web 应用程序开发的共性和可移植性。WSGI是基于现存的CGI标准而设计的。</p>\n<h2 id=\"规范概览\"><a href=\"#规范概览\" class=\"headerlink\" title=\"规范概览\"></a>规范概览</h2><p>WSGI区分为两个部分：一为“服务器”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境资讯及一个回呼函数（Callback Function）。当应用程序完成处理请求后，透过前述的回呼函数，将结果回传给服务器。</p>\n<p>所谓的 WSGI 中间件同时实现了API的两方，因此可以在WSGI服务和WSGI应用之间起调解作用：从WSGI服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p>\n<ul>\n<li>重写环境变量后，根据目标URL，将请求消息路由到不同的应用对象。</li>\n<li>允许在一个进程中同时运行多个应用程序或应用框架。</li>\n<li>负载均衡和远程处理，通过在网络上转发请求和响应消息。</li>\n<li>进行内容后处理，例如应用XSLT样式表。</li>\n</ul>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>用Python语言写的一个符合WSGI的“Hello World”应用程序如下所示：</p>\n<pre><code>def app(environ, start_response):\n    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;, &apos;text/plain&apos;)])\n    yield &quot;Hello world!\\n&quot;\n</code></pre><p>其中</p>\n<ul>\n<li>第一行定义了一个名为app的callable[2]，接受两个参数，environ和start_response，environ是一个字典包含了CGI中的环境变量，start_response也是一个callable，接受两个必须的参数，status（HTTP状态）和response_headers（响应消息的头）。</li>\n<li>第二行调用了start_response，状态指定为“200 OK”，消息头指定为内容类型是“text/plain”</li>\n<li>第三行将响应消息的消息体返回。</li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface\">原文链接</a></p>"},{"title":"致优一周年，香山团建","date":"2016-04-01T13:41:51.000Z","_content":"\n今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)\n\n几张美美的景色图\n{% qnimg IMG_0037.JPG title:山道 %}\n{% qnimg IMG_0039.JPG title:花 extend:-basic %}\n<!-- more -->\n{% qnimg IMG_0041.JPG %}\n{% qnimg IMG_0043.JPG title:俯瞰北京城 %}\n{% qnimg IMG_0044.JPG title:技术部合影～ %}\n{% qnimg IMG_0045.JPG title:路边的花 extend:-basic %}\n{% qnimg IMG_0046.JPG extend:-basic %}\n{% qnimg IMG_0049.JPG title:小组合影 %}\n\n{% qnimg IMG_0052.JPG title:我们是第一组登顶哒！ %}\n{% qnimg IMG_0053.JPG %}\n{% qnimg IMG_0056.JPG title:登山途中 %}\n{% qnimg IMG_0057.JPG %}\n\n{% qnimg IMG_0061.JPG title:我和玉琪 %}\n{% qnimg IMG_0062.JPG title:刚刚上山 %}\n{% qnimg IMG_0063.JPG title:小亭子里简单装个逼 %}\n{% qnimg IMG_0064.JPG %}\n\n{% qnimg IMG_0067.JPG title:小游戏 %}\n{% qnimg IMG_0068.JPG title:虚心听讲 %}\n{% qnimg IMG_0070.JPG title:都是知识 %}\n{% qnimg IMG_0071.JPG title::) %}\n{% qnimg IMG_0072.JPG title:都是景点 %}\n{% qnimg IMG_0073.JPG %}\n{% qnimg IMG_0074.JPG %}","source":"_posts/致优一周年，香山团建.md","raw":"---\ntitle: 致优一周年，香山团建\ndate: 2016-04-01 21:41:51\ntags: 致优团建\ncategories: 旅行\n---\n\n今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)\n\n几张美美的景色图\n{% qnimg IMG_0037.JPG title:山道 %}\n{% qnimg IMG_0039.JPG title:花 extend:-basic %}\n<!-- more -->\n{% qnimg IMG_0041.JPG %}\n{% qnimg IMG_0043.JPG title:俯瞰北京城 %}\n{% qnimg IMG_0044.JPG title:技术部合影～ %}\n{% qnimg IMG_0045.JPG title:路边的花 extend:-basic %}\n{% qnimg IMG_0046.JPG extend:-basic %}\n{% qnimg IMG_0049.JPG title:小组合影 %}\n\n{% qnimg IMG_0052.JPG title:我们是第一组登顶哒！ %}\n{% qnimg IMG_0053.JPG %}\n{% qnimg IMG_0056.JPG title:登山途中 %}\n{% qnimg IMG_0057.JPG %}\n\n{% qnimg IMG_0061.JPG title:我和玉琪 %}\n{% qnimg IMG_0062.JPG title:刚刚上山 %}\n{% qnimg IMG_0063.JPG title:小亭子里简单装个逼 %}\n{% qnimg IMG_0064.JPG %}\n\n{% qnimg IMG_0067.JPG title:小游戏 %}\n{% qnimg IMG_0068.JPG title:虚心听讲 %}\n{% qnimg IMG_0070.JPG title:都是知识 %}\n{% qnimg IMG_0071.JPG title::) %}\n{% qnimg IMG_0072.JPG title:都是景点 %}\n{% qnimg IMG_0073.JPG %}\n{% qnimg IMG_0074.JPG %}","slug":"致优一周年，香山团建","published":1,"updated":"2016-04-01T15:25:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cimxa4obr000ea3rn5hpqp6mh","content":"<p>今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)</p>\n<p>几张美美的景色图<br><img title=\"山道\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0037.JPG\"><br><img title=\"花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0039.JPG-basic\"><br><a id=\"more\"></a><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0041.JPG\"><br><img title=\"俯瞰北京城\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0043.JPG\"><br><img title=\"技术部合影～\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0044.JPG\"><br><img title=\"路边的花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0045.JPG-basic\"><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0046.JPG-basic\"><br><img title=\"小组合影\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0049.JPG\"></p>\n<img title=\"我们是第一组登顶哒！\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0052.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0053.JPG\">\n<img title=\"登山途中\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0056.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0057.JPG\">\n<img title=\"我和玉琪\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0061.JPG\">\n<img title=\"刚刚上山\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0062.JPG\">\n<img title=\"小亭子里简单装个逼\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0063.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0064.JPG\">\n<img title=\"小游戏\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0067.JPG\">\n<img title=\"虚心听讲\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0068.JPG\">\n<img title=\"都是知识\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0070.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0071.JPG\">\n<img title=\"都是景点\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0072.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0073.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0074.JPG\">","excerpt":"<p>今天公司成立一周年啦，香山团建～ 非常有趣的一次经历，大家都彼此更加了解了对方，嗯，上图:)</p>\n<p>几张美美的景色图<br><img title=\"山道\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0037.JPG\"><br><img title=\"花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0039.JPG-basic\"><br>","more":"<br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0041.JPG\"><br><img title=\"俯瞰北京城\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0043.JPG\"><br><img title=\"技术部合影～\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0044.JPG\"><br><img title=\"路边的花\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0045.JPG-basic\"><br><img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0046.JPG-basic\"><br><img title=\"小组合影\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0049.JPG\"></p>\n<img title=\"我们是第一组登顶哒！\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0052.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0053.JPG\">\n<img title=\"登山途中\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0056.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0057.JPG\">\n<img title=\"我和玉琪\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0061.JPG\">\n<img title=\"刚刚上山\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0062.JPG\">\n<img title=\"小亭子里简单装个逼\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0063.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0064.JPG\">\n<img title=\"小游戏\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0067.JPG\">\n<img title=\"虚心听讲\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0068.JPG\">\n<img title=\"都是知识\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0070.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0071.JPG\">\n<img title=\"都是景点\" src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0072.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0073.JPG\">\n<img src=\"http://7xsgwt.com1.z0.glb.clouddn.com/static/images/IMG_0074.JPG\">"}],"PostAsset":[],"PostCategory":[{"post_id":"cimxa4obf0007a3rns9tcnbrw","category_id":"cimxa4obc0005a3rnootp26mu","_id":"cimxa4obq000da3rneygn2etj"},{"post_id":"cimxa4ob10000a3rn53wbzo24","category_id":"cimxa4obc0005a3rnootp26mu","_id":"cimxa4obu000ha3rnk4rswjej"},{"post_id":"cimxa4obm000ca3rn0561wfbi","category_id":"cimxa4obc0005a3rnootp26mu","_id":"cimxa4obv000ja3rnj2t8mxqq"},{"post_id":"cimxa4ob70002a3rnv2kj6hyo","category_id":"cimxa4obc0005a3rnootp26mu","_id":"cimxa4obw000ma3rnkpgxnkf8"},{"post_id":"cimxa4obc0006a3rnsm54ibpq","category_id":"cimxa4obc0005a3rnootp26mu","_id":"cimxa4obw000na3rn9en7rfs8"},{"post_id":"cimxa4obi0009a3rnjhuhh29z","category_id":"cimxa4obv000ka3rnpsn4gt5g","_id":"cimxa4obx000ra3rnhssz6fem"},{"post_id":"cimxa4obr000ea3rn5hpqp6mh","category_id":"cimxa4obv000ka3rnpsn4gt5g","_id":"cimxa4oby000va3rnocgghdf3"}],"PostTag":[{"post_id":"cimxa4ob10000a3rn53wbzo24","tag_id":"cimxa4oba0004a3rnp2y65nlg","_id":"cimxa4obl000ba3rn7gqyghfn"},{"post_id":"cimxa4ob70002a3rnv2kj6hyo","tag_id":"cimxa4obh0008a3rnh24k1ztc","_id":"cimxa4obu000ia3rnabpvaxyd"},{"post_id":"cimxa4obc0006a3rnsm54ibpq","tag_id":"cimxa4obt000ga3rn982s18y3","_id":"cimxa4obx000qa3rnbl5em073"},{"post_id":"cimxa4obc0006a3rnsm54ibpq","tag_id":"cimxa4obw000la3rnhl3teair","_id":"cimxa4obx000sa3rnnlvss7n6"},{"post_id":"cimxa4obf0007a3rns9tcnbrw","tag_id":"cimxa4obx000pa3rnmy4xd11s","_id":"cimxa4oby000ua3rnvmlz17vn"},{"post_id":"cimxa4obi0009a3rnjhuhh29z","tag_id":"cimxa4obx000ta3rn0nnnowmt","_id":"cimxa4oc1000ya3rnnkee0tqy"},{"post_id":"cimxa4obi0009a3rnjhuhh29z","tag_id":"cimxa4obz000wa3rn9s525fk4","_id":"cimxa4oc2000za3rnj7k6h5l0"},{"post_id":"cimxa4obm000ca3rn0561wfbi","tag_id":"cimxa4obz000xa3rnd4txpxmf","_id":"cimxa4oc30011a3rnkxa96hwc"},{"post_id":"cimxa4obr000ea3rn5hpqp6mh","tag_id":"cimxa4oc20010a3rnjed9sp6t","_id":"cimxa4oc40012a3rnt81uh94w"}],"Tag":[{"name":"Nginx","_id":"cimxa4oba0004a3rnp2y65nlg"},{"name":"python","_id":"cimxa4obh0008a3rnh24k1ztc"},{"name":"github","_id":"cimxa4obt000ga3rn982s18y3"},{"name":"Hexo","_id":"cimxa4obw000la3rnhl3teair"},{"name":"Scrapy","_id":"cimxa4obx000pa3rnmy4xd11s"},{"name":"垦丁","_id":"cimxa4obx000ta3rn0nnnowmt"},{"name":"台湾","_id":"cimxa4obz000wa3rn9s525fk4"},{"name":"WSGI","_id":"cimxa4obz000xa3rnd4txpxmf"},{"name":"致优团建","_id":"cimxa4oc20010a3rnjed9sp6t"}]}}